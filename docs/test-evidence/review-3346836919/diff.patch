diff --git a/.env.example b/.env.example
index 2833e76f..86246b57 100644
--- a/.env.example
+++ b/.env.example
@@ -26,6 +26,7 @@ REACT_APP_ENABLE_MOCK_MODE=false
 
 # === AI Services ===
 # OPENAI_API_KEY=sk-your-openai-key
+OPENAI_MODERATION_MODEL=omni-moderation-latest
 # PERSPECTIVE_API_KEY=your-perspective-key
 
 # === Billing (Stripe) ===
diff --git a/docs/plan/issue-comment-3412385809.md b/docs/plan/issue-comment-3412385809.md
index 01256e1d..df8e7839 100644
--- a/docs/plan/issue-comment-3412385809.md
+++ b/docs/plan/issue-comment-3412385809.md
@@ -2,7 +2,7 @@
 
 **Comment Date:** 2025-10-16
 **PR:** #584 (feat/api-configuration-490)
-**Comment URL:** https://github.com/Eibon7/roastr-ai/pull/584#issuecomment-3412385809
+**Comment URL:** [#3412385809](https://github.com/Eibon7/roastr-ai/pull/584#issuecomment-3412385809)
 **Status:** üîÑ In Progress
 
 ---
@@ -328,7 +328,7 @@ grep -rn "moderations.create" src/ scripts/ -A 5 | tee docs/test-evidence/issue-
 - **CodeRabbit Comment:** #3412385809
 - **PR:** #584 (feat/api-configuration-490)
 - **Issue:** #490 (API Configuration & Verification Scripts)
-- **OpenAI Moderation API Docs:** https://platform.openai.com/docs/api-reference/moderations
+- **OpenAI Moderation API Docs:** [OpenAI Moderation API Reference](https://platform.openai.com/docs/api-reference/moderations)
 - **Quality Standards:** `docs/QUALITY-STANDARDS.md`
 - **Pattern Reference:** `docs/patterns/coderabbit-lessons.md`
 
diff --git a/docs/test-evidence/issue-comment-3412385809/SUMMARY.md b/docs/test-evidence/issue-comment-3412385809/SUMMARY.md
index f17c73ee..a9caeda7 100644
--- a/docs/test-evidence/issue-comment-3412385809/SUMMARY.md
+++ b/docs/test-evidence/issue-comment-3412385809/SUMMARY.md
@@ -171,9 +171,9 @@ Result: ‚úÖ Single occurrence found, includes `model` parameter (line 1348)
 ## üîó Referencias
 
 - **PR:** #584 (feat/api-configuration-490)
-- **CodeRabbit Comment:** https://github.com/Eibon7/roastr-ai/pull/584#issuecomment-3412385809
+- **CodeRabbit Comment:** [#3412385809](https://github.com/Eibon7/roastr-ai/pull/584#issuecomment-3412385809)
 - **Issue:** #490 (API Configuration & Verification Scripts)
-- **OpenAI Moderation API Docs:** https://platform.openai.com/docs/api-reference/moderations
+- **OpenAI Moderation API Docs:** [OpenAI Moderation API Reference](https://platform.openai.com/docs/api-reference/moderations)
 - **Planning Document:** `docs/plan/issue-comment-3412385809.md`
 - **Evidence Directory:** `docs/test-evidence/issue-comment-3412385809/`
 - **Files Modified:** `src/workers/AnalyzeToxicityWorker.js` (lines 1347-1350)
diff --git a/jest.config.js b/jest.config.js
index 2d2efd5d..3a732b5e 100644
--- a/jest.config.js
+++ b/jest.config.js
@@ -77,8 +77,19 @@ module.exports = {
   // Projects for different test types
   projects: [
     {
-      displayName: 'node-tests',
-      testMatch: ['<rootDir>/tests/unit/routes/**/*.test.js', '<rootDir>/tests/unit/services/**/*.test.js', '<rootDir>/tests/unit/workers/**/*.test.js', '<rootDir>/tests/unit/middleware/**/*.test.js', '<rootDir>/tests/unit/config/**/*.test.js', '<rootDir>/tests/unit/utils/**/*.test.js', '<rootDir>/tests/unit/adapters/**/*.test.js', '<rootDir>/tests/unit/frontend/**/*.test.js', '<rootDir>/tests/unit/scripts/**/*.test.js', '<rootDir>/tests/integration/**/*.test.js', '<rootDir>/tests/e2e/**/*.test.js', '<rootDir>/tests/smoke/**/*.test.js', '<rootDir>/tests/security/**/*.test.js'],
+      displayName: 'unit-tests',
+      testMatch: ['<rootDir>/tests/unit/routes/**/*.test.js', '<rootDir>/tests/unit/services/**/*.test.js', '<rootDir>/tests/unit/workers/**/*.test.js', '<rootDir>/tests/unit/middleware/**/*.test.js', '<rootDir>/tests/unit/config/**/*.test.js', '<rootDir>/tests/unit/utils/**/*.test.js', '<rootDir>/tests/unit/adapters/**/*.test.js', '<rootDir>/tests/unit/frontend/**/*.test.js', '<rootDir>/tests/unit/scripts/**/*.test.js'],
+      setupFilesAfterEnv: ['<rootDir>/tests/setupEnvOnly.js']
+    },
+    {
+      displayName: 'integration-tests',
+      testMatch: ['<rootDir>/tests/integration/**/*.test.js', '<rootDir>/tests/e2e/**/*.test.js', '<rootDir>/tests/smoke/**/*.test.js'],
+      setupFilesAfterEnv: ['<rootDir>/tests/setupIntegration.js'],
+      testTimeout: 30000
+    },
+    {
+      displayName: 'security-tests',
+      testMatch: ['<rootDir>/tests/security/**/*.test.js'],
       setupFilesAfterEnv: ['<rootDir>/tests/setupEnvOnly.js']
     },
     {
diff --git a/tests/helpers/tenantTestUtils.js b/tests/helpers/tenantTestUtils.js
index 66ebc960..e0ea3bec 100644
--- a/tests/helpers/tenantTestUtils.js
+++ b/tests/helpers/tenantTestUtils.js
@@ -13,7 +13,7 @@ const { v4: uuidv4 } = require('uuid');
 const SUPABASE_URL = process.env.SUPABASE_URL;
 const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;
 const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;
-const JWT_SECRET = process.env.SUPABASE_JWT_SECRET || 'super-secret-jwt-token-with-at-least-32-characters-long';
+const JWT_SECRET = process.env.JWT_SECRET || process.env.SUPABASE_JWT_SECRET || 'super-secret-jwt-token-with-at-least-32-characters-long';
 
 if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY || !SUPABASE_ANON_KEY) {
   throw new Error('Missing required Supabase environment variables');
@@ -41,40 +41,54 @@ async function createTestTenants() {
     id: uuidv4(),
     email: `test-user-a-${Date.now()}@example.com`,
     name: 'Test User A',
-    plan: 'basic'
+    plan: 'pro'  // Changed from 'basic' to 'pro' - valid for both users and orgs
   };
 
   const userB = {
     id: uuidv4(),
     email: `test-user-b-${Date.now()}@example.com`,
     name: 'Test User B',
-    plan: 'basic'
+    plan: 'pro'  // Changed from 'basic' to 'pro' - valid for both users and orgs
   };
 
-  const { data: createdUserA, error: errorUserA } = await serviceClient
+  console.log('üîÑ Attempting to insert User A...');
+  const response = await serviceClient
     .from('users')
     .insert(userA)
-    .select()
-    .single();
+    .select();
+
+  console.log('Response:', JSON.stringify(response, null, 2));
+
+  const { data: createdUserA, error: errorUserA } = response;
 
   if (errorUserA) throw new Error(`Failed to create User A: ${JSON.stringify(errorUserA)}`);
+  if (!createdUserA || createdUserA.length === 0) throw new Error('User A created but no data returned');
+
+  const userAData = Array.isArray(createdUserA) ? createdUserA[0] : createdUserA;
 
-  const { data: createdUserB, error: errorUserB } = await serviceClient
+  console.log('üîÑ Attempting to insert User B...');
+  const responseB = await serviceClient
     .from('users')
     .insert(userB)
-    .select()
-    .single();
+    .select();
+
+  console.log('Response B:', JSON.stringify(responseB, null, 2));
+
+  const { data: createdUserB, error: errorUserB } = responseB;
 
   if (errorUserB) throw new Error(`Failed to create User B: ${JSON.stringify(errorUserB)}`);
+  if (!createdUserB || createdUserB.length === 0) throw new Error('User B created but no data returned');
+
+  const userBData = Array.isArray(createdUserB) ? createdUserB[0] : createdUserB;
 
-  testUsers.push(createdUserA.id, createdUserB.id);
+  testUsers.push(userAData.id, userBData.id);
 
   // Now create organizations with required fields
   const tenantA = {
     id: uuidv4(),
     name: 'Acme Corp Test',
     slug: `acme-test-${Date.now()}`,
-    owner_id: createdUserA.id,
+    owner_id: userAData.id,
     posts: [],
     comments: [],
     roasts: []
@@ -84,7 +98,7 @@ async function createTestTenants() {
     id: uuidv4(),
     name: 'Beta Inc Test',
     slug: `beta-test-${Date.now()}`,
-    owner_id: createdUserB.id,
+    owner_id: userBData.id,
     posts: [],
     comments: [],
     roasts: []
@@ -121,11 +135,11 @@ async function createTestTenants() {
   testTenants.push(tenantA.id, tenantB.id);
 
   // Map tenants to their owner user IDs for JWT context
-  tenantUsers.set(tenantA.id, createdUserA.id);
-  tenantUsers.set(tenantB.id, createdUserB.id);
+  tenantUsers.set(tenantA.id, userAData.id);
+  tenantUsers.set(tenantB.id, userBData.id);
 
-  console.log(`‚úÖ Tenant A: ${tenantA.id} (owner: ${createdUserA.id})`);
-  console.log(`‚úÖ Tenant B: ${tenantB.id} (owner: ${createdUserB.id})`);
+  console.log(`‚úÖ Tenant A: ${tenantA.id} (owner: ${userAData.id})`);
+  console.log(`‚úÖ Tenant B: ${tenantB.id} (owner: ${userBData.id})`);
 
   return { tenantA, tenantB };
 }
@@ -158,12 +172,23 @@ async function createTestData(tenantId, type = 'all') {
       }
     ];
 
-    const { data, error } = await serviceClient
+    const response = await serviceClient
       .from('posts')
       .insert(posts)
       .select();
 
-    if (error) throw new Error(`Failed to create posts: ${error.message}`);
+    console.log('üì¶ Posts response:', JSON.stringify(response, null, 2));
+
+    const { data, error } = response;
+
+    if (error) {
+      console.error('‚ùå Posts error:', JSON.stringify(error, null, 2));
+      throw new Error(`Failed to create posts: ${JSON.stringify(error)}`);
+    }
+    if (!data || data.length === 0) {
+      console.error('‚ùå No posts data returned, data:', data);
+      throw new Error('Posts created but no data returned');
+    }
     testData.posts = data;
     console.log(`  ‚úÖ Created ${data.length} posts`);
   }
@@ -175,17 +200,28 @@ async function createTestData(tenantId, type = 'all') {
       post_id: post.id,
       platform: 'twitter',
       platform_comment_id: `comment_${Date.now()}_${i}`,
-      content: `Test comment ${i + 1}`,
+      original_text: `Test comment ${i + 1}`,
       platform_username: `commenter${i + 1}`,
       toxicity_score: 0.5 + (i * 0.1)
     }));
 
-    const { data, error } = await serviceClient
+    const response = await serviceClient
       .from('comments')
       .insert(comments)
       .select();
 
-    if (error) throw new Error(`Failed to create comments: ${error.message}`);
+    console.log('üì¶ Comments response:', JSON.stringify(response, null, 2));
+
+    const { data, error } = response;
+
+    if (error) {
+      console.error('‚ùå Comments error:', JSON.stringify(error, null, 2));
+      throw new Error(`Failed to create comments: ${JSON.stringify(error)}`);
+    }
+    if (!data || data.length === 0) {
+      console.error('‚ùå No comments data returned');
+      throw new Error('Comments created but no data returned');
+    }
     testData.comments = data;
     console.log(`  ‚úÖ Created ${data.length} comments`);
   }
@@ -239,21 +275,28 @@ async function setTenantContext(tenantId) {
     { algorithm: 'HS256' }
   );
 
-  await testClient.auth.setSession({
+  const sessionResult = await testClient.auth.setSession({
     access_token: token,
     refresh_token: 'fake-refresh-token'
   });
 
+  console.log(`üîê Session set result:`, JSON.stringify(sessionResult, null, 2));
+
   currentTenantContext = tenantId;
 
   // Verify
-  const { data } = await testClient
+  const verifyResponse = await testClient
     .from('organizations')
     .select('id')
     .eq('id', tenantId)
     .single();
 
-  if (!data) throw new Error(`Failed to verify context for ${tenantId}`);
+  console.log(`üîç Verify response:`, JSON.stringify(verifyResponse, null, 2));
+
+  if (!verifyResponse.data) {
+    console.error(`‚ùå Failed to verify context. UserId: ${userId}, TenantId: ${tenantId}`);
+    throw new Error(`Failed to verify context for ${tenantId}`);
+  }
 
   console.log(`‚úÖ Context set to: ${tenantId}`);
 }
