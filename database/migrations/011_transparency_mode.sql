-- ============================================================================
-- Migration: AI Response Transparency Settings (Issue #187)
-- Date: 2025-01-24
-- Description: Add transparency mode settings for AI-generated responses
-- ============================================================================

-- Add transparency_mode column to users table
ALTER TABLE users ADD COLUMN transparency_mode VARCHAR(20) DEFAULT 'bio';

-- Add constraint to ensure valid transparency modes
ALTER TABLE users ADD CONSTRAINT users_transparency_mode_check 
    CHECK (transparency_mode IN ('bio', 'signature', 'creative'));

-- Create index for efficient queries
CREATE INDEX idx_users_transparency_mode ON users(transparency_mode);

-- ============================================================================
-- CREATIVE DISCLAIMERS CONFIGURATION TABLE
-- ============================================================================

-- Table to store creative disclaimers pool
CREATE TABLE transparency_disclaimers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    
    -- Disclaimer details
    disclaimer_text TEXT NOT NULL,
    language VARCHAR(10) DEFAULT 'es', -- Spanish by default
    category VARCHAR(50) DEFAULT 'general', -- general, sarcastic, humorous
    
    -- Status
    is_active BOOLEAN DEFAULT TRUE,
    weight INTEGER DEFAULT 1, -- For weighted random selection
    
    -- Usage tracking
    usage_count INTEGER DEFAULT 0,
    last_used_at TIMESTAMPTZ,
    
    -- Metadata
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    created_by UUID REFERENCES users(id),
    
    CONSTRAINT transparency_disclaimers_language_check CHECK (language IN ('es', 'en')),
    CONSTRAINT transparency_disclaimers_category_check CHECK (category IN ('general', 'sarcastic', 'humorous')),
    CONSTRAINT transparency_disclaimers_weight_check CHECK (weight >= 0 AND weight <= 10)
);

-- Create index for efficient random selection
CREATE INDEX idx_transparency_disclaimers_active ON transparency_disclaimers(is_active, language, weight)
WHERE is_active = TRUE;

-- ============================================================================
-- DEFAULT CREATIVE DISCLAIMERS
-- ============================================================================

-- Insert default Spanish disclaimers
INSERT INTO transparency_disclaimers (disclaimer_text, language, category, weight) VALUES
('Ningún humano perdió tiempo en ti', 'es', 'sarcastic', 2),
('Powered by Roastr™ — salvo contigo', 'es', 'sarcastic', 2),
('Respuesta automatizada porque no vales mi tiempo', 'es', 'sarcastic', 3),
('Bot al habla (más inteligente que tú)', 'es', 'humorous', 2),
('IA respondiendo — humanos ocupados con gente importante', 'es', 'sarcastic', 3),
('Generado por circuitos, no neuronas', 'es', 'general', 1),
('Respuesta cortesía de Roastr.AI', 'es', 'general', 1),
('Este roast fue horneado digitalmente', 'es', 'humorous', 2),
('0% humano, 100% devastador', 'es', 'sarcastic', 3),
('Mensaje automático para trolls automáticos', 'es', 'sarcastic', 2);

-- Insert default English disclaimers
INSERT INTO transparency_disclaimers (disclaimer_text, language, category, weight) VALUES
('No humans wasted time on you', 'en', 'sarcastic', 2),
('Powered by Roastr™ — except for you', 'en', 'sarcastic', 2),
('Automated response because you''re not worth my time', 'en', 'sarcastic', 3),
('Bot speaking (smarter than you)', 'en', 'humorous', 2),
('AI responding — humans busy with important people', 'en', 'sarcastic', 3),
('Generated by circuits, not neurons', 'en', 'general', 1),
('Response courtesy of Roastr.AI', 'en', 'general', 1),
('This roast was digitally baked', 'en', 'humorous', 2),
('0% human, 100% devastating', 'en', 'sarcastic', 3),
('Automatic message for automatic trolls', 'en', 'sarcastic', 2);

-- ============================================================================
-- AUDIT LOGGING FOR TRANSPARENCY MODE CHANGES
-- ============================================================================

-- Function to log transparency mode changes
CREATE OR REPLACE FUNCTION log_transparency_mode_changes()
RETURNS TRIGGER AS $$
BEGIN
    -- Only log if transparency_mode actually changed
    IF OLD.transparency_mode IS DISTINCT FROM NEW.transparency_mode THEN
        INSERT INTO audit_logs (
            user_id,
            action,
            actor_id,
            actor_type,
            resource_type,
            resource_id,
            details,
            legal_basis,
            retention_period_days
        ) VALUES (
            NEW.id,
            'transparency_mode_changed',
            NEW.id,
            'user',
            'user_settings',
            NEW.id,
            jsonb_build_object(
                'old_mode', OLD.transparency_mode,
                'new_mode', NEW.transparency_mode,
                'timestamp', NOW()
            ),
            'user_consent_ai_transparency',
            365  -- 1 year retention for transparency settings
        );
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for transparency mode changes
CREATE TRIGGER log_transparency_mode_changes_trigger
    AFTER UPDATE ON users
    FOR EACH ROW
    WHEN (OLD.transparency_mode IS DISTINCT FROM NEW.transparency_mode)
    EXECUTE FUNCTION log_transparency_mode_changes();

-- ============================================================================
-- FUNCTIONS FOR TRANSPARENCY MANAGEMENT
-- ============================================================================

-- Function to get a random creative disclaimer
CREATE OR REPLACE FUNCTION get_random_disclaimer(user_language VARCHAR DEFAULT 'es')
RETURNS TEXT AS $$
DECLARE
    selected_disclaimer TEXT;
BEGIN
    -- Select a random disclaimer using weighted selection
    SELECT disclaimer_text INTO selected_disclaimer
    FROM transparency_disclaimers
    WHERE is_active = TRUE 
    AND language = user_language
    ORDER BY RANDOM() * weight DESC
    LIMIT 1;
    
    -- Update usage stats
    IF selected_disclaimer IS NOT NULL THEN
        UPDATE transparency_disclaimers
        SET usage_count = usage_count + 1,
            last_used_at = NOW()
        WHERE disclaimer_text = selected_disclaimer
        AND language = user_language;
    END IF;
    
    -- Fallback to default if no disclaimer found
    IF selected_disclaimer IS NULL THEN
        selected_disclaimer := CASE 
            WHEN user_language = 'es' THEN '— Generado por Roastr.AI'
            ELSE '— Generated by Roastr.AI'
        END;
    END IF;
    
    RETURN selected_disclaimer;
END;
$$ LANGUAGE plpgsql;

-- Function to get user's transparency preference
CREATE OR REPLACE FUNCTION get_user_transparency_mode(user_uuid UUID)
RETURNS VARCHAR AS $$
DECLARE
    mode VARCHAR;
BEGIN
    SELECT transparency_mode INTO mode
    FROM users
    WHERE id = user_uuid;
    
    -- Default to 'bio' if not found
    RETURN COALESCE(mode, 'bio');
END;
$$ LANGUAGE plpgsql;

-- Function to append transparency disclaimer to roast
CREATE OR REPLACE FUNCTION append_transparency_disclaimer(
    roast_text TEXT,
    user_uuid UUID,
    user_language VARCHAR DEFAULT 'es'
)
RETURNS TEXT AS $$
DECLARE
    mode VARCHAR;
    disclaimer TEXT;
    final_text TEXT;
BEGIN
    -- Get user's transparency mode
    SELECT transparency_mode INTO mode
    FROM users
    WHERE id = user_uuid;
    
    -- Default to 'bio' if not set
    mode := COALESCE(mode, 'bio');
    
    -- Handle each transparency mode
    CASE mode
        WHEN 'bio' THEN
            -- No modification to the roast
            final_text := roast_text;
            
        WHEN 'signature' THEN
            -- Append fixed signature
            disclaimer := CASE 
                WHEN user_language = 'es' THEN E'\n\n— Generado por Roastr.AI'
                ELSE E'\n\n— Generated by Roastr.AI'
            END;
            final_text := roast_text || disclaimer;
            
        WHEN 'creative' THEN
            -- Append random creative disclaimer
            disclaimer := E'\n\n' || get_random_disclaimer(user_language);
            final_text := roast_text || disclaimer;
            
        ELSE
            -- Fallback to bio mode
            final_text := roast_text;
    END CASE;
    
    RETURN final_text;
END;
$$ LANGUAGE plpgsql;

-- ============================================================================
-- COMMENTS
-- ============================================================================

COMMENT ON COLUMN users.transparency_mode IS 'AI transparency mode: bio (disclaimer in bio), signature (fixed signature), creative (random disclaimers) - Issue #187';
COMMENT ON TABLE transparency_disclaimers IS 'Pool of creative disclaimers for AI transparency in responses - Issue #187';
COMMENT ON FUNCTION get_random_disclaimer(VARCHAR) IS 'Get a weighted random creative disclaimer in the specified language';
COMMENT ON FUNCTION get_user_transparency_mode(UUID) IS 'Get user transparency mode preference (defaults to bio)';
COMMENT ON FUNCTION append_transparency_disclaimer(TEXT, UUID, VARCHAR) IS 'Append appropriate transparency disclaimer to roast based on user settings';
COMMENT ON FUNCTION log_transparency_mode_changes() IS 'Audit trail function for transparency mode changes';

-- ============================================================================
-- STATISTICS VIEW
-- ============================================================================

CREATE OR REPLACE VIEW transparency_mode_stats AS
SELECT 
    transparency_mode,
    COUNT(*) as user_count,
    ROUND(COUNT(*) * 100.0 / NULLIF(SUM(COUNT(*)) OVER (), 0), 2) as percentage
FROM users
GROUP BY transparency_mode
ORDER BY user_count DESC;

COMMENT ON VIEW transparency_mode_stats IS 'Statistics on transparency mode adoption across users';

-- ============================================================================
-- END OF MIGRATION
-- ============================================================================