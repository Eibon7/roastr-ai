
> roastr-ai@1.0.0 test
> jest --verbose --detectOpenHandles

FAIL node-tests tests/unit/frontend/billing.test.js
  Billing Frontend Tests
    Plans Data Loading
      ✕ should load subscription data successfully (33 ms)
      ✕ should load plans data successfully (7 ms)
      ✕ should handle API errors gracefully (4 ms)
    UI Manipulation
      ✕ should show current plan badge for non-free plans (4 ms)
      ✕ should show portal button for subscribed users (5 ms)
      ✕ should render plans grid correctly (4 ms)
    Checkout Session Creation
      ✕ should handle checkout creation errors (6 ms)
      ○ skipped should create checkout session successfully (JSDOM location redirect limitation)
    Customer Portal
      ○ skipped should open customer portal successfully (JSDOM location redirect limitation)
    Message Display
      ✕ should show error messages (3 ms)
      ✕ should show success messages (8 ms)
    Loading States
      ✕ should show and hide loading overlay (4 ms)
  Billing Success Page Tests
    ✓ should extract session ID from URL (5 ms)
    ✓ should update subscription display after webhook processing (4 ms)

  ● Billing Frontend Tests › Plans Data Loading › should load subscription data successfully

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Plans Data Loading › should load plans data successfully

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Plans Data Loading › should handle API errors gracefully

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › UI Manipulation › should show current plan badge for non-free plans

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › UI Manipulation › should show portal button for subscribed users

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › UI Manipulation › should render plans grid correctly

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Checkout Session Creation › should handle checkout creation errors

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Message Display › should show error messages

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Message Display › should show success messages

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Loading States › should show and hide loading overlay

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

FAIL node-tests tests/integration/oauth-mock.test.js
  ● OAuth Mock Integration Tests › Platform Support › should return all supported platforms

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Platform Support › should have correct platform configurations

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Connection Status › should return empty connections initially

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Connection Status › should require authentication

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Connect Flow › should initiate connection successfully

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Connect Flow › should reject unsupported platform

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Connect Flow › should require authentication for connect

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Connect Flow › should sanitize platform parameter

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Callback Flow › should handle successful callback

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Callback Flow › should handle callback with error

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Callback Flow › should reject callback without required parameters

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Callback Flow › should reject callback with invalid state

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Callback Flow › should reject expired state

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Complete OAuth Flow › twitter OAuth flow › should complete full connect -> callback -> status cycle

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Complete OAuth Flow › instagram OAuth flow › should complete full connect -> callback -> status cycle

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Complete OAuth Flow › youtube OAuth flow › should complete full connect -> callback -> status cycle

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Complete OAuth Flow › facebook OAuth flow › should complete full connect -> callback -> status cycle

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Complete OAuth Flow › bluesky OAuth flow › should complete full connect -> callback -> status cycle

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Token Management › should refresh tokens successfully

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Token Management › should disconnect successfully

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Token Management › should handle refresh for non-existent connection

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Token Management › should handle disconnect for non-existent connection

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Mock Reset Functionality › should reset specific platform connection

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Mock Reset Functionality › should reset all connections

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Mock Reset Functionality › should only be available in mock mode

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Error Handling & Edge Cases › should handle malformed state parameter

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Error Handling & Edge Cases › should handle platform mismatch in state

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Error Handling & Edge Cases › should handle already connected platform

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Error Handling & Edge Cases › should validate platform parameter format

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › User Info Validation › should provide valid user info for all platforms

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)


  ● Test suite failed to run

    TypeError: flags.reload is not a function

      27 |     delete process.env.ENABLE_OAUTH_MOCK;
      28 |     delete process.env.ENABLE_MOCK_MODE;
    > 29 |     flags.reload();
         |           ^
      30 |   });
      31 |
      32 |   describe('Platform Support', () => {

      at Object.reload (tests/integration/oauth-mock.test.js:29:11)

FAIL node-tests tests/integration/authWorkflow.test.js
  Authentication Workflow Integration Tests
    User Registration and Login Flow
      ✕ should complete full user signup and login workflow (37 ms)
      ✕ should handle duplicate email registration (10 ms)
      ✕ should handle invalid credentials (5 ms)
    Integration Management Flow
      ✕ should manage user integrations (5 ms)
      ✕ should enforce free plan limits (3 ms)
    Authentication Middleware
      ✓ should protect authenticated endpoints (5 ms)
      ✓ should reject invalid tokens (4 ms)
    Password Reset Flow
      ✕ should handle password reset request (6 ms)
      ✓ should handle magic link requests (3 ms)

  ● Authentication Workflow Integration Tests › User Registration and Login Flow › should complete full user signup and login workflow

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      332 |         console.log('Signup response error:', signupResponse.body);
      333 |       }
    > 334 |       expect(signupResponse.status).toBe(201);
          |                                     ^
      335 |       expect(signupResponse.body.success).toBe(true);
      336 |       expect(signupResponse.body.data.user.email).toBe('testuser@example.com');
      337 |       expect(signupResponse.body.data.session.access_token).toBeTruthy();

      at Object.toBe (tests/integration/authWorkflow.test.js:334:37)

  ● Authentication Workflow Integration Tests › User Registration and Login Flow › should handle duplicate email registration

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      404 |         });
      405 |
    > 406 |       expect(duplicateResponse.status).toBe(400);
          |                                        ^
      407 |       expect(duplicateResponse.body.success).toBe(false);
      408 |     });
      409 |

      at Object.toBe (tests/integration/authWorkflow.test.js:406:40)

  ● Authentication Workflow Integration Tests › User Registration and Login Flow › should handle invalid credentials

    expect(received).toContain(expected) // indexOf

    Expected substring: "Invalid login credentials"
    Received string:    "Wrong email or password"

      419 |       expect(loginResponse.status).toBe(401);
      420 |       expect(loginResponse.body.success).toBe(false);
    > 421 |       expect(loginResponse.body.error).toContain('Invalid login credentials');
          |                                        ^
      422 |     });
      423 |   });
      424 |

      at Object.toContain (tests/integration/authWorkflow.test.js:421:40)

  ● Authentication Workflow Integration Tests › Integration Management Flow › should manage user integrations

    TypeError: Cannot read properties of undefined (reading 'session')

      434 |         });
      435 |       
    > 436 |       authToken = signupResponse.body.data.session.access_token;
          |                                            ^
      437 |     });
      438 |
      439 |     it('should manage user integrations', async () => {

      at Object.session (tests/integration/authWorkflow.test.js:436:44)

  ● Authentication Workflow Integration Tests › Integration Management Flow › should enforce free plan limits

    TypeError: Cannot read properties of undefined (reading 'session')

      434 |         });
      435 |       
    > 436 |       authToken = signupResponse.body.data.session.access_token;
          |                                            ^
      437 |     });
      438 |
      439 |     it('should manage user integrations', async () => {

      at Object.session (tests/integration/authWorkflow.test.js:436:44)

  ● Authentication Workflow Integration Tests › Password Reset Flow › should handle password reset request

    expect(received).toContain(expected) // indexOf

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      550 |       expect(resetResponse.status).toBe(200);
      551 |       expect(resetResponse.body.success).toBe(true);
    > 552 |       expect(resetResponse.body.data.message).toContain('Password reset email sent');
          |                                               ^
      553 |     });
      554 |
      555 |     it('should handle magic link requests', async () => {

      at Object.toContain (tests/integration/authWorkflow.test.js:552:47)

FAIL node-tests tests/unit/routes/integrations-new.test.js
  New Integration Routes
    GET /api/integrations/platforms
      ✕ should return all supported platforms (6 ms)
    GET /api/integrations/status
      ✕ should require authentication (6 ms)
      ✕ should return empty status for new user (4 ms)
    POST /api/integrations/connect
      ✕ should require authentication (3 ms)
      ✕ should require platform parameter (5 ms)
      ✕ should reject unsupported platform (4 ms)
      ✕ should successfully connect to Twitter (4 ms)
      ✕ should successfully connect to multiple platforms (4 ms)
    POST /api/integrations/import
      ✕ should require authentication (4 ms)
      ✕ should require platform parameter (4 ms)
      ✕ should require platform to be connected first (4 ms)
      ✕ should successfully start import from connected platform (3 ms)
      ✕ should respect maximum import limit (4 ms)
    GET /api/integrations/import/status/:platform
      ✕ should require authentication (3 ms)
      ✕ should reject unsupported platform (4 ms)
      ✕ should return import status for connected platform (4 ms)
    POST /api/integrations/disconnect
      ✕ should require authentication (4 ms)
      ✕ should require platform parameter (4 ms)
      ✕ should fail for not connected platform (3 ms)
      ✕ should successfully disconnect from platform (4 ms)
    Integration flow testing
      ✕ should handle complete connect-import-disconnect flow (4 ms)

  ● New Integration Routes › GET /api/integrations/platforms › should return all supported platforms

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      14 |         .get('/api/integrations/platforms');
      15 |
    > 16 |       expect(response.status).toBe(200);
         |                               ^
      17 |       expect(response.body.success).toBe(true);
      18 |       expect(response.body.data.platforms).toBeInstanceOf(Array);
      19 |       expect(response.body.data.count).toBe(7);

      at Object.toBe (tests/unit/routes/integrations-new.test.js:16:31)

  ● New Integration Routes › GET /api/integrations/status › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      44 |         .get('/api/integrations/status');
      45 |
    > 46 |       expect(response.status).toBe(401);
         |                               ^
      47 |     });
      48 |
      49 |     it('should return empty status for new user', async () => {

      at Object.toBe (tests/unit/routes/integrations-new.test.js:46:31)

  ● New Integration Routes › GET /api/integrations/status › should return empty status for new user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      52 |         .set('Authorization', `Bearer ${authToken}`);
      53 |
    > 54 |       expect(response.status).toBe(200);
         |                               ^
      55 |       expect(response.body.success).toBe(true);
      56 |       expect(response.body.data.integrations).toBeInstanceOf(Array);
      57 |       expect(response.body.data.connectedCount).toBe(0);

      at Object.toBe (tests/unit/routes/integrations-new.test.js:54:31)

  ● New Integration Routes › POST /api/integrations/connect › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      72 |         .send({ platform: 'twitter' });
      73 |
    > 74 |       expect(response.status).toBe(401);
         |                               ^
      75 |     });
      76 |
      77 |     it('should require platform parameter', async () => {

      at Object.toBe (tests/unit/routes/integrations-new.test.js:74:31)

  ● New Integration Routes › POST /api/integrations/connect › should require platform parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      81 |         .send({});
      82 |
    > 83 |       expect(response.status).toBe(400);
         |                               ^
      84 |       expect(response.body.error).toContain('Platform is required');
      85 |     });
      86 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:83:31)

  ● New Integration Routes › POST /api/integrations/connect › should reject unsupported platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      91 |         .send({ platform: 'unsupported_platform' });
      92 |
    > 93 |       expect(response.status).toBe(400);
         |                               ^
      94 |       expect(response.body.error).toContain('Unsupported platform');
      95 |       expect(response.body.supportedPlatforms).toBeInstanceOf(Array);
      96 |     });

      at Object.toBe (tests/unit/routes/integrations-new.test.js:93:31)

  ● New Integration Routes › POST /api/integrations/connect › should successfully connect to Twitter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      102 |         .send({ platform: 'twitter' });
      103 |
    > 104 |       expect(response.status).toBe(200);
          |                               ^
      105 |       expect(response.body.success).toBe(true);
      106 |       expect(response.body.data.platform).toBe('twitter');
      107 |       expect(response.body.data.status).toBe('connected');

      at Object.toBe (tests/unit/routes/integrations-new.test.js:104:31)

  ● New Integration Routes › POST /api/integrations/connect › should successfully connect to multiple platforms

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      119 |           .send({ platform });
      120 |
    > 121 |         expect(response.status).toBe(200);
          |                                 ^
      122 |         expect(response.body.success).toBe(true);
      123 |         expect(response.body.data.platform).toBe(platform);
      124 |         expect(response.body.data.status).toBe('connected');

      at Object.toBe (tests/unit/routes/integrations-new.test.js:121:33)

  ● New Integration Routes › POST /api/integrations/import › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      141 |         .send({ platform: 'twitter' });
      142 |
    > 143 |       expect(response.status).toBe(401);
          |                               ^
      144 |     });
      145 |
      146 |     it('should require platform parameter', async () => {

      at Object.toBe (tests/unit/routes/integrations-new.test.js:143:31)

  ● New Integration Routes › POST /api/integrations/import › should require platform parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      150 |         .send({});
      151 |
    > 152 |       expect(response.status).toBe(400);
          |                               ^
      153 |       expect(response.body.error).toContain('Platform is required');
      154 |     });
      155 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:152:31)

  ● New Integration Routes › POST /api/integrations/import › should require platform to be connected first

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      160 |         .send({ platform: 'linkedin' });
      161 |
    > 162 |       expect(response.status).toBe(400);
          |                               ^
      163 |       expect(response.body.error).toContain('Please connect to linkedin first');
      164 |     });
      165 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:162:31)

  ● New Integration Routes › POST /api/integrations/import › should successfully start import from connected platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      170 |         .send({ platform: 'twitter', limit: 200 });
      171 |
    > 172 |       expect(response.status).toBe(200);
          |                               ^
      173 |       expect(response.body.success).toBe(true);
      174 |       expect(response.body.data.platform).toBe('twitter');
      175 |       expect(response.body.data.imported).toBe(200);

      at Object.toBe (tests/unit/routes/integrations-new.test.js:172:31)

  ● New Integration Routes › POST /api/integrations/import › should respect maximum import limit

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      185 |         .send({ platform: 'twitter', limit: 500 });
      186 |
    > 187 |       expect(response.status).toBe(200);
          |                               ^
      188 |       expect(response.body.data.imported).toBe(300); // Should be capped at 300
      189 |     });
      190 |   });

      at Object.toBe (tests/unit/routes/integrations-new.test.js:187:31)

  ● New Integration Routes › GET /api/integrations/import/status/:platform › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      195 |         .get('/api/integrations/import/status/twitter');
      196 |
    > 197 |       expect(response.status).toBe(401);
          |                               ^
      198 |     });
      199 |
      200 |     it('should reject unsupported platform', async () => {

      at Object.toBe (tests/unit/routes/integrations-new.test.js:197:31)

  ● New Integration Routes › GET /api/integrations/import/status/:platform › should reject unsupported platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      203 |         .set('Authorization', `Bearer ${authToken}`);
      204 |
    > 205 |       expect(response.status).toBe(400);
          |                               ^
      206 |       expect(response.body.error).toContain('Unsupported platform');
      207 |     });
      208 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:205:31)

  ● New Integration Routes › GET /api/integrations/import/status/:platform › should return import status for connected platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      212 |         .set('Authorization', `Bearer ${authToken}`);
      213 |
    > 214 |       expect(response.status).toBe(200);
          |                               ^
      215 |       expect(response.body.success).toBe(true);
      216 |       expect(response.body.data.platform).toBe('twitter');
      217 |       expect(response.body.data.status).toBe('connected');

      at Object.toBe (tests/unit/routes/integrations-new.test.js:214:31)

  ● New Integration Routes › POST /api/integrations/disconnect › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      235 |         .send({ platform: 'instagram' });
      236 |
    > 237 |       expect(response.status).toBe(401);
          |                               ^
      238 |     });
      239 |
      240 |     it('should require platform parameter', async () => {

      at Object.toBe (tests/unit/routes/integrations-new.test.js:237:31)

  ● New Integration Routes › POST /api/integrations/disconnect › should require platform parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      244 |         .send({});
      245 |
    > 246 |       expect(response.status).toBe(400);
          |                               ^
      247 |       expect(response.body.error).toContain('Platform is required');
      248 |     });
      249 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:246:31)

  ● New Integration Routes › POST /api/integrations/disconnect › should fail for not connected platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      254 |         .send({ platform: 'linkedin' });
      255 |
    > 256 |       expect(response.status).toBe(400);
          |                               ^
      257 |       expect(response.body.error).toContain('Platform not connected');
      258 |     });
      259 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:256:31)

  ● New Integration Routes › POST /api/integrations/disconnect › should successfully disconnect from platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      264 |         .send({ platform: 'instagram' });
      265 |
    > 266 |       expect(response.status).toBe(200);
          |                               ^
      267 |       expect(response.body.success).toBe(true);
      268 |       expect(response.body.data.platform).toBe('instagram');
      269 |       expect(response.body.data.status).toBe('disconnected');

      at Object.toBe (tests/unit/routes/integrations-new.test.js:266:31)

  ● New Integration Routes › Integration flow testing › should handle complete connect-import-disconnect flow

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      281 |         .send({ platform });
      282 |
    > 283 |       expect(connectResponse.status).toBe(200);
          |                                      ^
      284 |       expect(connectResponse.body.data.status).toBe('connected');
      285 |
      286 |       // 2. Import

      at Object.toBe (tests/unit/routes/integrations-new.test.js:283:38)

FAIL node-tests tests/unit/routes/style-profile.test.js
  Style Profile Routes
    GET /api/style-profile/status
      ✕ should require authentication (3 ms)
      ✕ should return no access for free user (4 ms)
      ✕ should return access for Creator+ user (4 ms)
    GET /api/style-profile
      ✕ should require authentication (3 ms)
      ✕ should deny access to free users (5 ms)
      ✕ should return no profile for Creator+ user without generated profile (3 ms)
    POST /api/style-profile/generate
      ✕ should require authentication (4 ms)
      ✕ should deny access to free users (3 ms)
      ✕ should require platforms parameter (4 ms)
      ✕ should require valid platforms array (4 ms)
      ✕ should successfully generate style profile (3 ms)
      ✕ should generate multiple language profiles (11 ms)
    GET /api/style-profile (with generated profile)
      ✕ should return generated profile data (4 ms)
    GET /api/style-profile/preview/:lang
      ✕ should require authentication
      ✕ should deny access to free users
      ✕ should return 404 for non-existent profile
      ✕ should return language profile preview
    GET /api/style-profile/stats
      ✕ should require authentication (3 ms)
      ✕ should deny access to free users (4 ms)
      ✕ should return profile statistics (4 ms)
    DELETE /api/style-profile
      ✕ should require authentication (4 ms)
      ✕ should deny access to free users (4 ms)
      ✕ should successfully delete existing profile (4 ms)
      ✕ should return 404 when deleting non-existent profile (3 ms)
    Feature flag integration
      ✕ should respect ENABLE_STYLE_PROFILE flag when disabled (1 ms)
    Error handling and edge cases
      ✕ should handle insufficient content for generation (6 ms)
      ✕ should handle generation with minimal content (13 ms)

  ● Style Profile Routes › GET /api/style-profile/status › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      33 |         .get('/api/style-profile/status');
      34 |
    > 35 |       expect(response.status).toBe(401);
         |                               ^
      36 |     });
      37 |
      38 |     it('should return no access for free user', async () => {

      at Object.toBe (tests/unit/routes/style-profile.test.js:35:31)

  ● Style Profile Routes › GET /api/style-profile/status › should return no access for free user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      41 |         .set('Authorization', `Bearer ${authToken}`);
      42 |
    > 43 |       expect(response.status).toBe(200);
         |                               ^
      44 |       expect(response.body.success).toBe(true);
      45 |       expect(response.body.data.hasAccess).toBe(false);
      46 |       expect(response.body.data.available).toBe(false);

      at Object.toBe (tests/unit/routes/style-profile.test.js:43:31)

  ● Style Profile Routes › GET /api/style-profile/status › should return access for Creator+ user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      52 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      53 |
    > 54 |       expect(response.status).toBe(200);
         |                               ^
      55 |       expect(response.body.success).toBe(true);
      56 |       expect(response.body.data.hasAccess).toBe(true);
      57 |       expect(response.body.data.available).toBe(true);

      at Object.toBe (tests/unit/routes/style-profile.test.js:54:31)

  ● Style Profile Routes › GET /api/style-profile › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      65 |         .get('/api/style-profile');
      66 |
    > 67 |       expect(response.status).toBe(401);
         |                               ^
      68 |     });
      69 |
      70 |     it('should deny access to free users', async () => {

      at Object.toBe (tests/unit/routes/style-profile.test.js:67:31)

  ● Style Profile Routes › GET /api/style-profile › should deny access to free users

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      73 |         .set('Authorization', `Bearer ${authToken}`);
      74 |
    > 75 |       expect(response.status).toBe(403);
         |                               ^
      76 |       expect(response.body.error).toContain('Creator+ plan');
      77 |       expect(response.body.upgrade).toBe(true);
      78 |     });

      at Object.toBe (tests/unit/routes/style-profile.test.js:75:31)

  ● Style Profile Routes › GET /api/style-profile › should return no profile for Creator+ user without generated profile

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      83 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      84 |
    > 85 |       expect(response.status).toBe(200);
         |                               ^
      86 |       expect(response.body.success).toBe(true);
      87 |       expect(response.body.data.available).toBe(false);
      88 |       expect(response.body.data.message).toContain('No style profile generated yet');

      at Object.toBe (tests/unit/routes/style-profile.test.js:85:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

       96 |         .send({ platforms: ['twitter'] });
       97 |
    >  98 |       expect(response.status).toBe(401);
          |                               ^
       99 |     });
      100 |
      101 |     it('should deny access to free users', async () => {

      at Object.toBe (tests/unit/routes/style-profile.test.js:98:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should deny access to free users

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      105 |         .send({ platforms: ['twitter'] });
      106 |
    > 107 |       expect(response.status).toBe(403);
          |                               ^
      108 |       expect(response.body.error).toContain('Creator+ plan');
      109 |       expect(response.body.upgrade).toBe(true);
      110 |     });

      at Object.toBe (tests/unit/routes/style-profile.test.js:107:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should require platforms parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      116 |         .send({});
      117 |
    > 118 |       expect(response.status).toBe(400);
          |                               ^
      119 |       expect(response.body.error).toContain('At least one platform is required');
      120 |       expect(response.body.example).toHaveProperty('platforms');
      121 |     });

      at Object.toBe (tests/unit/routes/style-profile.test.js:118:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should require valid platforms array

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      127 |         .send({ platforms: 'twitter' });
      128 |
    > 129 |       expect(response.status).toBe(400);
          |                               ^
      130 |       expect(response.body.error).toContain('At least one platform is required');
      131 |     });
      132 |

      at Object.toBe (tests/unit/routes/style-profile.test.js:129:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should successfully generate style profile

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      137 |         .send({ platforms: ['twitter'], maxItemsPerPlatform: 300 });
      138 |
    > 139 |       expect(response.status).toBe(200);
          |                               ^
      140 |       expect(response.body.success).toBe(true);
      141 |       expect(response.body.data.message).toContain('successfully');
      142 |       expect(response.body.data.profiles).toBeInstanceOf(Array);

      at Object.toBe (tests/unit/routes/style-profile.test.js:139:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should generate multiple language profiles

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      177 |         .send({ platforms: ['twitter', 'instagram'] });
      178 |
    > 179 |       expect(response.status).toBe(200);
          |                               ^
      180 |       expect(response.body.data.profiles.length).toBeGreaterThanOrEqual(1);
      181 |       expect(response.body.data.sources).toHaveProperty('twitter');
      182 |       expect(response.body.data.sources).toHaveProperty('instagram');

      at Object.toBe (tests/unit/routes/style-profile.test.js:179:31)

  ● Style Profile Routes › GET /api/style-profile (with generated profile) › should return generated profile data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      190 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      191 |
    > 192 |       expect(response.status).toBe(200);
          |                               ^
      193 |       expect(response.body.success).toBe(true);
      194 |       expect(response.body.data.available).toBe(true);
      195 |       expect(response.body.data.profiles).toBeInstanceOf(Array);

      at Object.toBe (tests/unit/routes/style-profile.test.js:192:31)

  ● Style Profile Routes › GET /api/style-profile/preview/:lang › should require authentication

    TypeError: Cannot read properties of undefined (reading 'profiles')

      210 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      211 |       
    > 212 |       availableLanguage = profileResponse.body.data.profiles[0].lang;
          |                                                     ^
      213 |     });
      214 |
      215 |     it('should require authentication', async () => {

      at Object.profiles (tests/unit/routes/style-profile.test.js:212:53)

  ● Style Profile Routes › GET /api/style-profile/preview/:lang › should deny access to free users

    TypeError: Cannot read properties of undefined (reading 'profiles')

      210 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      211 |       
    > 212 |       availableLanguage = profileResponse.body.data.profiles[0].lang;
          |                                                     ^
      213 |     });
      214 |
      215 |     it('should require authentication', async () => {

      at Object.profiles (tests/unit/routes/style-profile.test.js:212:53)

  ● Style Profile Routes › GET /api/style-profile/preview/:lang › should return 404 for non-existent profile

    TypeError: Cannot read properties of undefined (reading 'profiles')

      210 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      211 |       
    > 212 |       availableLanguage = profileResponse.body.data.profiles[0].lang;
          |                                                     ^
      213 |     });
      214 |
      215 |     it('should require authentication', async () => {

      at Object.profiles (tests/unit/routes/style-profile.test.js:212:53)

  ● Style Profile Routes › GET /api/style-profile/preview/:lang › should return language profile preview

    TypeError: Cannot read properties of undefined (reading 'profiles')

      210 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      211 |       
    > 212 |       availableLanguage = profileResponse.body.data.profiles[0].lang;
          |                                                     ^
      213 |     });
      214 |
      215 |     it('should require authentication', async () => {

      at Object.profiles (tests/unit/routes/style-profile.test.js:212:53)

  ● Style Profile Routes › GET /api/style-profile/stats › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      261 |         .get('/api/style-profile/stats');
      262 |
    > 263 |       expect(response.status).toBe(401);
          |                               ^
      264 |     });
      265 |
      266 |     it('should deny access to free users', async () => {

      at Object.toBe (tests/unit/routes/style-profile.test.js:263:31)

  ● Style Profile Routes › GET /api/style-profile/stats › should deny access to free users

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      269 |         .set('Authorization', `Bearer ${authToken}`);
      270 |
    > 271 |       expect(response.status).toBe(403);
          |                               ^
      272 |       expect(response.body.error).toContain('Creator+ plan');
      273 |     });
      274 |

      at Object.toBe (tests/unit/routes/style-profile.test.js:271:31)

  ● Style Profile Routes › GET /api/style-profile/stats › should return profile statistics

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      278 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      279 |
    > 280 |       expect(response.status).toBe(200);
          |                               ^
      281 |       expect(response.body.success).toBe(true);
      282 |       expect(response.body.data.hasProfile).toBe(true);
      283 |       expect(response.body.data.languageCount).toBeGreaterThan(0);

      at Object.toBe (tests/unit/routes/style-profile.test.js:280:31)

  ● Style Profile Routes › DELETE /api/style-profile › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      294 |         .delete('/api/style-profile');
      295 |
    > 296 |       expect(response.status).toBe(401);
          |                               ^
      297 |     });
      298 |
      299 |     it('should deny access to free users', async () => {

      at Object.toBe (tests/unit/routes/style-profile.test.js:296:31)

  ● Style Profile Routes › DELETE /api/style-profile › should deny access to free users

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      302 |         .set('Authorization', `Bearer ${authToken}`);
      303 |
    > 304 |       expect(response.status).toBe(403);
          |                               ^
      305 |       expect(response.body.error).toContain('Creator+ plan');
      306 |     });
      307 |

      at Object.toBe (tests/unit/routes/style-profile.test.js:304:31)

  ● Style Profile Routes › DELETE /api/style-profile › should successfully delete existing profile

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      311 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      312 |
    > 313 |       expect(response.status).toBe(200);
          |                               ^
      314 |       expect(response.body.success).toBe(true);
      315 |       expect(response.body.data.message).toContain('deleted successfully');
      316 |

      at Object.toBe (tests/unit/routes/style-profile.test.js:313:31)

  ● Style Profile Routes › DELETE /api/style-profile › should return 404 when deleting non-existent profile

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      328 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      329 |
    > 330 |       expect(response.status).toBe(404);
          |                               ^
      331 |       expect(response.body.error).toContain('No style profile found to delete');
      332 |     });
      333 |   });

      at Object.toBe (tests/unit/routes/style-profile.test.js:330:31)

  ● Style Profile Routes › Feature flag integration › should respect ENABLE_STYLE_PROFILE flag when disabled

    TypeError: flags.reload is not a function

      341 |       // Reload flags
      342 |       const { flags } = require('../../../src/config/flags');
    > 343 |       flags.reload();
          |             ^
      344 |
      345 |       const response = await request(app)
      346 |         .post('/api/style-profile/generate')

      at Object.reload (tests/unit/routes/style-profile.test.js:343:13)

  ● Style Profile Routes › Error handling and edge cases › should handle insufficient content for generation

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      380 |         .send({ platforms: ['twitter'] });
      381 |
    > 382 |       expect(response.status).toBe(400);
          |                               ^
      383 |       expect(response.body.error).toContain('No imported content found');
      384 |     });
      385 |

      at Object.toBe (tests/unit/routes/style-profile.test.js:382:31)

  ● Style Profile Routes › Error handling and edge cases › should handle generation with minimal content

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      408 |         .send({ platforms: ['twitter'] });
      409 |
    > 410 |       expect(response.status).toBe(400);
          |                               ^
      411 |       expect(response.body.error).toContain('Insufficient content');
      412 |       expect(response.body.details).toContain('50+ imported items');
      413 |     });

      at Object.toBe (tests/unit/routes/style-profile.test.js:410:31)

  console.warn
    Cannot redefine window.location in JSDOM setup

      67 |     } catch (e) {
      68 |         // Location cannot be redefined in newer JSDOM, skip
    > 69 |         console.warn('Cannot redefine window.location in JSDOM setup');
         |                 ^
      70 |     }
      71 | }
      72 |

      at Object.warn (tests/setup.js:69:17)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

  console.warn
    A function to advance timers was called but the timers APIs are not replaced with fake timers. Call `jest.useFakeTimers()` in this test file or enable fake timers for all tests by setting 'fakeTimers': {'enableGlobally': true} in Jest configuration file.
    Stack Trace:
    
          18 |
          19 |     afterEach(() => {
        > 20 |         jest.runOnlyPendingTimers();
             |              ^
          21 |         jest.useRealTimers();
          22 |     });
          23 |
    
          Error: 
          at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:641:7)
          at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
          at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

      18 |
      19 |     afterEach(() => {
    > 20 |         jest.runOnlyPendingTimers();
         |              ^
      21 |         jest.useRealTimers();
      22 |     });
      23 |

      at FakeTimers._checkFakeTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:639:28)
      at FakeTimers.runOnlyPendingTimers (node_modules/@jest/environment-jsdom-abstract/node_modules/@jest/fake-timers/build/index.js:541:14)
      at Object.runOnlyPendingTimers (tests/unit/auth/flows.test.js:20:14)

FAIL dom-tests tests/unit/auth/flows.test.js
  Auth Flows
    Login Flow
      ✕ should handle successful login (12 ms)
      ✕ should handle login failure (2 ms)
      ✕ should handle network error during login (2 ms)
    Registration Flow
      ✕ should handle successful registration (2 ms)
      ✕ should handle registration failure - duplicate email (1 ms)
    Password Recovery Flow
      ✕ should handle password recovery request (1 ms)
      ✕ should handle password recovery with generic message for security (1 ms)
    Magic Link Flow
      ✕ should handle magic link request (2 ms)
    User Redirection Logic
      ✕ should redirect admin users to admin panel (1 ms)
      ✕ should redirect regular users to dashboard (1 ms)
      ✕ should not redirect if user is not authenticated (3 ms)
      ✕ should handle missing user data gracefully (1 ms)
    OAuth Callback Flow
      ✕ should process OAuth callback successfully (2 ms)
      ✕ should handle malformed OAuth data (1 ms)
      ✕ should reject invalid OAuth callback type (1 ms)
    Session Management
      ✕ should clear all session data on logout (1 ms)
      ✕ should validate active session (1 ms)
      ✕ should invalidate expired session (2 ms)
      ✕ should validate session without expiration time (1 ms)

  ● Auth Flows › Login Flow › should handle successful login

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Login Flow › should handle login failure

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Login Flow › should handle network error during login

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Registration Flow › should handle successful registration

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Registration Flow › should handle registration failure - duplicate email

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Password Recovery Flow › should handle password recovery request

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Password Recovery Flow › should handle password recovery with generic message for security

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Magic Link Flow › should handle magic link request

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › User Redirection Logic › should redirect admin users to admin panel

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › User Redirection Logic › should redirect regular users to dashboard

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › User Redirection Logic › should not redirect if user is not authenticated

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › User Redirection Logic › should handle missing user data gracefully

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › OAuth Callback Flow › should process OAuth callback successfully

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › OAuth Callback Flow › should handle malformed OAuth data

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › OAuth Callback Flow › should reject invalid OAuth callback type

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Session Management › should clear all session data on logout

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Session Management › should validate active session

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Session Management › should invalidate expired session

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Session Management › should validate session without expiration time

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

FAIL node-tests tests/unit/workers/FetchCommentsWorker.test.js
  FetchCommentsWorker
    constructor
      ✕ should initialize worker with correct type (1 ms)
    processJob
      ✕ should process Twitter comment fetching job (1 ms)
      ✕ should process YouTube comment fetching job (1 ms)
      ✕ should handle duplicate comments
      ✕ should handle platform errors gracefully (3 ms)
      ✕ should handle unsupported platform
    storeComment
      ✕ should store new comment successfully (1 ms)
      ✕ should detect duplicate comment
      ✕ should handle database errors (1 ms)
    queueForAnalysis
      ✕ should queue comment for toxicity analysis
      ✕ should handle queue errors (1 ms)
    initializePlatformServices
      ✕ should initialize all platform services (1 ms)
      ✕ should handle initialization errors
    normalizeCommentData
      ✕ should normalize Twitter comment data (1 ms)
      ✕ should normalize YouTube comment data
    error handling
      ✕ should handle malformed job data (1 ms)
      ✕ should handle empty comment responses (1 ms)

  ● FetchCommentsWorker › constructor › should initialize worker with correct type

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › processJob › should process Twitter comment fetching job

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › processJob › should process YouTube comment fetching job

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › processJob › should handle duplicate comments

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › processJob › should handle platform errors gracefully

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › processJob › should handle unsupported platform

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › storeComment › should store new comment successfully

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › storeComment › should detect duplicate comment

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › storeComment › should handle database errors

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › queueForAnalysis › should queue comment for toxicity analysis

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › queueForAnalysis › should handle queue errors

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › initializePlatformServices › should initialize all platform services

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › initializePlatformServices › should handle initialization errors

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › normalizeCommentData › should normalize Twitter comment data

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › normalizeCommentData › should normalize YouTube comment data

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › error handling › should handle malformed job data

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › error handling › should handle empty comment responses

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

FAIL node-tests tests/unit/routes/plan.test.js
  Plan Routes
    GET /api/plan/available
      ✕ should return all available plans (5 ms)
    GET /api/plan/current
      ✕ should require authentication (8 ms)
      ✕ should return free plan for new user (4 ms)
    POST /api/plan/select
      ✕ should require authentication (4 ms)
      ✕ should require valid plan (5 ms)
      ✕ should successfully select Creator+ plan (3 ms)
      ✕ should successfully select Pro plan (4 ms)
    GET /api/plan/features
      ✕ should return feature comparison (5 ms)

  ● Plan Routes › GET /api/plan/available › should return all available plans

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      15 |         .get('/api/plan/available');
      16 |
    > 17 |       expect(response.status).toBe(200);
         |                               ^
      18 |       expect(response.body.success).toBe(true);
      19 |       expect(response.body.data.plans).toBeInstanceOf(Array);
      20 |       expect(response.body.data.plans.length).toBe(3);

      at Object.toBe (tests/unit/routes/plan.test.js:17:31)

  ● Plan Routes › GET /api/plan/current › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      41 |         .get('/api/plan/current');
      42 |
    > 43 |       expect(response.status).toBe(401);
         |                               ^
      44 |     });
      45 |
      46 |     it('should return free plan for new user', async () => {

      at Object.toBe (tests/unit/routes/plan.test.js:43:31)

  ● Plan Routes › GET /api/plan/current › should return free plan for new user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      49 |         .set('Authorization', `Bearer ${authToken}`);
      50 |
    > 51 |       expect(response.status).toBe(200);
         |                               ^
      52 |       expect(response.body.success).toBe(true);
      53 |       expect(response.body.data.plan).toBe('free');
      54 |       expect(response.body.data.canAccessStyleProfile).toBe(false);

      at Object.toBe (tests/unit/routes/plan.test.js:51:31)

  ● Plan Routes › POST /api/plan/select › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      62 |         .send({ plan: 'creator_plus' });
      63 |
    > 64 |       expect(response.status).toBe(401);
         |                               ^
      65 |     });
      66 |
      67 |     it('should require valid plan', async () => {

      at Object.toBe (tests/unit/routes/plan.test.js:64:31)

  ● Plan Routes › POST /api/plan/select › should require valid plan

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      71 |         .send({ plan: 'invalid_plan' });
      72 |
    > 73 |       expect(response.status).toBe(400);
         |                               ^
      74 |       expect(response.body.error).toContain('Invalid plan selected');
      75 |     });
      76 |

      at Object.toBe (tests/unit/routes/plan.test.js:73:31)

  ● Plan Routes › POST /api/plan/select › should successfully select Creator+ plan

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      81 |         .send({ plan: 'creator_plus' });
      82 |
    > 83 |       expect(response.status).toBe(200);
         |                               ^
      84 |       expect(response.body.success).toBe(true);
      85 |       expect(response.body.data.plan).toBe('creator_plus');
      86 |       expect(response.body.data.details.features.styleProfile).toBe(true);

      at Object.toBe (tests/unit/routes/plan.test.js:83:31)

  ● Plan Routes › POST /api/plan/select › should successfully select Pro plan

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      93 |         .send({ plan: 'pro' });
      94 |
    > 95 |       expect(response.status).toBe(200);
         |                               ^
      96 |       expect(response.body.success).toBe(true);
      97 |       expect(response.body.data.plan).toBe('pro');
      98 |       expect(response.body.data.details.features.styleProfile).toBe(false);

      at Object.toBe (tests/unit/routes/plan.test.js:95:31)

  ● Plan Routes › GET /api/plan/features › should return feature comparison

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      105 |         .get('/api/plan/features');
      106 |
    > 107 |       expect(response.status).toBe(200);
          |                               ^
      108 |       expect(response.body.success).toBe(true);
      109 |       expect(response.body.data.comparison).toBeInstanceOf(Array);
      110 |       expect(response.body.data.comparison.length).toBe(3);

      at Object.toBe (tests/unit/routes/plan.test.js:107:31)

FAIL node-tests tests/unit/routes/billing.test.js
  Billing Routes Tests
    GET /api/billing/plans
      ✓ should return available subscription plans (11 ms)
    POST /api/billing/create-checkout-session
      ✕ should create checkout session successfully for Pro plan (7 ms)
      ✕ should return error for missing lookupKey (3 ms)
      ✕ should return error for invalid lookupKey (5 ms)
      ✕ should use existing customer if available (4 ms)
    POST /api/billing/create-portal-session
      ✕ should create portal session successfully (3 ms)
      ✕ should return error when no subscription found (5 ms)
    GET /api/billing/subscription
      ✕ should return user subscription details (5 ms)
      ✕ should return error when database fails (3 ms)
    POST /webhooks/stripe
      ✕ should handle checkout.session.completed event (5 ms)
      ✕ should return error for invalid webhook signature (4 ms)
      ✕ should handle unrecognized webhook events (4 ms)
      ○ skipped should handle customer.subscription.updated event
      ○ skipped should handle customer.subscription.deleted event
    Error Handling
      ✕ should handle Stripe API errors gracefully (4 ms)
      ✕ should handle database errors (3 ms)
    Authentication
      ✓ should require authentication for protected routes (4 ms)

  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should create checkout session successfully for Pro plan

    expected 200 "OK", got 503 "Service Unavailable"

      163 |                 .post('/api/billing/create-checkout-session')
      164 |                 .send({ lookupKey: 'plan_pro' })
    > 165 |                 .expect(200);
          |                  ^
      166 |
      167 |             expect(response.body.success).toBe(true);
      168 |             expect(response.body.data.url).toBe('https://checkout.stripe.com/pay/cs_test123');

      at Object.expect (tests/unit/routes/billing.test.js:165:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should return error for missing lookupKey

    expected 400 "Bad Request", got 503 "Service Unavailable"

      180 |                 .post('/api/billing/create-checkout-session')
      181 |                 .send({})
    > 182 |                 .expect(400);
          |                  ^
      183 |
      184 |             expect(response.body.success).toBe(false);
      185 |             expect(response.body.error).toBe('plan is required (free|pro|creator_plus)');

      at Object.expect (tests/unit/routes/billing.test.js:182:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should return error for invalid lookupKey

    expected 400 "Bad Request", got 503 "Service Unavailable"

      190 |                 .post('/api/billing/create-checkout-session')
      191 |                 .send({ lookupKey: 'invalid_key' })
    > 192 |                 .expect(400);
          |                  ^
      193 |
      194 |             expect(response.body.success).toBe(false);
      195 |             expect(response.body.error).toBe('Invalid plan specified');

      at Object.expect (tests/unit/routes/billing.test.js:192:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should use existing customer if available

    expected 200 "OK", got 503 "Service Unavailable"

      227 |                 .post('/api/billing/create-checkout-session')
      228 |                 .send({ lookupKey: 'plan_pro' })
    > 229 |                 .expect(200);
          |                  ^
      230 |
      231 |             expect(response.body.success).toBe(true);
      232 |             expect(mockStripe.customers.create).not.toHaveBeenCalled();

      at Object.expect (tests/unit/routes/billing.test.js:229:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /api/billing/create-portal-session › should create portal session successfully

    expected 200 "OK", got 503 "Service Unavailable"

      251 |             const response = await request(app)
      252 |                 .post('/api/billing/create-portal-session')
    > 253 |                 .expect(200);
          |                  ^
      254 |
      255 |             expect(response.body.success).toBe(true);
      256 |             expect(response.body.data.url).toBe('https://billing.stripe.com/portal/bps_test123');

      at Object.expect (tests/unit/routes/billing.test.js:253:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /api/billing/create-portal-session › should return error when no subscription found

    expected 400 "Bad Request", got 503 "Service Unavailable"

      269 |             const response = await request(app)
      270 |                 .post('/api/billing/create-portal-session')
    > 271 |                 .expect(400);
          |                  ^
      272 |
      273 |             expect(response.body.success).toBe(false);
      274 |             expect(response.body.error).toBe('No active subscription found');

      at Object.expect (tests/unit/routes/billing.test.js:271:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › GET /api/billing/subscription › should return user subscription details

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "plan": "pro",
    +   "plan": "free",
        "status": "active",
    -   "stripe_customer_id": "cus_test123",
    -   "stripe_subscription_id": "sub_test123",
    +   "stripe_customer_id": null,
    +   "stripe_subscription_id": null,
        "user_id": "test-user-id",
      }

      296 |
      297 |             expect(response.body.success).toBe(true);
    > 298 |             expect(response.body.data.subscription).toEqual(mockSubscription);
          |                                                     ^
      299 |             expect(response.body.data.planConfig).toBeDefined();
      300 |             expect(response.body.data.planConfig.name).toBe('Pro');
      301 |         });

      at Object.toEqual (tests/unit/routes/billing.test.js:298:53)

  ● Billing Routes Tests › GET /api/billing/subscription › should return error when database fails

    expected 500 "Internal Server Error", got 200 "OK"

      309 |             const response = await request(app)
      310 |                 .get('/api/billing/subscription')
    > 311 |                 .expect(500);
          |                  ^
      312 |
      313 |             expect(response.body.success).toBe(false);
      314 |             expect(response.body.error).toBe('Failed to fetch subscription');

      at Object.expect (tests/unit/routes/billing.test.js:311:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /webhooks/stripe › should handle checkout.session.completed event

    expected 200 "OK", got 503 "Service Unavailable"

      363 |                 .set('stripe-signature', mockSignature)
      364 |                 .send(Buffer.from(JSON.stringify(mockEvent)))
    > 365 |                 .expect(200);
          |                  ^
      366 |
      367 |             expect(response.body.received).toBe(true);
      368 |             expect(mockSupabaseServiceClient.upsert).toHaveBeenCalledWith({

      at Object.expect (tests/unit/routes/billing.test.js:365:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /webhooks/stripe › should return error for invalid webhook signature

    expected 400 "Bad Request", got 503 "Service Unavailable"

      399 |                 .set('stripe-signature', 'invalid-signature')
      400 |                 .send(Buffer.from('{}'))
    > 401 |                 .expect(400);
          |                  ^
      402 |
      403 |             expect(response.text).toContain('Webhook Error: Invalid signature');
      404 |         });

      at Object.expect (tests/unit/routes/billing.test.js:401:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /webhooks/stripe › should handle unrecognized webhook events

    expected 200 "OK", got 503 "Service Unavailable"

      418 |                 .set('stripe-signature', mockSignature)
      419 |                 .send(Buffer.from(JSON.stringify(mockEvent)))
    > 420 |                 .expect(200);
          |                  ^
      421 |
      422 |             expect(response.body.received).toBe(true);
      423 |         });

      at Object.expect (tests/unit/routes/billing.test.js:420:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › Error Handling › should handle Stripe API errors gracefully

    expected 500 "Internal Server Error", got 503 "Service Unavailable"

      440 |                 .post('/api/billing/create-checkout-session')
      441 |                 .send({ lookupKey: 'plan_pro' })
    > 442 |                 .expect(500);
          |                  ^
      443 |
      444 |             expect(response.body.success).toBe(false);
      445 |             expect(response.body.error).toBe('Failed to create checkout session');

      at Object.expect (tests/unit/routes/billing.test.js:442:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › Error Handling › should handle database errors

    expected 500 "Internal Server Error", got 200 "OK"

      454 |             const response = await request(app)
      455 |                 .get('/api/billing/subscription')
    > 456 |                 .expect(500);
          |                  ^
      457 |
      458 |             expect(response.body.success).toBe(false);
      459 |             expect(response.body.error).toBe('Failed to fetch subscription details');

      at Object.expect (tests/unit/routes/billing.test.js:456:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

FAIL node-tests tests/integration/adminEndpoints.test.js
  Admin Endpoints Integration Tests
    GET /api/auth/admin/users
      ✕ should return users list for admin (8 ms)
      ✕ should deny access to regular users (3 ms)
      ✕ should require authentication (4 ms)
    POST /api/auth/admin/users/update-plan
      ✕ should update user plan for admin (3 ms)
      ✕ should validate plan value (3 ms)
      ✕ should require both userId and newPlan (4 ms)
      ✕ should deny access to regular users (3 ms)
    POST /api/auth/admin/users/reset-password
      ✕ should send password reset email for admin (3 ms)
      ✕ should require userId (3 ms)
      ✕ should deny access to regular users (4 ms)

  ● Admin Endpoints Integration Tests › GET /api/auth/admin/users › should return users list for admin

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › GET /api/auth/admin/users › should deny access to regular users

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › GET /api/auth/admin/users › should require authentication

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/update-plan › should update user plan for admin

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/update-plan › should validate plan value

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/update-plan › should require both userId and newPlan

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/update-plan › should deny access to regular users

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/reset-password › should send password reset email for admin

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/reset-password › should require userId

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/reset-password › should deny access to regular users

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

FAIL node-tests tests/unit/services/queueService.test.js
  QueueService
    initialization
      ✕ should initialize with Redis available (1 ms)
      ✕ should fallback to database only when Redis unavailable (1 ms)
    addJob
      ✕ should add job to Redis queue with correct priority (2 ms)
      ✕ should fallback to database when Redis fails (1 ms)
      ✕ should add Shield job with high priority (1 ms)
    getNextJob
      ✕ should get job from Redis queue by priority (1 ms)
      ✕ should get job from database when Redis returns null (1 ms)
      ✕ should return null when no jobs available
    completeJob
      ✕ should mark job as completed in database (1 ms)
    failJob
      ✕ should handle job failure with retry logic
      ✕ should move job to DLQ after max attempts (1 ms)
    getQueueStats
      ✕ should return comprehensive queue statistics
      ✕ should handle database-only statistics (1 ms)
    error handling
      ✕ should handle Redis connection errors gracefully
      ✓ should handle malformed job data (1 ms)
    queue key generation
      ✕ should generate correct queue keys for different priorities (1 ms)
      ✕ should handle default priority (1 ms)
    shutdown
      ✓ should close all connections gracefully

  ● QueueService › initialization › should initialize with Redis available

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      93 |       await queueService.initialize();
      94 |
    > 95 |       expect(queueService.isRedisAvailable).toBe(true);
         |                                             ^
      96 |       expect(queueService.isDatabaseAvailable).toBe(true);
      97 |     });
      98 |

      at Object.toBe (tests/unit/services/queueService.test.js:95:45)

  ● QueueService › initialization › should fallback to database only when Redis unavailable

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      103 |
      104 |       expect(queueService.isRedisAvailable).toBe(false);
    > 105 |       expect(queueService.isDatabaseAvailable).toBe(true);
          |                                                ^
      106 |     });
      107 |   });
      108 |

      at Object.toBe (tests/unit/services/queueService.test.js:105:48)

  ● QueueService › addJob › should add job to Redis queue with correct priority

    TypeError: Cannot read properties of null (reading 'success')

      125 |       const result = await queueService.addJob('fetch_comments', jobData, 2);
      126 |
    > 127 |       expect(result.success).toBe(true);
          |                     ^
      128 |       expect(result.jobId).toBeDefined();
      129 |       expect(result.queuedTo).toBe('redis');
      130 |       expect(mockRedis.lpush).toHaveBeenCalledWith(

      at Object.success (tests/unit/services/queueService.test.js:127:21)

  ● QueueService › addJob › should fallback to database when Redis fails

    TypeError: Cannot read properties of null (reading 'from')

      142 |
      143 |       mockRedis.lpush.mockRejectedValue(new Error('Redis error'));
    > 144 |       mockSupabase.from.mockReturnValue({
          |                    ^
      145 |         insert: jest.fn().mockReturnValue({
      146 |           select: jest.fn().mockReturnValue({
      147 |             single: jest.fn().mockResolvedValue({

      at Object.from (tests/unit/services/queueService.test.js:144:20)

  ● QueueService › addJob › should add Shield job with high priority

    TypeError: Cannot read properties of null (reading 'success')

      172 |       const result = await queueService.addJob('shield_action', jobData, 1);
      173 |
    > 174 |       expect(result.success).toBe(true);
          |                     ^
      175 |       expect(mockRedis.lpush).toHaveBeenCalledWith(
      176 |         'roastr:queue:shield_action:priority:1',
      177 |         expect.any(String)

      at Object.success (tests/unit/services/queueService.test.js:174:21)

  ● QueueService › getNextJob › should get job from Redis queue by priority

    TypeError: Cannot read properties of null (reading 'id')

      205 |
      206 |       expect(result).toBeDefined();
    > 207 |       expect(result.id).toBe('job-123');
          |                     ^
      208 |       expect(result.organization_id).toBe('org-123');
      209 |       expect(mockRedis.brpop).toHaveBeenCalledTimes(2);
      210 |     });

      at Object.id (tests/unit/services/queueService.test.js:207:21)

  ● QueueService › getNextJob › should get job from database when Redis returns null

    TypeError: Cannot read properties of null (reading 'from')

      222 |       };
      223 |
    > 224 |       mockSupabase.from.mockReturnValue({
          |                    ^
      225 |         select: jest.fn().mockReturnValue({
      226 |           eq: jest.fn().mockReturnValue({
      227 |             eq: jest.fn().mockReturnValue({

      at Object.from (tests/unit/services/queueService.test.js:224:20)

  ● QueueService › getNextJob › should return null when no jobs available

    TypeError: Cannot read properties of null (reading 'from')

      273 |       mockRedis.brpop.mockResolvedValue(null);
      274 |       
    > 275 |       mockSupabase.from.mockReturnValue({
          |                    ^
      276 |         select: jest.fn().mockReturnValue({
      277 |           eq: jest.fn().mockReturnValue({
      278 |             eq: jest.fn().mockReturnValue({

      at Object.from (tests/unit/services/queueService.test.js:275:20)

  ● QueueService › completeJob › should mark job as completed in database

    TypeError: Cannot read properties of null (reading 'from')

      304 |       const result = { processed: 5, errors: 0 };
      305 |
    > 306 |       mockSupabase.from.mockReturnValue({
          |                    ^
      307 |         update: jest.fn().mockReturnValue({
      308 |           eq: jest.fn().mockResolvedValue({
      309 |             error: null

      at Object.from (tests/unit/services/queueService.test.js:306:20)

  ● QueueService › failJob › should handle job failure with retry logic

    TypeError: Cannot read properties of null (reading 'from')

      329 |       const error = new Error('Processing failed');
      330 |
    > 331 |       mockSupabase.from.mockReturnValue({
          |                    ^
      332 |         update: jest.fn().mockReturnValue({
      333 |           eq: jest.fn().mockResolvedValue({
      334 |             error: null

      at Object.from (tests/unit/services/queueService.test.js:331:20)

  ● QueueService › failJob › should move job to DLQ after max attempts

    TypeError: Cannot read properties of null (reading 'from')

      356 |
      357 |       mockRedis.lpush.mockResolvedValue(1);
    > 358 |       mockSupabase.from.mockReturnValue({
          |                    ^
      359 |         update: jest.fn().mockReturnValue({
      360 |           eq: jest.fn().mockResolvedValue({
      361 |             error: null

      at Object.from (tests/unit/services/queueService.test.js:358:20)

  ● QueueService › getQueueStats › should return comprehensive queue statistics

    TypeError: Cannot read properties of null (reading 'from')

      388 |
      389 |       // Mock database stats
    > 390 |       mockSupabase.from.mockReturnValue({
          |                    ^
      391 |         select: jest.fn().mockResolvedValue({
      392 |           data: [
      393 |             { status: 'pending', job_type: 'fetch_comments', priority: 1, count: 5 },

      at Object.from (tests/unit/services/queueService.test.js:390:20)

  ● QueueService › getQueueStats › should handle database-only statistics

    TypeError: Cannot read properties of null (reading 'from')

      412 |       queueService.isRedisAvailable = false;
      413 |
    > 414 |       mockSupabase.from.mockReturnValue({
          |                    ^
      415 |         select: jest.fn().mockResolvedValue({
      416 |           data: [
      417 |             { status: 'pending', job_type: 'fetch_comments', priority: 2, count: 3 }

      at Object.from (tests/unit/services/queueService.test.js:414:20)

  ● QueueService › error handling › should handle Redis connection errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      437 |
      438 |       expect(queueService.isRedisAvailable).toBe(false);
    > 439 |       expect(queueService.isDatabaseAvailable).toBe(true);
          |                                                ^
      440 |     });
      441 |
      442 |     test('should handle malformed job data', async () => {

      at Object.toBe (tests/unit/services/queueService.test.js:439:48)

  ● QueueService › queue key generation › should generate correct queue keys for different priorities

    expect(received).toBe(expected) // Object.is equality

    Expected: "roastr:queue:fetch_comments:priority:1"
    Received: "roastr:jobs:fetch_comments:p1"

      457 |       const key2 = queueService.getQueueKey('shield_action', 5);
      458 |
    > 459 |       expect(key1).toBe('roastr:queue:fetch_comments:priority:1');
          |                    ^
      460 |       expect(key2).toBe('roastr:queue:shield_action:priority:5');
      461 |     });
      462 |

      at Object.toBe (tests/unit/services/queueService.test.js:459:20)

  ● QueueService › queue key generation › should handle default priority

    expect(received).toBe(expected) // Object.is equality

    Expected: "roastr:queue:analyze_toxicity:priority:3"
    Received: "roastr:jobs:analyze_toxicity:p5"

      464 |       const key = queueService.getQueueKey('analyze_toxicity');
      465 |
    > 466 |       expect(key).toBe('roastr:queue:analyze_toxicity:priority:3');
          |                   ^
      467 |     });
      468 |   });
      469 |

      at Object.toBe (tests/unit/services/queueService.test.js:466:19)

FAIL node-tests tests/unit/workers/AnalyzeToxicityWorker.test.js
  AnalyzeToxicityWorker
    constructor
      ✕ should initialize worker with correct type (2 ms)
    processJob
      ✕ should analyze toxicity using Perspective API (2 ms)
      ✕ should fallback to OpenAI when Perspective API fails (1 ms)
      ✕ should use pattern-based fallback when both APIs fail
      ✕ should handle non-toxic content (1 ms)
    analyzeWithPerspective
      ✕ should analyze text with Perspective API
      ✕ should handle Perspective API errors
    analyzeWithOpenAI
      ✕ should analyze text with OpenAI moderation (1 ms)
    analyzeWithPatterns
      ✕ should detect profanity patterns
      ✕ should detect threat patterns
      ✕ should detect hate speech patterns (1 ms)
      ✕ should handle clean content
      ✕ should be case insensitive (1 ms)
    updateCommentAnalysis
      ✕ should update comment with analysis results
      ✕ should handle database errors (1 ms)
    processWithShield
      ✕ should process content through Shield when enabled
      ✕ should skip Shield processing when disabled (1 ms)
    error handling
      ✕ should handle malformed job data
      ✕ should handle empty text content (3 ms)
      ✕ should handle Shield service errors gracefully

  ● AnalyzeToxicityWorker › constructor › should initialize worker with correct type

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processJob › should analyze toxicity using Perspective API

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processJob › should fallback to OpenAI when Perspective API fails

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processJob › should use pattern-based fallback when both APIs fail

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processJob › should handle non-toxic content

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPerspective › should analyze text with Perspective API

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPerspective › should handle Perspective API errors

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithOpenAI › should analyze text with OpenAI moderation

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPatterns › should detect profanity patterns

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPatterns › should detect threat patterns

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPatterns › should detect hate speech patterns

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPatterns › should handle clean content

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPatterns › should be case insensitive

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › updateCommentAnalysis › should update comment with analysis results

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › updateCommentAnalysis › should handle database errors

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processWithShield › should process content through Shield when enabled

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processWithShield › should skip Shield processing when disabled

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › error handling › should handle malformed job data

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › error handling › should handle empty text content

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › error handling › should handle Shield service errors gracefully

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

FAIL node-tests tests/integration/authMeEndpoint.test.js
  /api/auth/me Endpoint Integration Tests
    GET /api/auth/me
      ✕ should return user profile with valid token (6 ms)
      ✕ should return 401 without token (5 ms)
      ✕ should return 401 with invalid token (3 ms)
      ✕ should return 401 with malformed Authorization header (3 ms)
      ✕ should include all required user fields (4 ms)
      ✕ should include organization and integration data (3 ms)

  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should return user profile with valid token

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should return 401 without token

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should return 401 with invalid token

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should return 401 with malformed Authorization header

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should include all required user fields

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should include organization and integration data

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

FAIL node-tests tests/unit/workers/GenerateReplyWorker.test.js
  GenerateReplyWorker
    constructor
      ✕ should initialize worker with correct type
    processJob
      ✕ should generate roast reply for toxic comment
      ✕ should handle cost limit exceeded (2 ms)
      ✕ should handle low toxicity comments (1 ms)
      ✕ should handle auto-posting for eligible platforms
    generateRoast
      ✕ should generate roast with custom parameters (1 ms)
      ✕ should handle OpenAI generation errors
    storeRoast
      ✕ should store roast in database (1 ms)
      ✕ should handle database storage errors
    shouldGenerateRoast
      ✕ should allow roast for high toxicity
      ✕ should allow roast for medium toxicity with categories
      ✕ should reject roast for low toxicity
      ✕ should reject roast for medium toxicity without categories (1 ms)
    validateRoastLength
      ✕ should pass Twitter length validation
      ✕ should fail Twitter length validation for long text
      ✕ should pass YouTube length validation
      ✕ should fail YouTube length validation for very long text
    getOrganizationSettings
      ✕ should fetch organization roast settings (1 ms)
      ✕ should return default settings when organization not found
    error handling
      ✕ should handle malformed job data
      ✕ should handle comment not found
      ✕ should handle roast generation failures gracefully

  ● GenerateReplyWorker › constructor › should initialize worker with correct type

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › processJob › should generate roast reply for toxic comment

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › processJob › should handle cost limit exceeded

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › processJob › should handle low toxicity comments

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › processJob › should handle auto-posting for eligible platforms

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › generateRoast › should generate roast with custom parameters

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › generateRoast › should handle OpenAI generation errors

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › storeRoast › should store roast in database

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › storeRoast › should handle database storage errors

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › shouldGenerateRoast › should allow roast for high toxicity

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › shouldGenerateRoast › should allow roast for medium toxicity with categories

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › shouldGenerateRoast › should reject roast for low toxicity

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › shouldGenerateRoast › should reject roast for medium toxicity without categories

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › validateRoastLength › should pass Twitter length validation

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › validateRoastLength › should fail Twitter length validation for long text

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › validateRoastLength › should pass YouTube length validation

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › validateRoastLength › should fail YouTube length validation for very long text

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › getOrganizationSettings › should fetch organization roast settings

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › getOrganizationSettings › should return default settings when organization not found

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › error handling › should handle malformed job data

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › error handling › should handle comment not found

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › error handling › should handle roast generation failures gracefully

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

FAIL node-tests tests/unit/config/__tests__/flags.test.js
  Feature Flags Configuration
    Flag loading from environment variables
      ✕ loads ENABLE_RQC flag from environment (1 ms)
      ✓ ENABLE_RQC defaults to false when not set (1 ms)
      ✕ loads VERBOSE_LOGS flag from environment
      ✓ VERBOSE_LOGS defaults to false when not set
      ✕ loads MOCK_MODE flag from environment (1 ms)
    mock mode detection
      ✕ detects missing API keys for mock mode (2 ms)
      ✕ uses real mode when all critical API keys are present
      ✕ detects partial API keys and uses mock mode
      ✕ respects explicit MOCK_MODE=true
    API integrations detection
      ✓ detects OpenAI availability (1 ms)
      ✕ detects missing OpenAI key
      ✓ detects Supabase availability
      ✕ detects Twitter API keys
    Boolean parsing and flag methods
      ✕ parses "true" string as boolean true
      ✓ treats non-true strings as false
      ✓ treats undefined as false
      ✓ getAllFlags returns all flag status (1 ms)
    Flag object structure
      ✕ exports flags instance with expected methods (1 ms)
      ✓ isEnabled method works correctly
      ✕ basic flag functionality works
    Environment scenarios
      ✕ development environment enables debug logs (1 ms)
      ✓ production environment with minimal flags
      ✓ test environment behavior

  ● Feature Flags Configuration › Flag loading from environment variables › loads ENABLE_RQC flag from environment

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      21 |       const testFlags = new FeatureFlags();
      22 |       
    > 23 |       expect(testFlags.isEnabled('ENABLE_RQC')).toBe(true);
         |                                                 ^
      24 |       
      25 |       // Restore
      26 |       process.env = originalEnv;

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:23:49)

  ● Feature Flags Configuration › Flag loading from environment variables › loads VERBOSE_LOGS flag from environment

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      51 |       const testFlags = new FeatureFlags();
      52 |       
    > 53 |       expect(testFlags.isEnabled('VERBOSE_LOGS')).toBe(true);
         |                                                   ^
      54 |       
      55 |       process.env = originalEnv;
      56 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:53:51)

  ● Feature Flags Configuration › Flag loading from environment variables › loads MOCK_MODE flag from environment

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      80 |       const testFlags = new FeatureFlags();
      81 |       
    > 82 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);
         |                                                ^
      83 |       
      84 |       process.env = originalEnv;
      85 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:82:48)

  ● Feature Flags Configuration › mock mode detection › detects missing API keys for mock mode

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

       99 |       const testFlags = new FeatureFlags();
      100 |       
    > 101 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);
          |                                                ^
      102 |       
      103 |       process.env = originalEnv;
      104 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:101:48)

  ● Feature Flags Configuration › mock mode detection › uses real mode when all critical API keys are present

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      122 |       
      123 |       // In mock test environment, MOCK_MODE should be enabled
    > 124 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);
          |                                                ^
      125 |       
      126 |       process.env = originalEnv;
      127 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:124:48)

  ● Feature Flags Configuration › mock mode detection › detects partial API keys and uses mock mode

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      142 |       const testFlags = new FeatureFlags();
      143 |       
    > 144 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);
          |                                                ^
      145 |       
      146 |       process.env = originalEnv;
      147 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:144:48)

  ● Feature Flags Configuration › mock mode detection › respects explicit MOCK_MODE=true

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      162 |       const testFlags = new FeatureFlags();
      163 |       
    > 164 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);
          |                                                ^
      165 |       
      166 |       process.env = originalEnv;
      167 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:164:48)

  ● Feature Flags Configuration › API integrations detection › detects missing OpenAI key

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      193 |       const testFlags = new FeatureFlags();
      194 |       
    > 195 |       expect(testFlags.isEnabled('ENABLE_REAL_OPENAI')).toBe(false);
          |                                                         ^
      196 |       
      197 |       process.env = originalEnv;
      198 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:195:57)

  ● Feature Flags Configuration › API integrations detection › detects Twitter API keys

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      232 |       const testFlags = new FeatureFlags();
      233 |       
    > 234 |       expect(testFlags.isEnabled('ENABLE_REAL_TWITTER')).toBe(true);
          |                                                          ^
      235 |       
      236 |       process.env = originalEnv;
      237 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:234:58)

  ● Feature Flags Configuration › Boolean parsing and flag methods › parses "true" string as boolean true

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      248 |       const testFlags = new FeatureFlags();
      249 |       
    > 250 |       expect(testFlags.isEnabled('ENABLE_RQC')).toBe(true);
          |                                                 ^
      251 |       
      252 |       process.env = originalEnv;
      253 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:250:49)

  ● Feature Flags Configuration › Flag object structure › exports flags instance with expected methods

    expect(received).toBe(expected) // Object.is equality

    Expected: "function"
    Received: "undefined"

      305 |       expect(typeof testInstance.isEnabled).toBe('function');
      306 |       expect(typeof testInstance.getAllFlags).toBe('function');
    > 307 |       expect(typeof testInstance.getServiceStatus).toBe('function');
          |                                                    ^
      308 |     });
      309 |
      310 |     test('isEnabled method works correctly', () => {

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:307:52)

  ● Feature Flags Configuration › Flag object structure › basic flag functionality works

    TypeError: testFlags.getServiceStatus is not a function

      326 |       expect(typeof testFlags.isEnabled('ENABLE_RQC')).toBe('boolean');
      327 |       expect(typeof testFlags.getAllFlags()).toBe('object');
    > 328 |       expect(typeof testFlags.getServiceStatus()).toBe('object');
          |                               ^
      329 |     });
      330 |   });
      331 |

      at Object.getServiceStatus (tests/unit/config/__tests__/flags.test.js:328:31)

  ● Feature Flags Configuration › Environment scenarios › development environment enables debug logs

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      340 |       const testFlags = new FeatureFlags();
      341 |       
    > 342 |       expect(testFlags.isEnabled('ENABLE_DEBUG_LOGS')).toBe(true);
          |                                                        ^
      343 |       
      344 |       process.env = originalEnv;
      345 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:342:56)

FAIL node-tests tests/unit/middleware/rateLimiter.test.js
  Rate Limiter Middleware
    RateLimitStore
      getKey
        ✓ should generate consistent keys for same IP and email
        ✓ should generate different keys for different IPs
        ✓ should generate different keys for different emails
        ✓ should be case insensitive for emails (1 ms)
      isBlocked
        ✓ should return false for non-blocked key (2 ms)
        ✓ should return true for blocked key within time window (1 ms)
        ✓ should clean up expired blocks
      recordAttempt
        ✓ should record first attempt correctly (1 ms)
        ✓ should increment attempt count
        ✓ should block after 5 attempts (1 ms)
        ✓ should reset attempt window after 15 minutes
        ✓ should track recent blocks (1 ms)
        ✓ should limit recent blocks to 100 entries
      recordSuccess
        ✓ should clear attempts and blocks for successful login (1 ms)
      cleanup
        ✓ should remove old attempts
        ✓ should remove expired blocks (1 ms)
      getMetrics
        ✓ should return correct metrics
    getClientIP
      ✓ should extract IP from req.ip (1 ms)
      ✓ should fall back to connection.remoteAddress
      ✕ should fall back to socket.remoteAddress
      ✕ should fall back to connection.socket.remoteAddress
      ✕ should default to localhost when no IP found (2 ms)
    loginRateLimiter middleware
      ✓ should pass through when rate limiting is disabled (1 ms)
      ✓ should pass through for non-auth endpoints
      ✓ should pass through when no email provided
      ✓ should block requests when rate limit exceeded (1 ms)
      ✓ should intercept failed login responses
      ✓ should reset attempts on successful login (1 ms)
      ✓ should handle auth endpoint variations
      ✓ should detect POST requests with email in body (1 ms)
      ✓ should handle username field as email fallback
      ✓ should log debug information when enabled
    getRateLimitMetrics endpoint
      ✓ should return metrics in mock mode (1 ms)
      ✕ should deny access outside mock mode
      ✓ should work in test environment (1 ms)
    resetRateLimit endpoint
      ✓ should reset rate limit for specific IP/email
      ✓ should require IP and email parameters (1 ms)
      ✕ should deny access outside mock mode
      ✓ should work in test environment (1 ms)
    Error handling and edge cases
      ✕ should handle missing request body
      ✓ should handle malformed email addresses
      ✓ should handle response end interception errors (1 ms)
      ✓ should handle concurrent requests for same user (2 ms)
      ✕ should handle store cleanup during operation

  ● Rate Limiter Middleware › getClientIP › should fall back to socket.remoteAddress

    TypeError: Cannot read properties of undefined (reading 'remoteAddress')

      222 | function getClientIP(req) {
      223 |   return req.ip || 
    > 224 |          req.connection.remoteAddress ||
          |                         ^
      225 |          req.socket.remoteAddress ||
      226 |          (req.connection.socket ? req.connection.socket.remoteAddress : null) ||
      227 |          '127.0.0.1';

      at remoteAddress (src/middleware/rateLimiter.js:224:25)
      at Object.getClientIP (tests/unit/middleware/rateLimiter.test.js:297:14)

  ● Rate Limiter Middleware › getClientIP › should fall back to connection.socket.remoteAddress

    TypeError: Cannot read properties of undefined (reading 'remoteAddress')

      223 |   return req.ip || 
      224 |          req.connection.remoteAddress ||
    > 225 |          req.socket.remoteAddress ||
          |                     ^
      226 |          (req.connection.socket ? req.connection.socket.remoteAddress : null) ||
      227 |          '127.0.0.1';
      228 | }

      at remoteAddress (src/middleware/rateLimiter.js:225:21)
      at Object.getClientIP (tests/unit/middleware/rateLimiter.test.js:306:14)

  ● Rate Limiter Middleware › getClientIP › should default to localhost when no IP found

    TypeError: Cannot read properties of undefined (reading 'remoteAddress')

      222 | function getClientIP(req) {
      223 |   return req.ip || 
    > 224 |          req.connection.remoteAddress ||
          |                         ^
      225 |          req.socket.remoteAddress ||
      226 |          (req.connection.socket ? req.connection.socket.remoteAddress : null) ||
      227 |          '127.0.0.1';

      at remoteAddress (src/middleware/rateLimiter.js:224:25)
      at Object.getClientIP (tests/unit/middleware/rateLimiter.test.js:311:14)

  ● Rate Limiter Middleware › getRateLimitMetrics endpoint › should deny access outside mock mode

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 403

    Number of calls: 0

      514 |       await getRateLimitMetrics(mockReq, mockRes);
      515 |
    > 516 |       expect(mockRes.status).toHaveBeenCalledWith(403);
          |                              ^
      517 |       expect(mockRes.json).toHaveBeenCalledWith({
      518 |         success: false,
      519 |         error: 'Metrics only available in mock mode'

      at Object.toHaveBeenCalledWith (tests/unit/middleware/rateLimiter.test.js:516:30)

  ● Rate Limiter Middleware › resetRateLimit endpoint › should deny access outside mock mode

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 403

    Number of calls: 0

      592 |       await resetRateLimit(mockReq, mockRes);
      593 |
    > 594 |       expect(mockRes.status).toHaveBeenCalledWith(403);
          |                              ^
      595 |       expect(mockRes.json).toHaveBeenCalledWith({
      596 |         success: false,
      597 |         error: 'Rate limit reset only available in mock mode'

      at Object.toHaveBeenCalledWith (tests/unit/middleware/rateLimiter.test.js:594:30)

  ● Rate Limiter Middleware › Error handling and edge cases › should handle missing request body

    TypeError: Cannot read properties of null (reading 'email')

      249 |
      250 |   const ip = getClientIP(req);
    > 251 |   const email = req.body.email || req.body.username || 'unknown';
          |                          ^
      252 |   
      253 |   if (!email || email === 'unknown') {
      254 |     return next();

      at email (src/middleware/rateLimiter.js:251:26)
      at Object.loginRateLimiter (tests/unit/middleware/rateLimiter.test.js:623:13)

  ● Rate Limiter Middleware › Error handling and edge cases › should handle store cleanup during operation

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 3

      718 |       // Should still work after cleanup
      719 |       const result = store.recordAttempt(key, ip);
    > 720 |       expect(result.attemptCount).toBe(1); // Fresh start due to cleanup or continuation
          |                                   ^
      721 |     });
      722 |   });
      723 | });

      at Object.toBe (tests/unit/middleware/rateLimiter.test.js:720:35)

FAIL node-tests tests/unit/middleware/sessionRefresh.test.js
  Session Refresh Middleware
    extractToken
      ✓ should extract token from Authorization header
      ✓ should return null for missing Authorization header
      ✓ should return null for non-Bearer token
      ✓ should return null for malformed Authorization header
    isTokenNearExpiry
      ✓ should return true for tokens expiring within 5 minutes
      ✓ should return false for tokens expiring after 5 minutes
      ✓ should return true for already expired tokens (2 ms)
      ✓ should return false for payload without exp (1 ms)
    sessionRefreshMiddleware
      ✓ should pass through when session refresh is disabled
      ✓ should pass through when no token is present (1 ms)
      ✓ should pass through when token is not near expiry (1 ms)
      ✓ should pass through when no refresh token is provided (1 ms)
      ✓ should refresh token when near expiry in mock mode (1 ms)
      ✕ should handle refresh errors gracefully (1 ms)
      ✓ should handle malformed JWT tokens
      ✓ should log debug information when enabled (1 ms)
    handleSessionRefresh endpoint
      ✓ should return error when session refresh is disabled
      ✓ should return error when refresh token is missing
      ✓ should refresh session successfully in mock mode
      ✕ should handle refresh failure (1 ms)
      ✕ should include error details in debug mode
    Integration with different environments
      ✓ should work in test environment
      ✓ should handle production environment (1 ms)
    Edge cases and error handling
      ✓ should handle empty JWT payload (1 ms)
      ✓ should handle JWT without expiration
      ✓ should handle middleware errors gracefully (1 ms)
      ✕ should handle missing headers object
      ✕ should validate refresh token format (2 ms)

  ● Session Refresh Middleware › sessionRefreshMiddleware › should handle refresh errors gracefully

    expect(jest.fn()).not.toHaveBeenCalled()

    Expected number of calls: 0
    Received number of calls: 1

    1: {"x-expires-at": 1755216810561, "x-new-access-token": "mock-refreshed-access-token-1755213210561", "x-new-refresh-token": "invalid-refresh-token", "x-token-refreshed": "true"}

      217 |       // Should not block request on refresh failure
      218 |       expect(mockNext).toHaveBeenCalled();
    > 219 |       expect(mockRes.set).not.toHaveBeenCalled();
          |                               ^
      220 |     });
      221 |
      222 |     it('should handle malformed JWT tokens', async () => {

      at Object.toHaveBeenCalled (tests/unit/middleware/sessionRefresh.test.js:219:31)

  ● Session Refresh Middleware › handleSessionRefresh endpoint › should handle refresh failure

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 401

    Number of calls: 0

      324 |       await handleSessionRefresh(mockReq, mockRes);
      325 |
    > 326 |       expect(mockRes.status).toHaveBeenCalledWith(401);
          |                              ^
      327 |       expect(mockRes.json).toHaveBeenCalledWith({
      328 |         success: false,
      329 |         error: 'Failed to refresh session',

      at Object.toHaveBeenCalledWith (tests/unit/middleware/sessionRefresh.test.js:326:30)

  ● Session Refresh Middleware › handleSessionRefresh endpoint › should include error details in debug mode

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 401

    Number of calls: 0

      350 |       await handleSessionRefresh(mockReq, mockRes);
      351 |
    > 352 |       expect(mockRes.status).toHaveBeenCalledWith(401);
          |                              ^
      353 |       expect(mockRes.json).toHaveBeenCalledWith({
      354 |         success: false,
      355 |         error: 'Failed to refresh session',

      at Object.toHaveBeenCalledWith (tests/unit/middleware/sessionRefresh.test.js:352:30)

  ● Session Refresh Middleware › Edge cases and error handling › should handle missing headers object

    TypeError: Cannot read properties of undefined (reading 'authorization')

      14 |  */
      15 | function extractToken(req) {
    > 16 |   const authHeader = req.headers.authorization;
         |                                  ^
      17 |   if (!authHeader || !authHeader.startsWith('Bearer ')) {
      18 |     return null;
      19 |   }

      at authorization (src/middleware/sessionRefresh.js:16:34)
      at extractToken (src/middleware/sessionRefresh.js:91:17)
      at Object.sessionRefreshMiddleware (tests/unit/middleware/sessionRefresh.test.js:477:13)

  ● Session Refresh Middleware › Edge cases and error handling › should validate refresh token format

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400

    Number of calls: 0

      497 |         await handleSessionRefresh(mockReq, mockRes);
      498 |
    > 499 |         expect(mockRes.status).toHaveBeenCalledWith(400);
          |                                ^
      500 |         expect(mockRes.json).toHaveBeenCalledWith({
      501 |           success: false,
      502 |           error: 'Refresh token is required',

      at Object.toHaveBeenCalledWith (tests/unit/middleware/sessionRefresh.test.js:499:32)

  console.warn
    Cannot redefine window.location in JSDOM setup

      67 |     } catch (e) {
      68 |         // Location cannot be redefined in newer JSDOM, skip
    > 69 |         console.warn('Cannot redefine window.location in JSDOM setup');
         |                 ^
      70 |     }
      71 | }
      72 |

      at Object.warn (tests/setup.js:69:17)

FAIL dom-tests tests/unit/auth/validation.test.js
  Auth System Validation
    Email Validation
      ✓ should validate correct email addresses (2 ms)
      ✓ should reject invalid email addresses (1 ms)
    Password Validation
      ✓ should validate passwords with 6 or more characters (1 ms)
      ✕ should reject passwords with less than 6 characters
      ✕ should reject null or undefined passwords (1 ms)
    Password Confirmation
      ✓ should validate matching passwords (3 ms)
      ✓ should reject non-matching passwords
    Form Data Validation
      Login Form Validation
        ✓ should validate correct login data (1 ms)
        ✓ should reject login with invalid email (1 ms)
        ✓ should reject login with short password
        ✓ should reject login with missing fields (1 ms)
      Registration Form Validation
        ✓ should validate correct registration data (1 ms)
        ✓ should reject registration with mismatched passwords
        ✓ should reject registration without accepting terms (1 ms)
        ✓ should reject registration with all invalid data (1 ms)
    Authentication State Management
      ✓ should return false when no auth token exists
      ✓ should return true when valid auth token exists (1 ms)
      ✓ should return false when token is expired (1 ms)
      ✓ should return true when token is not expired (1 ms)
      ✓ should save auth data correctly (1 ms)
      ✓ should clear auth data correctly (1 ms)

  ● Auth System Validation › Password Validation › should reject passwords with less than 6 characters

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: ""

      90 |
      91 |             invalidPasswords.forEach(password => {
    > 92 |                 expect(validatePassword(password)).toBe(false);
         |                                                    ^
      93 |             });
      94 |         });
      95 |

      at toBe (tests/unit/auth/validation.test.js:92:52)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/unit/auth/validation.test.js:91:30)

  ● Auth System Validation › Password Validation › should reject null or undefined passwords

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: null

       95 |
       96 |         it('should reject null or undefined passwords', () => {
    >  97 |             expect(validatePassword(null)).toBe(false);
          |                                            ^
       98 |             expect(validatePassword(undefined)).toBe(false);
       99 |         });
      100 |     });

      at Object.toBe (tests/unit/auth/validation.test.js:97:44)

FAIL node-tests tests/unit/services/styleProfileGenerator.test.js
  StyleProfileGenerator
    initialization
      ✓ should initialize without errors (1 ms)
      ✓ should handle multiple initialization calls
    detectLanguages
      ✓ should detect single dominant language (1 ms)
      ✓ should detect multiple languages with sufficient threshold
      ✓ should filter out languages below minimum threshold (1 ms)
      ✓ should handle empty content
      ✓ should return most common language when none meet criteria (2 ms)
    analyzeLanguageContent
      ✓ should analyze Spanish content correctly (1 ms)
      ✓ should return null for non-existent language (1 ms)
      ✓ should detect tone indicators
      ✓ should count common words (1 ms)
    generateLanguageProfile
      ✓ should generate Spanish profile correctly
      ✓ should generate English profile correctly (1 ms)
      ✓ should handle Portuguese profile
      ✓ should fallback to English for unknown language (1 ms)
      ✓ should determine style types based on length
    generateStyleProfile
      ✓ should generate complete style profile (1 ms)
      ✓ should respect maxItemsPerPlatform option (1 ms)
      ✓ should throw error for empty content (8 ms)
      ✓ should throw error for insufficient content (1 ms)
      ✓ should handle multiple languages correctly
    getProfileStats
      ✓ should generate correct statistics (1 ms)
      ✓ should handle empty profiles
      ✓ should handle single profile (1 ms)
    edge cases and error handling
      ✕ should handle content with missing fields
      ✓ should handle very long text content (1 ms)
      ✓ should handle special characters and emojis
      ✓ should handle null or undefined platform data

  ● StyleProfileGenerator › edge cases and error handling › should handle content with missing fields

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 2

      390 |       const result = generator.analyzeLanguageContent(incompleteContent, 'es');
      391 |       expect(result).toBeDefined();
    > 392 |       expect(result.totalItems).toBe(1); // Only complete item counted
          |                                 ^
      393 |     });
      394 |
      395 |     it('should handle very long text content', () => {

      at Object.toBe (tests/unit/services/styleProfileGenerator.test.js:392:33)

FAIL node-tests tests/unit/services/authService.test.js
  AuthService
    signUp
      ✓ should create a new user successfully
      ✓ should handle authentication errors (10 ms)
      ✓ should cleanup auth user if profile creation fails
    signIn
      ✓ should sign in user successfully (2 ms)
      ✓ should handle invalid credentials (1 ms)
    listUsers
      ✕ should list users successfully
      ✓ should handle database errors
    createUserManually
      ✓ should create user manually with provided password
      ✓ should create user manually with temporary password (1 ms)
    deleteUser
      ✓ should delete user successfully
      ✓ should handle auth deletion errors (1 ms)

  ● AuthService › listUsers › should list users successfully

    expect(received).toEqual(expected) // deep equality

    Expected: [{"email": "user1@example.com", "id": "1", "name": "User 1"}, {"email": "user2@example.com", "id": "2", "name": "User 2"}]
    Received: {"pagination": {"has_more": false, "limit": 50, "offset": 0, "total": 0}, "users": [{"email": "user1@example.com", "id": "1", "is_over_limit": true, "name": "User 1", "usage_alerts": [{"category": "account", "message": "Cuenta desactivada", "severity": "medium", "type": "warning"}]}, {"email": "user2@example.com", "id": "2", "is_over_limit": true, "name": "User 2", "usage_alerts": [{"category": "account", "message": "Cuenta desactivada", "severity": "medium", "type": "warning"}]}]}

      198 |
      199 |       const result = await authService.listUsers(10, 0);
    > 200 |       expect(result).toEqual(mockUsers);
          |                      ^
      201 |     });
      202 |
      203 |     it('should handle database errors', async () => {

      at Object.toEqual (tests/unit/services/authService.test.js:200:22)

FAIL node-tests tests/integration/backend/basic-setup.test.js
  Backend Integration Test Setup
    ✕ should load environment configuration (1 ms)
    ✓ should have proper Jest configuration (1 ms)
    ✕ should handle fixture mode configuration

  ● Backend Integration Test Setup › should load environment configuration

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["backend", "real"]

       9 |     
      10 |     // Verify integration test mode is set (can be 'backend' or 'real')
    > 11 |     expect(['backend', 'real']).toContain(process.env.INTEGRATION_TEST_MODE);
         |                                 ^
      12 |   });
      13 |
      14 |   test('should have proper Jest configuration', () => {

      at Object.toContain (tests/integration/backend/basic-setup.test.js:11:33)

  ● Backend Integration Test Setup › should handle fixture mode configuration

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      24 |     
      25 |     // Should have fallback enabled by default
    > 26 |     expect(fallbackEnabled).toBe(true);
         |                             ^
      27 |     
      28 |     // Log mode for debugging
      29 |     console.log('Integration test mode:', useFixtures ? 'FIXTURES' : 'REAL BACKEND');

      at Object.toBe (tests/integration/backend/basic-setup.test.js:26:29)

PASS node-tests tests/unit/routes/__tests__/dashboard.test.js
  Dashboard API Endpoints
    GET /api/health
      ✓ returns system health status (13 ms)
      ✓ includes valid timestamp (8 ms)
      ✓ services have valid status values (6 ms)
    GET /api/user
      ✓ returns mock user data (8 ms)
      ✓ includes user metadata (5 ms)
      ✓ includes rqc status (5 ms)
    GET /api/integrations
      ✓ returns list of integrations (14 ms)
      ✓ each integration has required fields (5 ms)
      ✓ shows integration status in mock mode (3 ms)
    GET /api/logs
      ✓ returns list of logs (6 ms)
      ✓ each log entry has required fields (11 ms)
      ✓ respects limit parameter (4 ms)
      ✓ defaults to 50 logs when no limit specified (3 ms)
    GET /api/usage
      ✓ returns usage statistics (3 ms)
      ✓ includes usage breakdown (4 ms)
      ✓ includes limits (3 ms)
    POST /api/billing/portal
      ✓ returns billing portal response (3 ms)
    POST /api/roast/preview
      ✓ generates roast preview from text (1049 ms)
      ✓ requires text in request body (8 ms)
      ✓ handles empty text (6 ms)
      ✓ handles very long text (1211 ms)
    Error handling
      ✓ handles invalid JSON in POST requests (6 ms)
      ✓ returns 404 for non-existent endpoints (5 ms)
    Response headers
      ✓ returns JSON content type for all endpoints (21 ms)
    Mock data consistency
      ✓ mock data remains consistent across requests (8 ms)
      ✓ random elements vary between requests (8 ms)

FAIL node-tests tests/integration/api.test.js
  API Integration Tests
    GET /
      ✓ debe responder con mensaje de bienvenida (24 ms)
    POST /roast
      ✓ debe generar roast con tono sarcástico por defecto (13 ms)
      ✓ debe generar roast con tono especificado (10 ms)
      ✓ debe usar tono sarcástico si se proporciona tono inválido (11 ms)
      ✓ debe devolver error 400 si falta message (11 ms)
      ✓ debe devolver error 400 si message está vacío (12 ms)
      ✓ debe devolver error 400 si message no es string (10 ms)
      ✓ debe devolver error 500 si falla la generación (12 ms)
      ✓ debe validar todos los tonos válidos (17 ms)
    POST /csv-roast
      ✓ debe devolver roast desde CSV correctamente (12 ms)
      ✓ debe devolver error 400 si falta message (11 ms)
      ✓ debe devolver error 400 si message está vacío (12 ms)
      ✓ debe devolver error 400 si message es null (11 ms)
      ✓ debe devolver error 500 si falla la búsqueda en CSV (12 ms)
      ✓ debe incluir detalles de error si DEBUG está activo (11 ms)
    GET /csv-stats
      ✓ debe devolver estadísticas del CSV (10 ms)
      ✓ debe manejar errores al obtener estadísticas (10 ms)
    POST /csv-add
      ✓ debe añadir roast al CSV correctamente (12 ms)
      ✓ debe devolver error 400 si falta comment (10 ms)
      ✓ debe devolver error 400 si falta roast (12 ms)
      ✓ debe devolver error 400 si comment no es string (11 ms)
      ✓ debe devolver error 400 si roast no es string (12 ms)
      ✓ debe manejar errores al añadir al CSV (10 ms)
    Content-Type and JSON validation
      ✓ debe rechazar requests sin Content-Type JSON (11 ms)
      ✕ debe manejar JSON malformado (8 ms)

  ● API Integration Tests › Content-Type and JSON validation › debe manejar JSON malformado

    socket hang up



  console.warn
    Cannot redefine window.location in JSDOM setup

      67 |     } catch (e) {
      68 |         // Location cannot be redefined in newer JSDOM, skip
    > 69 |         console.warn('Cannot redefine window.location in JSDOM setup');
         |                 ^
      70 |     }
      71 | }
      72 |

      at Object.warn (tests/setup.js:69:17)

PASS dom-tests tests/unit/auth/ui-interactions.test.js
  Auth UI Interactions
    Message Display System
      ✓ should display error message correctly (9 ms)
      ✓ should display success message correctly (5 ms)
      ✓ should hide previous message when showing new one (3 ms)
      ✓ should default to error type when type is not specified (5 ms)
    Loading State Management
      ✓ should set loading state correctly (4 ms)
      ✓ should remove loading state correctly (4 ms)
      ✓ should handle non-existent button gracefully (3 ms)
    Password Toggle Functionality
      ✓ should toggle password visibility from hidden to visible (3 ms)
      ✓ should toggle password visibility from visible to hidden (5 ms)
    Form Validation UI
      ✓ should validate valid form data (5 ms)
      ✓ should detect invalid email (4 ms)
      ✓ should detect short password (4 ms)
      ✓ should detect missing terms acceptance (4 ms)
    URL Parameter Handling
      ✓ should parse success message from URL (5 ms)
      ✓ should parse error message from URL (3 ms)
      ✓ should parse email verification parameters (3 ms)
      ✓ should handle empty URL parameters (3 ms)
    CSS Class Management
      ✓ should toggle class when no condition specified (3 ms)
      ✓ should add class when condition is true (5 ms)
      ✓ should remove class when condition is false (3 ms)
      ✓ should handle non-existent element gracefully (3 ms)
    Input Field Interactions
      ✓ should set field error state (4 ms)
      ✓ should remove field error state (3 ms)
      ✓ should handle focus events (6 ms)

PASS node-tests tests/unit/services/rqcService.test.js
  RQCService
    Main Review Process
      ✓ should run all 3 reviewers in parallel (1 ms)
      ✓ should provide detailed review metrics (1 ms)
    Moderator Reviewer
      ✓ should pass compliant roast
      ✓ should fail roast with moderation issues (1 ms)
      ✓ should include intensity level in prompt
      ✓ should handle moderator API errors gracefully (1 ms)
    Comedian Reviewer
      ✓ should pass funny and punchy roast
      ✓ should fail generic or unfunny roast
      ✓ should adjust expectations based on intensity level (1 ms)
    Style Reviewer
      ✓ should pass roast that matches default style
      ✓ should use custom style prompt when configured (1 ms)
      ✓ should fail roast that doesn't match configured style (1 ms)
    RQC Decision Logic
      ✓ should approve with 3 passes (1 ms)
      ✓ should approve with 2 passes (moderator pass)
      ✓ should regenerate when moderator fails (non-negotiable)
      ✓ should regenerate with less than 2 passes
      ✓ should handle mixed fail scenarios
    Performance and Optimization
      ✓ should estimate tokens accurately (1 ms)
      ✓ should run reviewers in parallel (performance check) (103 ms)
    Error Handling
      ✓ should handle partial reviewer failures (1 ms)
      ✓ should handle complete review failure (1 ms)
    Configuration Integration
      ✓ should handle different intensity levels appropriately (1 ms)
      ✓ should use low temperature for consistent moderation

PASS node-tests tests/unit/routes/user.test.js
  User Routes Tests
    GET /api/user/integrations
      ✓ should return user integrations successfully (13 ms)
      ✓ should return error if user organization not found (6 ms)
    POST /api/user/integrations/connect
      ✓ should connect new platform successfully (8 ms)
      ✓ should update existing platform successfully (8 ms)
      ✓ should return error for invalid platform (4 ms)
      ✓ should return error for missing platform (4 ms)
    POST /api/user/integrations/disconnect
      ✓ should disconnect platform successfully (7 ms)
      ✓ should return error if integration not found (4 ms)
      ✓ should return error for missing platform (5 ms)
    POST /api/user/preferences
      ✓ should save user preferences successfully (4 ms)
      ✓ should return error for invalid humor tone (4 ms)
      ✓ should return error for invalid humor style (4 ms)
      ✓ should return error for invalid platforms (3 ms)
      ✓ should handle empty preferences with defaults (3 ms)
    GET /api/user/profile
      ✓ should return user profile successfully (4 ms)
      ✓ should return error if user not found (4 ms)
    Authentication Middleware Integration
      ✓ should require authentication for all user routes (6 ms)
    Error Handling
      ✓ should handle database errors gracefully (4 ms)
      ✓ should handle unexpected errors in preferences endpoint (4 ms)

PASS node-tests tests/smoke/api-health.test.js
  API Health Smoke Tests
    Health Check Endpoints
      ✓ GET /health should return 200 (11 ms)
      ✓ GET /api/health should be accessible (4 ms)
    Auth Endpoints Accessibility
      ✓ POST /api/auth/register should be accessible (5 ms)
      ✓ POST /api/auth/login should be accessible (4 ms)
    Billing Endpoints Accessibility
      ✓ GET /api/billing/plans should be accessible (3 ms)
      ✓ POST /api/billing/create-checkout-session endpoint exists (5 ms)
    Integration Endpoints Accessibility
      ✓ GET /api/user/integrations endpoint exists (3 ms)
      ✓ POST /api/user/integrations/connect endpoint exists (4 ms)
    Error Handling
      ✓ Non-existent endpoints should return proper error (5 ms)
      ✓ Wrong HTTP method should return proper error (3 ms)
    Security Headers
      ✓ Should include security headers (4 ms)

PASS node-tests tests/unit/routes/admin.test.js
  Admin Routes
    GET /api/admin/dashboard
      ✓ should return dashboard data successfully using metricsService (11 ms)
      ✓ should handle metricsService errors gracefully (4 ms)
    GET /api/admin/users
      ✓ should return users list with filters (4 ms)
      ✓ should handle empty results (3 ms)
    POST /api/admin/users/:userId/toggle-admin
      ✓ should toggle admin status successfully (3 ms)
      ✓ should handle user not found (4 ms)
    POST /api/admin/users/:userId/toggle-active
      ✓ should toggle active status successfully (3 ms)
    POST /api/admin/integrations/test
      ✓ should execute integration test successfully (5 ms)
      ✓ should handle integration test failure (5 ms)
    GET /api/admin/config
      ✓ should return system configuration (3 ms)
    GET /api/admin/logs
      ✓ should return logs successfully (3 ms)
      ✓ should handle logs fetch error with fallback data (3 ms)
    GET /api/admin/logs/download
      ✓ should download logs as text file (4 ms)
    POST /api/admin/users/:userId/suspend
      ✓ should suspend user successfully (3 ms)
      ✓ should handle suspend user error (4 ms)
    POST /api/admin/users/:userId/reactivate
      ✓ should reactivate user successfully (3 ms)
      ✓ should handle reactivate user error (3 ms)

PASS node-tests tests/integration/api-simple.test.js
  API Integration Tests (Simplified)
    GET /
      ✓ debe responder con mensaje de bienvenida (7 ms)
    POST /roast
      ✓ debe generar roast con tono sarcástico por defecto (6 ms)
      ✓ debe generar roast con tono especificado (4 ms)
      ✓ debe usar tono sarcástico si se proporciona tono inválido (4 ms)
      ✓ debe devolver error 400 si falta message (5 ms)
    POST /csv-roast
      ✓ debe devolver roast desde CSV correctamente (4 ms)
      ✓ debe devolver error 400 si falta message (4 ms)
    GET /csv-stats
      ✓ debe devolver estadísticas del CSV (5 ms)
    POST /csv-add
      ✓ debe añadir roast al CSV correctamente (3 ms)
      ✓ debe devolver error 400 si falta comment (4 ms)

PASS node-tests tests/unit/services/costControl.test.js
  CostControlService
    canPerformOperation
      ✓ should allow operation when under limit (1 ms)
      ✓ should deny operation when over limit (2 ms)
    recordUsage
      ✓ should record usage and increment counters for billable operations
      ✓ should record free operations without incrementing counters (1 ms)
    canUseShield
      ✓ should allow Shield for pro plan
      ✓ should deny Shield for free plan (1 ms)
    upgradePlan
      ✓ should upgrade organization plan successfully
      ✓ should reject invalid plan upgrade (8 ms)
    getUsageStats
      ✓ should return comprehensive usage statistics
    Plan configurations
      ✓ should have correct plan configurations (1 ms)
      ✓ should have correct operation costs
    Error handling
      ✓ should handle database errors gracefully (1 ms)

PASS node-tests tests/unit/middleware/requirePlan.test.js
  requirePlan Middleware Tests
    Basic Plan Validation
      ✓ should allow access for users with sufficient plan level (1 ms)
      ✓ should deny access for users with insufficient plan level (1 ms)
      ✓ should allow access for higher tier plans
    Array Plan Validation
      ✓ should allow access for exact plan matches (1 ms)
      ✓ should deny access for non-matching plans
    Subscription Status Validation
      ✓ should allow access for active subscriptions (1 ms)
      ✓ should deny access for inactive subscriptions
      ✓ should allow access during trial period (1 ms)
      ✓ should allow access for past_due subscriptions within grace period
    Feature-based Access Control
      ✓ should allow access to available features (1 ms)
      ✓ should deny access to unavailable features (2 ms)
    Authentication Validation
      ✓ should require authentication
    Database Error Handling
      ✓ should handle database errors gracefully (1 ms)
      ✓ should handle missing subscription data
  requirePlatformLimit Middleware Tests
    ✓ should allow within platform limits (1 ms)
    ✓ should deny when exceeding platform limits
    ✓ should allow unlimited platforms for creator_plus (1 ms)
    ✓ should require subscription middleware to run first
  checkRoastLimit Function Tests
    ✓ should allow roasts within limits for free plan (1 ms)
    ✓ should deny roasts when exceeding limits
    ✓ should allow unlimited roasts for creator_plus plan (1 ms)
    ✓ should handle database errors (7 ms)
  Plan Configuration Tests
    ✓ should have correct plan hierarchy
    ✓ should have correct plan limits (1 ms)
    ✓ should have correct feature access

PASS node-tests tests/integration/content-type.test.js
  Content-Type Validation
    ✓ debe aceptar requests con Content-Type application/json (7 ms)
    ✓ debe rechazar requests sin Content-Type JSON (5 ms)
    ✓ debe rechazar requests con Content-Type incorrecto (3 ms)
    ✓ debe manejar JSON inválido correctamente (3 ms)

  console.warn
    Cannot redefine window.location in JSDOM setup

      67 |     } catch (e) {
      68 |         // Location cannot be redefined in newer JSDOM, skip
    > 69 |         console.warn('Cannot redefine window.location in JSDOM setup');
         |                 ^
      70 |     }
      71 | }
      72 |

      at Object.warn (tests/setup.js:69:17)

PASS dom-tests tests/unit/auth/auth-validation.test.js
  Auth Validation Functions
    Email Validation
      ✓ should validate correct email addresses
      ✓ should reject invalid email addresses (1 ms)
    Password Validation
      ✓ should validate passwords with 6 or more characters
      ✓ should reject passwords with less than 6 characters (1 ms)
      ✓ should reject null or undefined passwords
    Form Validation
      Login Form Validation
        ✓ should validate correct login data (1 ms)
        ✓ should reject login with invalid email
        ✓ should reject login with short password
        ✓ should reject login with missing fields (1 ms)
      Registration Form Validation
        ✓ should validate correct registration data
        ✓ should reject registration with mismatched passwords
        ✓ should reject registration without accepting terms (1 ms)
        ✓ should reject registration with all invalid data
    Authentication State Management
      ✓ should return false when no auth token exists (1 ms)
      ✓ should return true when valid auth token exists
      ✓ should return false when token is expired (2 ms)
      ✓ should return true when token is not expired
      ✓ should save auth data correctly (1 ms)
      ✓ should clear auth data correctly
    User Redirection Logic
      ✓ should redirect admin users to admin panel (1 ms)
      ✓ should redirect regular users to dashboard
      ✓ should redirect to dashboard when no user data provided
      ✓ should handle missing is_admin property (1 ms)

PASS node-tests tests/unit/services/shieldService.test.js
  ShieldService
    initialize
      ✓ should initialize service and queue connections (1 ms)
    analyzeContent
      ✓ should analyze content and determine action level
      ✓ should handle first-time offender with medium toxicity (1 ms)
      ✓ should not take action for low toxicity content
    executeActions
      ✓ should execute Shield actions and record them (1 ms)
      ✓ should skip execution when no actions recommended (1 ms)
    trackUserBehavior
      ✓ should update user behavior statistics
    getUserRiskLevel
      ✓ should calculate high risk for repeat offender (1 ms)
      ✓ should calculate low risk for new user
    getShieldStats
      ✓ should return comprehensive Shield statistics (1 ms)
      ✓ should handle organizations with no Shield activity
    action level determination
      ✓ should determine correct action level based on toxicity and history (1 ms)
    recommended actions
      ✓ should recommend appropriate actions for high severity
      ✓ should recommend appropriate actions for medium severity (2 ms)
      ✓ should recommend appropriate actions for low severity (1 ms)
      ✓ should return empty actions for no severity
    error handling
      ✓ should handle database errors in content analysis (10 ms)
      ✓ should handle queue service errors gracefully
    shutdown
      ✓ should shutdown queue service gracefully (1 ms)

PASS node-tests tests/unit/services/authPasswordRecovery.test.js
  AuthService Password Recovery
    resetPassword
      ✓ should send password reset email successfully
      ✓ should handle password reset errors (9 ms)
    signInWithMagicLink
      ✓ should send magic link successfully
      ✓ should handle magic link errors
    signUpWithMagicLink
      ✓ should send signup magic link successfully
      ✓ should handle signup magic link errors

PASS node-tests tests/unit/services/metricsService.test.js
  MetricsService
    getDashboardMetrics
      ✓ should return comprehensive dashboard metrics (3 ms)
      ✓ should handle database errors gracefully (1 ms)
    getUserMetrics
      ✓ should return user metrics with fallback data (1 ms)
    getRoastMetrics
      ✓ should return roast metrics with fallback data
    getTopUsers
      ✓ should return top 5 users by activity
    getIntegrationsStatus
      ✓ should return integration status with statistics (1 ms)
      ✓ should include standard integration platforms

PASS node-tests tests/unit/middleware/isAdmin.test.js
  isAdmin Middleware
    isAdminMiddleware
      ✓ should reject request without Authorization header (1 ms)
      ✓ should reject request with invalid token format
      ✓ should reject request with invalid/expired token
      ✓ should reject request when user profile fetch fails (1 ms)
      ✓ should reject non-admin user
      ✓ should reject inactive admin user (1 ms)
      ✓ should allow active admin user (1 ms)
      ✓ should handle unexpected errors gracefully (1 ms)
    optionalAdminMiddleware
      ✓ should continue without authentication when no token provided
      ✓ should set user info when valid token provided (1 ms)
      ✓ should continue gracefully when authentication fails

PASS node-tests tests/unit/services/roastGeneratorEnhanced.test.js
  RoastGeneratorEnhanced
    Plan-based Roast Generation
      ✓ should use basic moderation for Free plan (1 ms)
      ✓ should use basic moderation for Pro plan (1 ms)
      ✓ should use basic moderation for Creator+ plan when RQC globally disabled
    RQC Approval Logic (requires ENABLE_RQC=true)
      ○ skipped should approve roast with 3 green reviewers
      ○ skipped should approve roast with 2 green reviewers (no moderator fail)
      ○ skipped should regenerate when moderator fails
      ○ skipped should use fallback after max regeneration attempts
    Cost Control and Optimization
      ✓ should not make extra GPT calls for Free plan (1 ms)
      ✓ should not make extra GPT calls for Pro plan
      ○ skipped should track tokens and costs for Creator+ RQC (requires ENABLE_RQC=true)
    Fallback and Error Handling
      ✓ should fallback to safe roast on OpenAI error (1 ms)
      ✓ should handle database errors gracefully
    Basic Moderation Prompts
      ✓ should include intensity level in basic moderation prompt (2 ms)
      ✓ should customize prompt based on tone

PASS node-tests tests/smoke/feature-flags.test.js
  Feature Flags Smoke Tests
    ✓ Feature flags should initialize without errors (2 ms)
    ✓ Should be able to check flag status
    ✓ Should return service status (1 ms)
    ✓ Should return all flags
    ✓ Should handle unknown flags gracefully
    ✓ Feature flags should be consistent

FAIL node-tests tests/unit/workers/ShieldActionWorker.test.js
  ● Test suite failed to run

    Cannot find module '../../../src/integrations/twitter/twitterService' from 'tests/unit/workers/ShieldActionWorker.test.js'

      69 | };
      70 |
    > 71 | jest.mock('../../../src/integrations/twitter/twitterService', () => mockTwitterService);
         |      ^
      72 | jest.mock('../../../src/integrations/youtube/youtubeService', () => mockYouTubeService);
      73 |
      74 | describe('ShieldActionWorker', () => {

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.mock (tests/unit/workers/ShieldActionWorker.test.js:71:6)

FAIL node-tests tests/integration/multiTenantWorkflow.test.js
  ● Test suite failed to run

    Cannot find module '../../src/integrations/twitter/twitterService' from 'tests/integration/multiTenantWorkflow.test.js'

      15 |
      16 | // Mock external services for integration testing
    > 17 | jest.mock('../../src/integrations/twitter/twitterService');
         |      ^
      18 | jest.mock('../../src/services/perspective');
      19 | jest.mock('../../src/services/openai');
      20 |

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.mock (tests/integration/multiTenantWorkflow.test.js:17:6)

Summary of all failing tests
FAIL tests/unit/frontend/billing.test.js
  ● Billing Frontend Tests › Plans Data Loading › should load subscription data successfully

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Plans Data Loading › should load plans data successfully

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Plans Data Loading › should handle API errors gracefully

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › UI Manipulation › should show current plan badge for non-free plans

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › UI Manipulation › should show portal button for subscribed users

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › UI Manipulation › should render plans grid correctly

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Checkout Session Creation › should handle checkout creation errors

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Message Display › should show error messages

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Message Display › should show success messages

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

  ● Billing Frontend Tests › Loading States › should show and hide loading overlay

    TypeError: Cannot delete property 'location' of #<Window>

      62 |         
      63 |         // Delete the original location and set our mock
    > 64 |         delete window.location;
         |         ^
      65 |         window.location = mockLocation;
      66 |         global.window.location = mockLocation;
      67 |         

      at Object.<anonymous> (tests/unit/frontend/billing.test.js:64:9)

FAIL tests/integration/oauth-mock.test.js
  ● OAuth Mock Integration Tests › Platform Support › should return all supported platforms

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Platform Support › should have correct platform configurations

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Connection Status › should return empty connections initially

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Connection Status › should require authentication

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Connect Flow › should initiate connection successfully

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Connect Flow › should reject unsupported platform

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Connect Flow › should require authentication for connect

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Connect Flow › should sanitize platform parameter

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Callback Flow › should handle successful callback

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Callback Flow › should handle callback with error

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Callback Flow › should reject callback without required parameters

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Callback Flow › should reject callback with invalid state

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › OAuth Callback Flow › should reject expired state

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Complete OAuth Flow › twitter OAuth flow › should complete full connect -> callback -> status cycle

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Complete OAuth Flow › instagram OAuth flow › should complete full connect -> callback -> status cycle

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Complete OAuth Flow › youtube OAuth flow › should complete full connect -> callback -> status cycle

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Complete OAuth Flow › facebook OAuth flow › should complete full connect -> callback -> status cycle

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Complete OAuth Flow › bluesky OAuth flow › should complete full connect -> callback -> status cycle

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Token Management › should refresh tokens successfully

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Token Management › should disconnect successfully

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Token Management › should handle refresh for non-existent connection

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Token Management › should handle disconnect for non-existent connection

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Mock Reset Functionality › should reset specific platform connection

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Mock Reset Functionality › should reset all connections

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Mock Reset Functionality › should only be available in mock mode

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Error Handling & Edge Cases › should handle malformed state parameter

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Error Handling & Edge Cases › should handle platform mismatch in state

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Error Handling & Edge Cases › should handle already connected platform

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › Error Handling & Edge Cases › should validate platform parameter format

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)

  ● OAuth Mock Integration Tests › User Info Validation › should provide valid user info for all platforms

    TypeError: flags.reload is not a function

      16 |     process.env.ENABLE_OAUTH_MOCK = 'true';
      17 |     process.env.ENABLE_MOCK_MODE = 'true';
    > 18 |     flags.reload();
         |           ^
      19 |
      20 |     // Setup authenticated user
      21 |     authToken = 'mock-jwt-token-oauth';

      at Object.reload (tests/integration/oauth-mock.test.js:18:11)


  ● Test suite failed to run

    TypeError: flags.reload is not a function

      27 |     delete process.env.ENABLE_OAUTH_MOCK;
      28 |     delete process.env.ENABLE_MOCK_MODE;
    > 29 |     flags.reload();
         |           ^
      30 |   });
      31 |
      32 |   describe('Platform Support', () => {

      at Object.reload (tests/integration/oauth-mock.test.js:29:11)

FAIL tests/integration/authWorkflow.test.js
  ● Authentication Workflow Integration Tests › User Registration and Login Flow › should complete full user signup and login workflow

    expect(received).toBe(expected) // Object.is equality

    Expected: 201
    Received: 500

      332 |         console.log('Signup response error:', signupResponse.body);
      333 |       }
    > 334 |       expect(signupResponse.status).toBe(201);
          |                                     ^
      335 |       expect(signupResponse.body.success).toBe(true);
      336 |       expect(signupResponse.body.data.user.email).toBe('testuser@example.com');
      337 |       expect(signupResponse.body.data.session.access_token).toBeTruthy();

      at Object.toBe (tests/integration/authWorkflow.test.js:334:37)

  ● Authentication Workflow Integration Tests › User Registration and Login Flow › should handle duplicate email registration

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      404 |         });
      405 |
    > 406 |       expect(duplicateResponse.status).toBe(400);
          |                                        ^
      407 |       expect(duplicateResponse.body.success).toBe(false);
      408 |     });
      409 |

      at Object.toBe (tests/integration/authWorkflow.test.js:406:40)

  ● Authentication Workflow Integration Tests › User Registration and Login Flow › should handle invalid credentials

    expect(received).toContain(expected) // indexOf

    Expected substring: "Invalid login credentials"
    Received string:    "Wrong email or password"

      419 |       expect(loginResponse.status).toBe(401);
      420 |       expect(loginResponse.body.success).toBe(false);
    > 421 |       expect(loginResponse.body.error).toContain('Invalid login credentials');
          |                                        ^
      422 |     });
      423 |   });
      424 |

      at Object.toContain (tests/integration/authWorkflow.test.js:421:40)

  ● Authentication Workflow Integration Tests › Integration Management Flow › should manage user integrations

    TypeError: Cannot read properties of undefined (reading 'session')

      434 |         });
      435 |       
    > 436 |       authToken = signupResponse.body.data.session.access_token;
          |                                            ^
      437 |     });
      438 |
      439 |     it('should manage user integrations', async () => {

      at Object.session (tests/integration/authWorkflow.test.js:436:44)

  ● Authentication Workflow Integration Tests › Integration Management Flow › should enforce free plan limits

    TypeError: Cannot read properties of undefined (reading 'session')

      434 |         });
      435 |       
    > 436 |       authToken = signupResponse.body.data.session.access_token;
          |                                            ^
      437 |     });
      438 |
      439 |     it('should manage user integrations', async () => {

      at Object.session (tests/integration/authWorkflow.test.js:436:44)

  ● Authentication Workflow Integration Tests › Password Reset Flow › should handle password reset request

    expect(received).toContain(expected) // indexOf

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      550 |       expect(resetResponse.status).toBe(200);
      551 |       expect(resetResponse.body.success).toBe(true);
    > 552 |       expect(resetResponse.body.data.message).toContain('Password reset email sent');
          |                                               ^
      553 |     });
      554 |
      555 |     it('should handle magic link requests', async () => {

      at Object.toContain (tests/integration/authWorkflow.test.js:552:47)

FAIL tests/unit/routes/integrations-new.test.js
  ● New Integration Routes › GET /api/integrations/platforms › should return all supported platforms

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      14 |         .get('/api/integrations/platforms');
      15 |
    > 16 |       expect(response.status).toBe(200);
         |                               ^
      17 |       expect(response.body.success).toBe(true);
      18 |       expect(response.body.data.platforms).toBeInstanceOf(Array);
      19 |       expect(response.body.data.count).toBe(7);

      at Object.toBe (tests/unit/routes/integrations-new.test.js:16:31)

  ● New Integration Routes › GET /api/integrations/status › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      44 |         .get('/api/integrations/status');
      45 |
    > 46 |       expect(response.status).toBe(401);
         |                               ^
      47 |     });
      48 |
      49 |     it('should return empty status for new user', async () => {

      at Object.toBe (tests/unit/routes/integrations-new.test.js:46:31)

  ● New Integration Routes › GET /api/integrations/status › should return empty status for new user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      52 |         .set('Authorization', `Bearer ${authToken}`);
      53 |
    > 54 |       expect(response.status).toBe(200);
         |                               ^
      55 |       expect(response.body.success).toBe(true);
      56 |       expect(response.body.data.integrations).toBeInstanceOf(Array);
      57 |       expect(response.body.data.connectedCount).toBe(0);

      at Object.toBe (tests/unit/routes/integrations-new.test.js:54:31)

  ● New Integration Routes › POST /api/integrations/connect › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      72 |         .send({ platform: 'twitter' });
      73 |
    > 74 |       expect(response.status).toBe(401);
         |                               ^
      75 |     });
      76 |
      77 |     it('should require platform parameter', async () => {

      at Object.toBe (tests/unit/routes/integrations-new.test.js:74:31)

  ● New Integration Routes › POST /api/integrations/connect › should require platform parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      81 |         .send({});
      82 |
    > 83 |       expect(response.status).toBe(400);
         |                               ^
      84 |       expect(response.body.error).toContain('Platform is required');
      85 |     });
      86 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:83:31)

  ● New Integration Routes › POST /api/integrations/connect › should reject unsupported platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      91 |         .send({ platform: 'unsupported_platform' });
      92 |
    > 93 |       expect(response.status).toBe(400);
         |                               ^
      94 |       expect(response.body.error).toContain('Unsupported platform');
      95 |       expect(response.body.supportedPlatforms).toBeInstanceOf(Array);
      96 |     });

      at Object.toBe (tests/unit/routes/integrations-new.test.js:93:31)

  ● New Integration Routes › POST /api/integrations/connect › should successfully connect to Twitter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      102 |         .send({ platform: 'twitter' });
      103 |
    > 104 |       expect(response.status).toBe(200);
          |                               ^
      105 |       expect(response.body.success).toBe(true);
      106 |       expect(response.body.data.platform).toBe('twitter');
      107 |       expect(response.body.data.status).toBe('connected');

      at Object.toBe (tests/unit/routes/integrations-new.test.js:104:31)

  ● New Integration Routes › POST /api/integrations/connect › should successfully connect to multiple platforms

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      119 |           .send({ platform });
      120 |
    > 121 |         expect(response.status).toBe(200);
          |                                 ^
      122 |         expect(response.body.success).toBe(true);
      123 |         expect(response.body.data.platform).toBe(platform);
      124 |         expect(response.body.data.status).toBe('connected');

      at Object.toBe (tests/unit/routes/integrations-new.test.js:121:33)

  ● New Integration Routes › POST /api/integrations/import › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      141 |         .send({ platform: 'twitter' });
      142 |
    > 143 |       expect(response.status).toBe(401);
          |                               ^
      144 |     });
      145 |
      146 |     it('should require platform parameter', async () => {

      at Object.toBe (tests/unit/routes/integrations-new.test.js:143:31)

  ● New Integration Routes › POST /api/integrations/import › should require platform parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      150 |         .send({});
      151 |
    > 152 |       expect(response.status).toBe(400);
          |                               ^
      153 |       expect(response.body.error).toContain('Platform is required');
      154 |     });
      155 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:152:31)

  ● New Integration Routes › POST /api/integrations/import › should require platform to be connected first

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      160 |         .send({ platform: 'linkedin' });
      161 |
    > 162 |       expect(response.status).toBe(400);
          |                               ^
      163 |       expect(response.body.error).toContain('Please connect to linkedin first');
      164 |     });
      165 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:162:31)

  ● New Integration Routes › POST /api/integrations/import › should successfully start import from connected platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      170 |         .send({ platform: 'twitter', limit: 200 });
      171 |
    > 172 |       expect(response.status).toBe(200);
          |                               ^
      173 |       expect(response.body.success).toBe(true);
      174 |       expect(response.body.data.platform).toBe('twitter');
      175 |       expect(response.body.data.imported).toBe(200);

      at Object.toBe (tests/unit/routes/integrations-new.test.js:172:31)

  ● New Integration Routes › POST /api/integrations/import › should respect maximum import limit

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      185 |         .send({ platform: 'twitter', limit: 500 });
      186 |
    > 187 |       expect(response.status).toBe(200);
          |                               ^
      188 |       expect(response.body.data.imported).toBe(300); // Should be capped at 300
      189 |     });
      190 |   });

      at Object.toBe (tests/unit/routes/integrations-new.test.js:187:31)

  ● New Integration Routes › GET /api/integrations/import/status/:platform › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      195 |         .get('/api/integrations/import/status/twitter');
      196 |
    > 197 |       expect(response.status).toBe(401);
          |                               ^
      198 |     });
      199 |
      200 |     it('should reject unsupported platform', async () => {

      at Object.toBe (tests/unit/routes/integrations-new.test.js:197:31)

  ● New Integration Routes › GET /api/integrations/import/status/:platform › should reject unsupported platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      203 |         .set('Authorization', `Bearer ${authToken}`);
      204 |
    > 205 |       expect(response.status).toBe(400);
          |                               ^
      206 |       expect(response.body.error).toContain('Unsupported platform');
      207 |     });
      208 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:205:31)

  ● New Integration Routes › GET /api/integrations/import/status/:platform › should return import status for connected platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      212 |         .set('Authorization', `Bearer ${authToken}`);
      213 |
    > 214 |       expect(response.status).toBe(200);
          |                               ^
      215 |       expect(response.body.success).toBe(true);
      216 |       expect(response.body.data.platform).toBe('twitter');
      217 |       expect(response.body.data.status).toBe('connected');

      at Object.toBe (tests/unit/routes/integrations-new.test.js:214:31)

  ● New Integration Routes › POST /api/integrations/disconnect › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      235 |         .send({ platform: 'instagram' });
      236 |
    > 237 |       expect(response.status).toBe(401);
          |                               ^
      238 |     });
      239 |
      240 |     it('should require platform parameter', async () => {

      at Object.toBe (tests/unit/routes/integrations-new.test.js:237:31)

  ● New Integration Routes › POST /api/integrations/disconnect › should require platform parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      244 |         .send({});
      245 |
    > 246 |       expect(response.status).toBe(400);
          |                               ^
      247 |       expect(response.body.error).toContain('Platform is required');
      248 |     });
      249 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:246:31)

  ● New Integration Routes › POST /api/integrations/disconnect › should fail for not connected platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      254 |         .send({ platform: 'linkedin' });
      255 |
    > 256 |       expect(response.status).toBe(400);
          |                               ^
      257 |       expect(response.body.error).toContain('Platform not connected');
      258 |     });
      259 |

      at Object.toBe (tests/unit/routes/integrations-new.test.js:256:31)

  ● New Integration Routes › POST /api/integrations/disconnect › should successfully disconnect from platform

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      264 |         .send({ platform: 'instagram' });
      265 |
    > 266 |       expect(response.status).toBe(200);
          |                               ^
      267 |       expect(response.body.success).toBe(true);
      268 |       expect(response.body.data.platform).toBe('instagram');
      269 |       expect(response.body.data.status).toBe('disconnected');

      at Object.toBe (tests/unit/routes/integrations-new.test.js:266:31)

  ● New Integration Routes › Integration flow testing › should handle complete connect-import-disconnect flow

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      281 |         .send({ platform });
      282 |
    > 283 |       expect(connectResponse.status).toBe(200);
          |                                      ^
      284 |       expect(connectResponse.body.data.status).toBe('connected');
      285 |
      286 |       // 2. Import

      at Object.toBe (tests/unit/routes/integrations-new.test.js:283:38)

FAIL tests/unit/routes/style-profile.test.js
  ● Style Profile Routes › GET /api/style-profile/status › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      33 |         .get('/api/style-profile/status');
      34 |
    > 35 |       expect(response.status).toBe(401);
         |                               ^
      36 |     });
      37 |
      38 |     it('should return no access for free user', async () => {

      at Object.toBe (tests/unit/routes/style-profile.test.js:35:31)

  ● Style Profile Routes › GET /api/style-profile/status › should return no access for free user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      41 |         .set('Authorization', `Bearer ${authToken}`);
      42 |
    > 43 |       expect(response.status).toBe(200);
         |                               ^
      44 |       expect(response.body.success).toBe(true);
      45 |       expect(response.body.data.hasAccess).toBe(false);
      46 |       expect(response.body.data.available).toBe(false);

      at Object.toBe (tests/unit/routes/style-profile.test.js:43:31)

  ● Style Profile Routes › GET /api/style-profile/status › should return access for Creator+ user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      52 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      53 |
    > 54 |       expect(response.status).toBe(200);
         |                               ^
      55 |       expect(response.body.success).toBe(true);
      56 |       expect(response.body.data.hasAccess).toBe(true);
      57 |       expect(response.body.data.available).toBe(true);

      at Object.toBe (tests/unit/routes/style-profile.test.js:54:31)

  ● Style Profile Routes › GET /api/style-profile › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      65 |         .get('/api/style-profile');
      66 |
    > 67 |       expect(response.status).toBe(401);
         |                               ^
      68 |     });
      69 |
      70 |     it('should deny access to free users', async () => {

      at Object.toBe (tests/unit/routes/style-profile.test.js:67:31)

  ● Style Profile Routes › GET /api/style-profile › should deny access to free users

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      73 |         .set('Authorization', `Bearer ${authToken}`);
      74 |
    > 75 |       expect(response.status).toBe(403);
         |                               ^
      76 |       expect(response.body.error).toContain('Creator+ plan');
      77 |       expect(response.body.upgrade).toBe(true);
      78 |     });

      at Object.toBe (tests/unit/routes/style-profile.test.js:75:31)

  ● Style Profile Routes › GET /api/style-profile › should return no profile for Creator+ user without generated profile

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      83 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      84 |
    > 85 |       expect(response.status).toBe(200);
         |                               ^
      86 |       expect(response.body.success).toBe(true);
      87 |       expect(response.body.data.available).toBe(false);
      88 |       expect(response.body.data.message).toContain('No style profile generated yet');

      at Object.toBe (tests/unit/routes/style-profile.test.js:85:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

       96 |         .send({ platforms: ['twitter'] });
       97 |
    >  98 |       expect(response.status).toBe(401);
          |                               ^
       99 |     });
      100 |
      101 |     it('should deny access to free users', async () => {

      at Object.toBe (tests/unit/routes/style-profile.test.js:98:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should deny access to free users

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      105 |         .send({ platforms: ['twitter'] });
      106 |
    > 107 |       expect(response.status).toBe(403);
          |                               ^
      108 |       expect(response.body.error).toContain('Creator+ plan');
      109 |       expect(response.body.upgrade).toBe(true);
      110 |     });

      at Object.toBe (tests/unit/routes/style-profile.test.js:107:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should require platforms parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      116 |         .send({});
      117 |
    > 118 |       expect(response.status).toBe(400);
          |                               ^
      119 |       expect(response.body.error).toContain('At least one platform is required');
      120 |       expect(response.body.example).toHaveProperty('platforms');
      121 |     });

      at Object.toBe (tests/unit/routes/style-profile.test.js:118:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should require valid platforms array

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      127 |         .send({ platforms: 'twitter' });
      128 |
    > 129 |       expect(response.status).toBe(400);
          |                               ^
      130 |       expect(response.body.error).toContain('At least one platform is required');
      131 |     });
      132 |

      at Object.toBe (tests/unit/routes/style-profile.test.js:129:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should successfully generate style profile

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      137 |         .send({ platforms: ['twitter'], maxItemsPerPlatform: 300 });
      138 |
    > 139 |       expect(response.status).toBe(200);
          |                               ^
      140 |       expect(response.body.success).toBe(true);
      141 |       expect(response.body.data.message).toContain('successfully');
      142 |       expect(response.body.data.profiles).toBeInstanceOf(Array);

      at Object.toBe (tests/unit/routes/style-profile.test.js:139:31)

  ● Style Profile Routes › POST /api/style-profile/generate › should generate multiple language profiles

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      177 |         .send({ platforms: ['twitter', 'instagram'] });
      178 |
    > 179 |       expect(response.status).toBe(200);
          |                               ^
      180 |       expect(response.body.data.profiles.length).toBeGreaterThanOrEqual(1);
      181 |       expect(response.body.data.sources).toHaveProperty('twitter');
      182 |       expect(response.body.data.sources).toHaveProperty('instagram');

      at Object.toBe (tests/unit/routes/style-profile.test.js:179:31)

  ● Style Profile Routes › GET /api/style-profile (with generated profile) › should return generated profile data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      190 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      191 |
    > 192 |       expect(response.status).toBe(200);
          |                               ^
      193 |       expect(response.body.success).toBe(true);
      194 |       expect(response.body.data.available).toBe(true);
      195 |       expect(response.body.data.profiles).toBeInstanceOf(Array);

      at Object.toBe (tests/unit/routes/style-profile.test.js:192:31)

  ● Style Profile Routes › GET /api/style-profile/preview/:lang › should require authentication

    TypeError: Cannot read properties of undefined (reading 'profiles')

      210 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      211 |       
    > 212 |       availableLanguage = profileResponse.body.data.profiles[0].lang;
          |                                                     ^
      213 |     });
      214 |
      215 |     it('should require authentication', async () => {

      at Object.profiles (tests/unit/routes/style-profile.test.js:212:53)

  ● Style Profile Routes › GET /api/style-profile/preview/:lang › should deny access to free users

    TypeError: Cannot read properties of undefined (reading 'profiles')

      210 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      211 |       
    > 212 |       availableLanguage = profileResponse.body.data.profiles[0].lang;
          |                                                     ^
      213 |     });
      214 |
      215 |     it('should require authentication', async () => {

      at Object.profiles (tests/unit/routes/style-profile.test.js:212:53)

  ● Style Profile Routes › GET /api/style-profile/preview/:lang › should return 404 for non-existent profile

    TypeError: Cannot read properties of undefined (reading 'profiles')

      210 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      211 |       
    > 212 |       availableLanguage = profileResponse.body.data.profiles[0].lang;
          |                                                     ^
      213 |     });
      214 |
      215 |     it('should require authentication', async () => {

      at Object.profiles (tests/unit/routes/style-profile.test.js:212:53)

  ● Style Profile Routes › GET /api/style-profile/preview/:lang › should return language profile preview

    TypeError: Cannot read properties of undefined (reading 'profiles')

      210 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      211 |       
    > 212 |       availableLanguage = profileResponse.body.data.profiles[0].lang;
          |                                                     ^
      213 |     });
      214 |
      215 |     it('should require authentication', async () => {

      at Object.profiles (tests/unit/routes/style-profile.test.js:212:53)

  ● Style Profile Routes › GET /api/style-profile/stats › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      261 |         .get('/api/style-profile/stats');
      262 |
    > 263 |       expect(response.status).toBe(401);
          |                               ^
      264 |     });
      265 |
      266 |     it('should deny access to free users', async () => {

      at Object.toBe (tests/unit/routes/style-profile.test.js:263:31)

  ● Style Profile Routes › GET /api/style-profile/stats › should deny access to free users

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      269 |         .set('Authorization', `Bearer ${authToken}`);
      270 |
    > 271 |       expect(response.status).toBe(403);
          |                               ^
      272 |       expect(response.body.error).toContain('Creator+ plan');
      273 |     });
      274 |

      at Object.toBe (tests/unit/routes/style-profile.test.js:271:31)

  ● Style Profile Routes › GET /api/style-profile/stats › should return profile statistics

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      278 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      279 |
    > 280 |       expect(response.status).toBe(200);
          |                               ^
      281 |       expect(response.body.success).toBe(true);
      282 |       expect(response.body.data.hasProfile).toBe(true);
      283 |       expect(response.body.data.languageCount).toBeGreaterThan(0);

      at Object.toBe (tests/unit/routes/style-profile.test.js:280:31)

  ● Style Profile Routes › DELETE /api/style-profile › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      294 |         .delete('/api/style-profile');
      295 |
    > 296 |       expect(response.status).toBe(401);
          |                               ^
      297 |     });
      298 |
      299 |     it('should deny access to free users', async () => {

      at Object.toBe (tests/unit/routes/style-profile.test.js:296:31)

  ● Style Profile Routes › DELETE /api/style-profile › should deny access to free users

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 500

      302 |         .set('Authorization', `Bearer ${authToken}`);
      303 |
    > 304 |       expect(response.status).toBe(403);
          |                               ^
      305 |       expect(response.body.error).toContain('Creator+ plan');
      306 |     });
      307 |

      at Object.toBe (tests/unit/routes/style-profile.test.js:304:31)

  ● Style Profile Routes › DELETE /api/style-profile › should successfully delete existing profile

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      311 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      312 |
    > 313 |       expect(response.status).toBe(200);
          |                               ^
      314 |       expect(response.body.success).toBe(true);
      315 |       expect(response.body.data.message).toContain('deleted successfully');
      316 |

      at Object.toBe (tests/unit/routes/style-profile.test.js:313:31)

  ● Style Profile Routes › DELETE /api/style-profile › should return 404 when deleting non-existent profile

    expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 500

      328 |         .set('Authorization', `Bearer ${creatorAuthToken}`);
      329 |
    > 330 |       expect(response.status).toBe(404);
          |                               ^
      331 |       expect(response.body.error).toContain('No style profile found to delete');
      332 |     });
      333 |   });

      at Object.toBe (tests/unit/routes/style-profile.test.js:330:31)

  ● Style Profile Routes › Feature flag integration › should respect ENABLE_STYLE_PROFILE flag when disabled

    TypeError: flags.reload is not a function

      341 |       // Reload flags
      342 |       const { flags } = require('../../../src/config/flags');
    > 343 |       flags.reload();
          |             ^
      344 |
      345 |       const response = await request(app)
      346 |         .post('/api/style-profile/generate')

      at Object.reload (tests/unit/routes/style-profile.test.js:343:13)

  ● Style Profile Routes › Error handling and edge cases › should handle insufficient content for generation

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      380 |         .send({ platforms: ['twitter'] });
      381 |
    > 382 |       expect(response.status).toBe(400);
          |                               ^
      383 |       expect(response.body.error).toContain('No imported content found');
      384 |     });
      385 |

      at Object.toBe (tests/unit/routes/style-profile.test.js:382:31)

  ● Style Profile Routes › Error handling and edge cases › should handle generation with minimal content

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      408 |         .send({ platforms: ['twitter'] });
      409 |
    > 410 |       expect(response.status).toBe(400);
          |                               ^
      411 |       expect(response.body.error).toContain('Insufficient content');
      412 |       expect(response.body.details).toContain('50+ imported items');
      413 |     });

      at Object.toBe (tests/unit/routes/style-profile.test.js:410:31)

FAIL tests/unit/auth/flows.test.js
  ● Auth Flows › Login Flow › should handle successful login

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Login Flow › should handle login failure

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Login Flow › should handle network error during login

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Registration Flow › should handle successful registration

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Registration Flow › should handle registration failure - duplicate email

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Password Recovery Flow › should handle password recovery request

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Password Recovery Flow › should handle password recovery with generic message for security

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Magic Link Flow › should handle magic link request

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › User Redirection Logic › should redirect admin users to admin panel

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › User Redirection Logic › should redirect regular users to dashboard

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › User Redirection Logic › should not redirect if user is not authenticated

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › User Redirection Logic › should handle missing user data gracefully

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › OAuth Callback Flow › should process OAuth callback successfully

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › OAuth Callback Flow › should handle malformed OAuth data

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › OAuth Callback Flow › should reject invalid OAuth callback type

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Session Management › should clear all session data on logout

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Session Management › should validate active session

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Session Management › should invalidate expired session

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

  ● Auth Flows › Session Management › should validate session without expiration time

    TypeError: window.location.assign.mockClear is not a function

      11 |         window.location.search = '';
      12 |         fetch.mockClear();
    > 13 |         window.location.assign.mockClear();
         |                                ^
      14 |         window.location.replace.mockClear();
      15 |         jest.clearAllTimers();
      16 |         jest.useFakeTimers();

      at Object.mockClear (tests/unit/auth/flows.test.js:13:32)

FAIL tests/unit/workers/FetchCommentsWorker.test.js
  ● FetchCommentsWorker › constructor › should initialize worker with correct type

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › processJob › should process Twitter comment fetching job

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › processJob › should process YouTube comment fetching job

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › processJob › should handle duplicate comments

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › processJob › should handle platform errors gracefully

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › processJob › should handle unsupported platform

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › storeComment › should store new comment successfully

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › storeComment › should detect duplicate comment

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › storeComment › should handle database errors

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › queueForAnalysis › should queue comment for toxicity analysis

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › queueForAnalysis › should handle queue errors

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › initializePlatformServices › should initialize all platform services

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › initializePlatformServices › should handle initialization errors

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › normalizeCommentData › should normalize Twitter comment data

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › normalizeCommentData › should normalize YouTube comment data

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › error handling › should handle malformed job data

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

  ● FetchCommentsWorker › error handling › should handle empty comment responses

    TypeError: this.initializePlatformClients is not a function

      28 |     
      29 |     // Initialize platform clients
    > 30 |     this.initializePlatformClients();
         |          ^
      31 |   }
      32 |   
      33 |   /**

      at new initializePlatformClients (src/workers/FetchCommentsWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/FetchCommentsWorker.test.js:86:14)

FAIL tests/unit/routes/plan.test.js
  ● Plan Routes › GET /api/plan/available › should return all available plans

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      15 |         .get('/api/plan/available');
      16 |
    > 17 |       expect(response.status).toBe(200);
         |                               ^
      18 |       expect(response.body.success).toBe(true);
      19 |       expect(response.body.data.plans).toBeInstanceOf(Array);
      20 |       expect(response.body.data.plans.length).toBe(3);

      at Object.toBe (tests/unit/routes/plan.test.js:17:31)

  ● Plan Routes › GET /api/plan/current › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      41 |         .get('/api/plan/current');
      42 |
    > 43 |       expect(response.status).toBe(401);
         |                               ^
      44 |     });
      45 |
      46 |     it('should return free plan for new user', async () => {

      at Object.toBe (tests/unit/routes/plan.test.js:43:31)

  ● Plan Routes › GET /api/plan/current › should return free plan for new user

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      49 |         .set('Authorization', `Bearer ${authToken}`);
      50 |
    > 51 |       expect(response.status).toBe(200);
         |                               ^
      52 |       expect(response.body.success).toBe(true);
      53 |       expect(response.body.data.plan).toBe('free');
      54 |       expect(response.body.data.canAccessStyleProfile).toBe(false);

      at Object.toBe (tests/unit/routes/plan.test.js:51:31)

  ● Plan Routes › POST /api/plan/select › should require authentication

    expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      62 |         .send({ plan: 'creator_plus' });
      63 |
    > 64 |       expect(response.status).toBe(401);
         |                               ^
      65 |     });
      66 |
      67 |     it('should require valid plan', async () => {

      at Object.toBe (tests/unit/routes/plan.test.js:64:31)

  ● Plan Routes › POST /api/plan/select › should require valid plan

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      71 |         .send({ plan: 'invalid_plan' });
      72 |
    > 73 |       expect(response.status).toBe(400);
         |                               ^
      74 |       expect(response.body.error).toContain('Invalid plan selected');
      75 |     });
      76 |

      at Object.toBe (tests/unit/routes/plan.test.js:73:31)

  ● Plan Routes › POST /api/plan/select › should successfully select Creator+ plan

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      81 |         .send({ plan: 'creator_plus' });
      82 |
    > 83 |       expect(response.status).toBe(200);
         |                               ^
      84 |       expect(response.body.success).toBe(true);
      85 |       expect(response.body.data.plan).toBe('creator_plus');
      86 |       expect(response.body.data.details.features.styleProfile).toBe(true);

      at Object.toBe (tests/unit/routes/plan.test.js:83:31)

  ● Plan Routes › POST /api/plan/select › should successfully select Pro plan

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      93 |         .send({ plan: 'pro' });
      94 |
    > 95 |       expect(response.status).toBe(200);
         |                               ^
      96 |       expect(response.body.success).toBe(true);
      97 |       expect(response.body.data.plan).toBe('pro');
      98 |       expect(response.body.data.details.features.styleProfile).toBe(false);

      at Object.toBe (tests/unit/routes/plan.test.js:95:31)

  ● Plan Routes › GET /api/plan/features › should return feature comparison

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      105 |         .get('/api/plan/features');
      106 |
    > 107 |       expect(response.status).toBe(200);
          |                               ^
      108 |       expect(response.body.success).toBe(true);
      109 |       expect(response.body.data.comparison).toBeInstanceOf(Array);
      110 |       expect(response.body.data.comparison.length).toBe(3);

      at Object.toBe (tests/unit/routes/plan.test.js:107:31)

FAIL tests/unit/routes/billing.test.js
  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should create checkout session successfully for Pro plan

    expected 200 "OK", got 503 "Service Unavailable"

      163 |                 .post('/api/billing/create-checkout-session')
      164 |                 .send({ lookupKey: 'plan_pro' })
    > 165 |                 .expect(200);
          |                  ^
      166 |
      167 |             expect(response.body.success).toBe(true);
      168 |             expect(response.body.data.url).toBe('https://checkout.stripe.com/pay/cs_test123');

      at Object.expect (tests/unit/routes/billing.test.js:165:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should return error for missing lookupKey

    expected 400 "Bad Request", got 503 "Service Unavailable"

      180 |                 .post('/api/billing/create-checkout-session')
      181 |                 .send({})
    > 182 |                 .expect(400);
          |                  ^
      183 |
      184 |             expect(response.body.success).toBe(false);
      185 |             expect(response.body.error).toBe('plan is required (free|pro|creator_plus)');

      at Object.expect (tests/unit/routes/billing.test.js:182:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should return error for invalid lookupKey

    expected 400 "Bad Request", got 503 "Service Unavailable"

      190 |                 .post('/api/billing/create-checkout-session')
      191 |                 .send({ lookupKey: 'invalid_key' })
    > 192 |                 .expect(400);
          |                  ^
      193 |
      194 |             expect(response.body.success).toBe(false);
      195 |             expect(response.body.error).toBe('Invalid plan specified');

      at Object.expect (tests/unit/routes/billing.test.js:192:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should use existing customer if available

    expected 200 "OK", got 503 "Service Unavailable"

      227 |                 .post('/api/billing/create-checkout-session')
      228 |                 .send({ lookupKey: 'plan_pro' })
    > 229 |                 .expect(200);
          |                  ^
      230 |
      231 |             expect(response.body.success).toBe(true);
      232 |             expect(mockStripe.customers.create).not.toHaveBeenCalled();

      at Object.expect (tests/unit/routes/billing.test.js:229:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /api/billing/create-portal-session › should create portal session successfully

    expected 200 "OK", got 503 "Service Unavailable"

      251 |             const response = await request(app)
      252 |                 .post('/api/billing/create-portal-session')
    > 253 |                 .expect(200);
          |                  ^
      254 |
      255 |             expect(response.body.success).toBe(true);
      256 |             expect(response.body.data.url).toBe('https://billing.stripe.com/portal/bps_test123');

      at Object.expect (tests/unit/routes/billing.test.js:253:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /api/billing/create-portal-session › should return error when no subscription found

    expected 400 "Bad Request", got 503 "Service Unavailable"

      269 |             const response = await request(app)
      270 |                 .post('/api/billing/create-portal-session')
    > 271 |                 .expect(400);
          |                  ^
      272 |
      273 |             expect(response.body.success).toBe(false);
      274 |             expect(response.body.error).toBe('No active subscription found');

      at Object.expect (tests/unit/routes/billing.test.js:271:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › GET /api/billing/subscription › should return user subscription details

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 3

      Object {
    -   "plan": "pro",
    +   "plan": "free",
        "status": "active",
    -   "stripe_customer_id": "cus_test123",
    -   "stripe_subscription_id": "sub_test123",
    +   "stripe_customer_id": null,
    +   "stripe_subscription_id": null,
        "user_id": "test-user-id",
      }

      296 |
      297 |             expect(response.body.success).toBe(true);
    > 298 |             expect(response.body.data.subscription).toEqual(mockSubscription);
          |                                                     ^
      299 |             expect(response.body.data.planConfig).toBeDefined();
      300 |             expect(response.body.data.planConfig.name).toBe('Pro');
      301 |         });

      at Object.toEqual (tests/unit/routes/billing.test.js:298:53)

  ● Billing Routes Tests › GET /api/billing/subscription › should return error when database fails

    expected 500 "Internal Server Error", got 200 "OK"

      309 |             const response = await request(app)
      310 |                 .get('/api/billing/subscription')
    > 311 |                 .expect(500);
          |                  ^
      312 |
      313 |             expect(response.body.success).toBe(false);
      314 |             expect(response.body.error).toBe('Failed to fetch subscription');

      at Object.expect (tests/unit/routes/billing.test.js:311:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /webhooks/stripe › should handle checkout.session.completed event

    expected 200 "OK", got 503 "Service Unavailable"

      363 |                 .set('stripe-signature', mockSignature)
      364 |                 .send(Buffer.from(JSON.stringify(mockEvent)))
    > 365 |                 .expect(200);
          |                  ^
      366 |
      367 |             expect(response.body.received).toBe(true);
      368 |             expect(mockSupabaseServiceClient.upsert).toHaveBeenCalledWith({

      at Object.expect (tests/unit/routes/billing.test.js:365:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /webhooks/stripe › should return error for invalid webhook signature

    expected 400 "Bad Request", got 503 "Service Unavailable"

      399 |                 .set('stripe-signature', 'invalid-signature')
      400 |                 .send(Buffer.from('{}'))
    > 401 |                 .expect(400);
          |                  ^
      402 |
      403 |             expect(response.text).toContain('Webhook Error: Invalid signature');
      404 |         });

      at Object.expect (tests/unit/routes/billing.test.js:401:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › POST /webhooks/stripe › should handle unrecognized webhook events

    expected 200 "OK", got 503 "Service Unavailable"

      418 |                 .set('stripe-signature', mockSignature)
      419 |                 .send(Buffer.from(JSON.stringify(mockEvent)))
    > 420 |                 .expect(200);
          |                  ^
      421 |
      422 |             expect(response.body.received).toBe(true);
      423 |         });

      at Object.expect (tests/unit/routes/billing.test.js:420:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › Error Handling › should handle Stripe API errors gracefully

    expected 500 "Internal Server Error", got 503 "Service Unavailable"

      440 |                 .post('/api/billing/create-checkout-session')
      441 |                 .send({ lookupKey: 'plan_pro' })
    > 442 |                 .expect(500);
          |                  ^
      443 |
      444 |             expect(response.body.success).toBe(false);
      445 |             expect(response.body.error).toBe('Failed to create checkout session');

      at Object.expect (tests/unit/routes/billing.test.js:442:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

  ● Billing Routes Tests › Error Handling › should handle database errors

    expected 500 "Internal Server Error", got 200 "OK"

      454 |             const response = await request(app)
      455 |                 .get('/api/billing/subscription')
    > 456 |                 .expect(500);
          |                  ^
      457 |
      458 |             expect(response.body.success).toBe(false);
      459 |             expect(response.body.error).toBe('Failed to fetch subscription details');

      at Object.expect (tests/unit/routes/billing.test.js:456:18)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)
      at node_modules/supertest/lib/test.js:365:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)
      at Test.assert (node_modules/supertest/lib/test.js:195:23)
      at localAssert (node_modules/supertest/lib/test.js:138:14)
      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)

FAIL tests/integration/adminEndpoints.test.js
  ● Admin Endpoints Integration Tests › GET /api/auth/admin/users › should return users list for admin

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › GET /api/auth/admin/users › should deny access to regular users

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › GET /api/auth/admin/users › should require authentication

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/update-plan › should update user plan for admin

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/update-plan › should validate plan value

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/update-plan › should require both userId and newPlan

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/update-plan › should deny access to regular users

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/reset-password › should send password reset email for admin

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/reset-password › should require userId

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

  ● Admin Endpoints Integration Tests › POST /api/auth/admin/users/reset-password › should deny access to regular users

    TypeError: Cannot read properties of undefined (reading 'access_token')

      225 |       });
      226 |     
    > 227 |     adminToken = adminLogin.body.data.session.access_token;
          |                                               ^
      228 |
      229 |     // Login regular user
      230 |     const userLogin = await request(app)

      at Object.access_token (tests/integration/adminEndpoints.test.js:227:47)

FAIL tests/unit/services/queueService.test.js
  ● QueueService › initialization › should initialize with Redis available

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      93 |       await queueService.initialize();
      94 |
    > 95 |       expect(queueService.isRedisAvailable).toBe(true);
         |                                             ^
      96 |       expect(queueService.isDatabaseAvailable).toBe(true);
      97 |     });
      98 |

      at Object.toBe (tests/unit/services/queueService.test.js:95:45)

  ● QueueService › initialization › should fallback to database only when Redis unavailable

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      103 |
      104 |       expect(queueService.isRedisAvailable).toBe(false);
    > 105 |       expect(queueService.isDatabaseAvailable).toBe(true);
          |                                                ^
      106 |     });
      107 |   });
      108 |

      at Object.toBe (tests/unit/services/queueService.test.js:105:48)

  ● QueueService › addJob › should add job to Redis queue with correct priority

    TypeError: Cannot read properties of null (reading 'success')

      125 |       const result = await queueService.addJob('fetch_comments', jobData, 2);
      126 |
    > 127 |       expect(result.success).toBe(true);
          |                     ^
      128 |       expect(result.jobId).toBeDefined();
      129 |       expect(result.queuedTo).toBe('redis');
      130 |       expect(mockRedis.lpush).toHaveBeenCalledWith(

      at Object.success (tests/unit/services/queueService.test.js:127:21)

  ● QueueService › addJob › should fallback to database when Redis fails

    TypeError: Cannot read properties of null (reading 'from')

      142 |
      143 |       mockRedis.lpush.mockRejectedValue(new Error('Redis error'));
    > 144 |       mockSupabase.from.mockReturnValue({
          |                    ^
      145 |         insert: jest.fn().mockReturnValue({
      146 |           select: jest.fn().mockReturnValue({
      147 |             single: jest.fn().mockResolvedValue({

      at Object.from (tests/unit/services/queueService.test.js:144:20)

  ● QueueService › addJob › should add Shield job with high priority

    TypeError: Cannot read properties of null (reading 'success')

      172 |       const result = await queueService.addJob('shield_action', jobData, 1);
      173 |
    > 174 |       expect(result.success).toBe(true);
          |                     ^
      175 |       expect(mockRedis.lpush).toHaveBeenCalledWith(
      176 |         'roastr:queue:shield_action:priority:1',
      177 |         expect.any(String)

      at Object.success (tests/unit/services/queueService.test.js:174:21)

  ● QueueService › getNextJob › should get job from Redis queue by priority

    TypeError: Cannot read properties of null (reading 'id')

      205 |
      206 |       expect(result).toBeDefined();
    > 207 |       expect(result.id).toBe('job-123');
          |                     ^
      208 |       expect(result.organization_id).toBe('org-123');
      209 |       expect(mockRedis.brpop).toHaveBeenCalledTimes(2);
      210 |     });

      at Object.id (tests/unit/services/queueService.test.js:207:21)

  ● QueueService › getNextJob › should get job from database when Redis returns null

    TypeError: Cannot read properties of null (reading 'from')

      222 |       };
      223 |
    > 224 |       mockSupabase.from.mockReturnValue({
          |                    ^
      225 |         select: jest.fn().mockReturnValue({
      226 |           eq: jest.fn().mockReturnValue({
      227 |             eq: jest.fn().mockReturnValue({

      at Object.from (tests/unit/services/queueService.test.js:224:20)

  ● QueueService › getNextJob › should return null when no jobs available

    TypeError: Cannot read properties of null (reading 'from')

      273 |       mockRedis.brpop.mockResolvedValue(null);
      274 |       
    > 275 |       mockSupabase.from.mockReturnValue({
          |                    ^
      276 |         select: jest.fn().mockReturnValue({
      277 |           eq: jest.fn().mockReturnValue({
      278 |             eq: jest.fn().mockReturnValue({

      at Object.from (tests/unit/services/queueService.test.js:275:20)

  ● QueueService › completeJob › should mark job as completed in database

    TypeError: Cannot read properties of null (reading 'from')

      304 |       const result = { processed: 5, errors: 0 };
      305 |
    > 306 |       mockSupabase.from.mockReturnValue({
          |                    ^
      307 |         update: jest.fn().mockReturnValue({
      308 |           eq: jest.fn().mockResolvedValue({
      309 |             error: null

      at Object.from (tests/unit/services/queueService.test.js:306:20)

  ● QueueService › failJob › should handle job failure with retry logic

    TypeError: Cannot read properties of null (reading 'from')

      329 |       const error = new Error('Processing failed');
      330 |
    > 331 |       mockSupabase.from.mockReturnValue({
          |                    ^
      332 |         update: jest.fn().mockReturnValue({
      333 |           eq: jest.fn().mockResolvedValue({
      334 |             error: null

      at Object.from (tests/unit/services/queueService.test.js:331:20)

  ● QueueService › failJob › should move job to DLQ after max attempts

    TypeError: Cannot read properties of null (reading 'from')

      356 |
      357 |       mockRedis.lpush.mockResolvedValue(1);
    > 358 |       mockSupabase.from.mockReturnValue({
          |                    ^
      359 |         update: jest.fn().mockReturnValue({
      360 |           eq: jest.fn().mockResolvedValue({
      361 |             error: null

      at Object.from (tests/unit/services/queueService.test.js:358:20)

  ● QueueService › getQueueStats › should return comprehensive queue statistics

    TypeError: Cannot read properties of null (reading 'from')

      388 |
      389 |       // Mock database stats
    > 390 |       mockSupabase.from.mockReturnValue({
          |                    ^
      391 |         select: jest.fn().mockResolvedValue({
      392 |           data: [
      393 |             { status: 'pending', job_type: 'fetch_comments', priority: 1, count: 5 },

      at Object.from (tests/unit/services/queueService.test.js:390:20)

  ● QueueService › getQueueStats › should handle database-only statistics

    TypeError: Cannot read properties of null (reading 'from')

      412 |       queueService.isRedisAvailable = false;
      413 |
    > 414 |       mockSupabase.from.mockReturnValue({
          |                    ^
      415 |         select: jest.fn().mockResolvedValue({
      416 |           data: [
      417 |             { status: 'pending', job_type: 'fetch_comments', priority: 2, count: 3 }

      at Object.from (tests/unit/services/queueService.test.js:414:20)

  ● QueueService › error handling › should handle Redis connection errors gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      437 |
      438 |       expect(queueService.isRedisAvailable).toBe(false);
    > 439 |       expect(queueService.isDatabaseAvailable).toBe(true);
          |                                                ^
      440 |     });
      441 |
      442 |     test('should handle malformed job data', async () => {

      at Object.toBe (tests/unit/services/queueService.test.js:439:48)

  ● QueueService › queue key generation › should generate correct queue keys for different priorities

    expect(received).toBe(expected) // Object.is equality

    Expected: "roastr:queue:fetch_comments:priority:1"
    Received: "roastr:jobs:fetch_comments:p1"

      457 |       const key2 = queueService.getQueueKey('shield_action', 5);
      458 |
    > 459 |       expect(key1).toBe('roastr:queue:fetch_comments:priority:1');
          |                    ^
      460 |       expect(key2).toBe('roastr:queue:shield_action:priority:5');
      461 |     });
      462 |

      at Object.toBe (tests/unit/services/queueService.test.js:459:20)

  ● QueueService › queue key generation › should handle default priority

    expect(received).toBe(expected) // Object.is equality

    Expected: "roastr:queue:analyze_toxicity:priority:3"
    Received: "roastr:jobs:analyze_toxicity:p5"

      464 |       const key = queueService.getQueueKey('analyze_toxicity');
      465 |
    > 466 |       expect(key).toBe('roastr:queue:analyze_toxicity:priority:3');
          |                   ^
      467 |     });
      468 |   });
      469 |

      at Object.toBe (tests/unit/services/queueService.test.js:466:19)

FAIL tests/unit/workers/AnalyzeToxicityWorker.test.js
  ● AnalyzeToxicityWorker › constructor › should initialize worker with correct type

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processJob › should analyze toxicity using Perspective API

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processJob › should fallback to OpenAI when Perspective API fails

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processJob › should use pattern-based fallback when both APIs fail

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processJob › should handle non-toxic content

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPerspective › should analyze text with Perspective API

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPerspective › should handle Perspective API errors

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithOpenAI › should analyze text with OpenAI moderation

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPatterns › should detect profanity patterns

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPatterns › should detect threat patterns

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPatterns › should detect hate speech patterns

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPatterns › should handle clean content

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › analyzeWithPatterns › should be case insensitive

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › updateCommentAnalysis › should update comment with analysis results

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › updateCommentAnalysis › should handle database errors

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processWithShield › should process content through Shield when enabled

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › processWithShield › should skip Shield processing when disabled

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › error handling › should handle malformed job data

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › error handling › should handle empty text content

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

  ● AnalyzeToxicityWorker › error handling › should handle Shield service errors gracefully

    TypeError: this.initializeToxicityServices is not a function

      28 |     
      29 |     // Initialize toxicity detection services
    > 30 |     this.initializeToxicityServices();
         |          ^
      31 |     
      32 |     // Toxicity thresholds
      33 |     this.thresholds = {

      at new initializeToxicityServices (src/workers/AnalyzeToxicityWorker.js:30:10)
      at Object.<anonymous> (tests/unit/workers/AnalyzeToxicityWorker.test.js:87:14)

FAIL tests/integration/authMeEndpoint.test.js
  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should return user profile with valid token

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should return 401 without token

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should return 401 with invalid token

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should return 401 with malformed Authorization header

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should include all required user fields

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

  ● /api/auth/me Endpoint Integration Tests › GET /api/auth/me › should include organization and integration data

    TypeError: Cannot read properties of undefined (reading 'access_token')

      179 |       });
      180 |     
    > 181 |     authToken = loginResponse.body.data.session.access_token;
          |                                                 ^
      182 |   });
      183 |
      184 |   describe('GET /api/auth/me', () => {

      at Object.access_token (tests/integration/authMeEndpoint.test.js:181:49)

FAIL tests/unit/workers/GenerateReplyWorker.test.js
  ● GenerateReplyWorker › constructor › should initialize worker with correct type

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › processJob › should generate roast reply for toxic comment

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › processJob › should handle cost limit exceeded

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › processJob › should handle low toxicity comments

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › processJob › should handle auto-posting for eligible platforms

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › generateRoast › should generate roast with custom parameters

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › generateRoast › should handle OpenAI generation errors

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › storeRoast › should store roast in database

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › storeRoast › should handle database storage errors

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › shouldGenerateRoast › should allow roast for high toxicity

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › shouldGenerateRoast › should allow roast for medium toxicity with categories

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › shouldGenerateRoast › should reject roast for low toxicity

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › shouldGenerateRoast › should reject roast for medium toxicity without categories

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › validateRoastLength › should pass Twitter length validation

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › validateRoastLength › should fail Twitter length validation for long text

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › validateRoastLength › should pass YouTube length validation

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › validateRoastLength › should fail YouTube length validation for very long text

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › getOrganizationSettings › should fetch organization roast settings

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › getOrganizationSettings › should return default settings when organization not found

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › error handling › should handle malformed job data

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › error handling › should handle comment not found

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

  ● GenerateReplyWorker › error handling › should handle roast generation failures gracefully

    TypeError: this.initializeOpenAI is not a function

      26 |     
      27 |     // Initialize OpenAI client
    > 28 |     this.initializeOpenAI();
         |          ^
      29 |     
      30 |     // Roast templates for fallback
      31 |     this.initializeTemplates();

      at new initializeOpenAI (src/workers/GenerateReplyWorker.js:28:10)
      at Object.<anonymous> (tests/unit/workers/GenerateReplyWorker.test.js:78:14)

FAIL tests/unit/config/__tests__/flags.test.js
  ● Feature Flags Configuration › Flag loading from environment variables › loads ENABLE_RQC flag from environment

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      21 |       const testFlags = new FeatureFlags();
      22 |       
    > 23 |       expect(testFlags.isEnabled('ENABLE_RQC')).toBe(true);
         |                                                 ^
      24 |       
      25 |       // Restore
      26 |       process.env = originalEnv;

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:23:49)

  ● Feature Flags Configuration › Flag loading from environment variables › loads VERBOSE_LOGS flag from environment

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      51 |       const testFlags = new FeatureFlags();
      52 |       
    > 53 |       expect(testFlags.isEnabled('VERBOSE_LOGS')).toBe(true);
         |                                                   ^
      54 |       
      55 |       process.env = originalEnv;
      56 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:53:51)

  ● Feature Flags Configuration › Flag loading from environment variables › loads MOCK_MODE flag from environment

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      80 |       const testFlags = new FeatureFlags();
      81 |       
    > 82 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);
         |                                                ^
      83 |       
      84 |       process.env = originalEnv;
      85 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:82:48)

  ● Feature Flags Configuration › mock mode detection › detects missing API keys for mock mode

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

       99 |       const testFlags = new FeatureFlags();
      100 |       
    > 101 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);
          |                                                ^
      102 |       
      103 |       process.env = originalEnv;
      104 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:101:48)

  ● Feature Flags Configuration › mock mode detection › uses real mode when all critical API keys are present

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      122 |       
      123 |       // In mock test environment, MOCK_MODE should be enabled
    > 124 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);
          |                                                ^
      125 |       
      126 |       process.env = originalEnv;
      127 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:124:48)

  ● Feature Flags Configuration › mock mode detection › detects partial API keys and uses mock mode

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      142 |       const testFlags = new FeatureFlags();
      143 |       
    > 144 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);
          |                                                ^
      145 |       
      146 |       process.env = originalEnv;
      147 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:144:48)

  ● Feature Flags Configuration › mock mode detection › respects explicit MOCK_MODE=true

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      162 |       const testFlags = new FeatureFlags();
      163 |       
    > 164 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);
          |                                                ^
      165 |       
      166 |       process.env = originalEnv;
      167 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:164:48)

  ● Feature Flags Configuration › API integrations detection › detects missing OpenAI key

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      193 |       const testFlags = new FeatureFlags();
      194 |       
    > 195 |       expect(testFlags.isEnabled('ENABLE_REAL_OPENAI')).toBe(false);
          |                                                         ^
      196 |       
      197 |       process.env = originalEnv;
      198 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:195:57)

  ● Feature Flags Configuration › API integrations detection › detects Twitter API keys

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      232 |       const testFlags = new FeatureFlags();
      233 |       
    > 234 |       expect(testFlags.isEnabled('ENABLE_REAL_TWITTER')).toBe(true);
          |                                                          ^
      235 |       
      236 |       process.env = originalEnv;
      237 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:234:58)

  ● Feature Flags Configuration › Boolean parsing and flag methods › parses "true" string as boolean true

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      248 |       const testFlags = new FeatureFlags();
      249 |       
    > 250 |       expect(testFlags.isEnabled('ENABLE_RQC')).toBe(true);
          |                                                 ^
      251 |       
      252 |       process.env = originalEnv;
      253 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:250:49)

  ● Feature Flags Configuration › Flag object structure › exports flags instance with expected methods

    expect(received).toBe(expected) // Object.is equality

    Expected: "function"
    Received: "undefined"

      305 |       expect(typeof testInstance.isEnabled).toBe('function');
      306 |       expect(typeof testInstance.getAllFlags).toBe('function');
    > 307 |       expect(typeof testInstance.getServiceStatus).toBe('function');
          |                                                    ^
      308 |     });
      309 |
      310 |     test('isEnabled method works correctly', () => {

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:307:52)

  ● Feature Flags Configuration › Flag object structure › basic flag functionality works

    TypeError: testFlags.getServiceStatus is not a function

      326 |       expect(typeof testFlags.isEnabled('ENABLE_RQC')).toBe('boolean');
      327 |       expect(typeof testFlags.getAllFlags()).toBe('object');
    > 328 |       expect(typeof testFlags.getServiceStatus()).toBe('object');
          |                               ^
      329 |     });
      330 |   });
      331 |

      at Object.getServiceStatus (tests/unit/config/__tests__/flags.test.js:328:31)

  ● Feature Flags Configuration › Environment scenarios › development environment enables debug logs

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      340 |       const testFlags = new FeatureFlags();
      341 |       
    > 342 |       expect(testFlags.isEnabled('ENABLE_DEBUG_LOGS')).toBe(true);
          |                                                        ^
      343 |       
      344 |       process.env = originalEnv;
      345 |     });

      at Object.toBe (tests/unit/config/__tests__/flags.test.js:342:56)

FAIL tests/unit/middleware/rateLimiter.test.js
  ● Rate Limiter Middleware › getClientIP › should fall back to socket.remoteAddress

    TypeError: Cannot read properties of undefined (reading 'remoteAddress')

      222 | function getClientIP(req) {
      223 |   return req.ip || 
    > 224 |          req.connection.remoteAddress ||
          |                         ^
      225 |          req.socket.remoteAddress ||
      226 |          (req.connection.socket ? req.connection.socket.remoteAddress : null) ||
      227 |          '127.0.0.1';

      at remoteAddress (src/middleware/rateLimiter.js:224:25)
      at Object.getClientIP (tests/unit/middleware/rateLimiter.test.js:297:14)

  ● Rate Limiter Middleware › getClientIP › should fall back to connection.socket.remoteAddress

    TypeError: Cannot read properties of undefined (reading 'remoteAddress')

      223 |   return req.ip || 
      224 |          req.connection.remoteAddress ||
    > 225 |          req.socket.remoteAddress ||
          |                     ^
      226 |          (req.connection.socket ? req.connection.socket.remoteAddress : null) ||
      227 |          '127.0.0.1';
      228 | }

      at remoteAddress (src/middleware/rateLimiter.js:225:21)
      at Object.getClientIP (tests/unit/middleware/rateLimiter.test.js:306:14)

  ● Rate Limiter Middleware › getClientIP › should default to localhost when no IP found

    TypeError: Cannot read properties of undefined (reading 'remoteAddress')

      222 | function getClientIP(req) {
      223 |   return req.ip || 
    > 224 |          req.connection.remoteAddress ||
          |                         ^
      225 |          req.socket.remoteAddress ||
      226 |          (req.connection.socket ? req.connection.socket.remoteAddress : null) ||
      227 |          '127.0.0.1';

      at remoteAddress (src/middleware/rateLimiter.js:224:25)
      at Object.getClientIP (tests/unit/middleware/rateLimiter.test.js:311:14)

  ● Rate Limiter Middleware › getRateLimitMetrics endpoint › should deny access outside mock mode

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 403

    Number of calls: 0

      514 |       await getRateLimitMetrics(mockReq, mockRes);
      515 |
    > 516 |       expect(mockRes.status).toHaveBeenCalledWith(403);
          |                              ^
      517 |       expect(mockRes.json).toHaveBeenCalledWith({
      518 |         success: false,
      519 |         error: 'Metrics only available in mock mode'

      at Object.toHaveBeenCalledWith (tests/unit/middleware/rateLimiter.test.js:516:30)

  ● Rate Limiter Middleware › resetRateLimit endpoint › should deny access outside mock mode

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 403

    Number of calls: 0

      592 |       await resetRateLimit(mockReq, mockRes);
      593 |
    > 594 |       expect(mockRes.status).toHaveBeenCalledWith(403);
          |                              ^
      595 |       expect(mockRes.json).toHaveBeenCalledWith({
      596 |         success: false,
      597 |         error: 'Rate limit reset only available in mock mode'

      at Object.toHaveBeenCalledWith (tests/unit/middleware/rateLimiter.test.js:594:30)

  ● Rate Limiter Middleware › Error handling and edge cases › should handle missing request body

    TypeError: Cannot read properties of null (reading 'email')

      249 |
      250 |   const ip = getClientIP(req);
    > 251 |   const email = req.body.email || req.body.username || 'unknown';
          |                          ^
      252 |   
      253 |   if (!email || email === 'unknown') {
      254 |     return next();

      at email (src/middleware/rateLimiter.js:251:26)
      at Object.loginRateLimiter (tests/unit/middleware/rateLimiter.test.js:623:13)

  ● Rate Limiter Middleware › Error handling and edge cases › should handle store cleanup during operation

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 3

      718 |       // Should still work after cleanup
      719 |       const result = store.recordAttempt(key, ip);
    > 720 |       expect(result.attemptCount).toBe(1); // Fresh start due to cleanup or continuation
          |                                   ^
      721 |     });
      722 |   });
      723 | });

      at Object.toBe (tests/unit/middleware/rateLimiter.test.js:720:35)

FAIL tests/unit/middleware/sessionRefresh.test.js
  ● Session Refresh Middleware › sessionRefreshMiddleware › should handle refresh errors gracefully

    expect(jest.fn()).not.toHaveBeenCalled()

    Expected number of calls: 0
    Received number of calls: 1

    1: {"x-expires-at": 1755216810561, "x-new-access-token": "mock-refreshed-access-token-1755213210561", "x-new-refresh-token": "invalid-refresh-token", "x-token-refreshed": "true"}

      217 |       // Should not block request on refresh failure
      218 |       expect(mockNext).toHaveBeenCalled();
    > 219 |       expect(mockRes.set).not.toHaveBeenCalled();
          |                               ^
      220 |     });
      221 |
      222 |     it('should handle malformed JWT tokens', async () => {

      at Object.toHaveBeenCalled (tests/unit/middleware/sessionRefresh.test.js:219:31)

  ● Session Refresh Middleware › handleSessionRefresh endpoint › should handle refresh failure

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 401

    Number of calls: 0

      324 |       await handleSessionRefresh(mockReq, mockRes);
      325 |
    > 326 |       expect(mockRes.status).toHaveBeenCalledWith(401);
          |                              ^
      327 |       expect(mockRes.json).toHaveBeenCalledWith({
      328 |         success: false,
      329 |         error: 'Failed to refresh session',

      at Object.toHaveBeenCalledWith (tests/unit/middleware/sessionRefresh.test.js:326:30)

  ● Session Refresh Middleware › handleSessionRefresh endpoint › should include error details in debug mode

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 401

    Number of calls: 0

      350 |       await handleSessionRefresh(mockReq, mockRes);
      351 |
    > 352 |       expect(mockRes.status).toHaveBeenCalledWith(401);
          |                              ^
      353 |       expect(mockRes.json).toHaveBeenCalledWith({
      354 |         success: false,
      355 |         error: 'Failed to refresh session',

      at Object.toHaveBeenCalledWith (tests/unit/middleware/sessionRefresh.test.js:352:30)

  ● Session Refresh Middleware › Edge cases and error handling › should handle missing headers object

    TypeError: Cannot read properties of undefined (reading 'authorization')

      14 |  */
      15 | function extractToken(req) {
    > 16 |   const authHeader = req.headers.authorization;
         |                                  ^
      17 |   if (!authHeader || !authHeader.startsWith('Bearer ')) {
      18 |     return null;
      19 |   }

      at authorization (src/middleware/sessionRefresh.js:16:34)
      at extractToken (src/middleware/sessionRefresh.js:91:17)
      at Object.sessionRefreshMiddleware (tests/unit/middleware/sessionRefresh.test.js:477:13)

  ● Session Refresh Middleware › Edge cases and error handling › should validate refresh token format

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: 400

    Number of calls: 0

      497 |         await handleSessionRefresh(mockReq, mockRes);
      498 |
    > 499 |         expect(mockRes.status).toHaveBeenCalledWith(400);
          |                                ^
      500 |         expect(mockRes.json).toHaveBeenCalledWith({
      501 |           success: false,
      502 |           error: 'Refresh token is required',

      at Object.toHaveBeenCalledWith (tests/unit/middleware/sessionRefresh.test.js:499:32)

FAIL tests/unit/auth/validation.test.js
  ● Auth System Validation › Password Validation › should reject passwords with less than 6 characters

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: ""

      90 |
      91 |             invalidPasswords.forEach(password => {
    > 92 |                 expect(validatePassword(password)).toBe(false);
         |                                                    ^
      93 |             });
      94 |         });
      95 |

      at toBe (tests/unit/auth/validation.test.js:92:52)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/unit/auth/validation.test.js:91:30)

  ● Auth System Validation › Password Validation › should reject null or undefined passwords

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: null

       95 |
       96 |         it('should reject null or undefined passwords', () => {
    >  97 |             expect(validatePassword(null)).toBe(false);
          |                                            ^
       98 |             expect(validatePassword(undefined)).toBe(false);
       99 |         });
      100 |     });

      at Object.toBe (tests/unit/auth/validation.test.js:97:44)

FAIL tests/unit/services/styleProfileGenerator.test.js
  ● StyleProfileGenerator › edge cases and error handling › should handle content with missing fields

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 2

      390 |       const result = generator.analyzeLanguageContent(incompleteContent, 'es');
      391 |       expect(result).toBeDefined();
    > 392 |       expect(result.totalItems).toBe(1); // Only complete item counted
          |                                 ^
      393 |     });
      394 |
      395 |     it('should handle very long text content', () => {

      at Object.toBe (tests/unit/services/styleProfileGenerator.test.js:392:33)

FAIL tests/unit/services/authService.test.js
  ● AuthService › listUsers › should list users successfully

    expect(received).toEqual(expected) // deep equality

    Expected: [{"email": "user1@example.com", "id": "1", "name": "User 1"}, {"email": "user2@example.com", "id": "2", "name": "User 2"}]
    Received: {"pagination": {"has_more": false, "limit": 50, "offset": 0, "total": 0}, "users": [{"email": "user1@example.com", "id": "1", "is_over_limit": true, "name": "User 1", "usage_alerts": [{"category": "account", "message": "Cuenta desactivada", "severity": "medium", "type": "warning"}]}, {"email": "user2@example.com", "id": "2", "is_over_limit": true, "name": "User 2", "usage_alerts": [{"category": "account", "message": "Cuenta desactivada", "severity": "medium", "type": "warning"}]}]}

      198 |
      199 |       const result = await authService.listUsers(10, 0);
    > 200 |       expect(result).toEqual(mockUsers);
          |                      ^
      201 |     });
      202 |
      203 |     it('should handle database errors', async () => {

      at Object.toEqual (tests/unit/services/authService.test.js:200:22)

FAIL tests/integration/backend/basic-setup.test.js
  ● Backend Integration Test Setup › should load environment configuration

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: ["backend", "real"]

       9 |     
      10 |     // Verify integration test mode is set (can be 'backend' or 'real')
    > 11 |     expect(['backend', 'real']).toContain(process.env.INTEGRATION_TEST_MODE);
         |                                 ^
      12 |   });
      13 |
      14 |   test('should have proper Jest configuration', () => {

      at Object.toContain (tests/integration/backend/basic-setup.test.js:11:33)

  ● Backend Integration Test Setup › should handle fixture mode configuration

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      24 |     
      25 |     // Should have fallback enabled by default
    > 26 |     expect(fallbackEnabled).toBe(true);
         |                             ^
      27 |     
      28 |     // Log mode for debugging
      29 |     console.log('Integration test mode:', useFixtures ? 'FIXTURES' : 'REAL BACKEND');

      at Object.toBe (tests/integration/backend/basic-setup.test.js:26:29)

FAIL tests/integration/api.test.js
  ● API Integration Tests › Content-Type and JSON validation › debe manejar JSON malformado

    socket hang up



FAIL tests/unit/workers/ShieldActionWorker.test.js
  ● Test suite failed to run

    Cannot find module '../../../src/integrations/twitter/twitterService' from 'tests/unit/workers/ShieldActionWorker.test.js'

      69 | };
      70 |
    > 71 | jest.mock('../../../src/integrations/twitter/twitterService', () => mockTwitterService);
         |      ^
      72 | jest.mock('../../../src/integrations/youtube/youtubeService', () => mockYouTubeService);
      73 |
      74 | describe('ShieldActionWorker', () => {

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.mock (tests/unit/workers/ShieldActionWorker.test.js:71:6)

FAIL tests/integration/multiTenantWorkflow.test.js
  ● Test suite failed to run

    Cannot find module '../../src/integrations/twitter/twitterService' from 'tests/integration/multiTenantWorkflow.test.js'

      15 |
      16 | // Mock external services for integration testing
    > 17 | jest.mock('../../src/integrations/twitter/twitterService');
         |      ^
      18 | jest.mock('../../src/services/perspective');
      19 | jest.mock('../../src/services/openai');
      20 |

      at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.mock (tests/integration/multiTenantWorkflow.test.js:17:6)


Test Suites: 24 failed, 17 passed, 41 total
Tests:       257 failed, 9 skipped, 412 passed, 678 total
Snapshots:   0 total
Time:        8.201 s
Ran all test suites in 2 projects.
