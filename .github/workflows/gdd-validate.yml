name: GDD Validation

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'docs/nodes/**'
      - 'system-map.yaml'
      - 'spec.md'
      - 'src/**'
      - 'scripts/**'
      - '.gddrc.json'
  workflow_dispatch:

jobs:
  validate-gdd:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Load GDD configuration
        id: config
        run: |
          MIN_HEALTH=$(jq -r '.min_health_score' .gddrc.json)
          echo "min_health=$MIN_HEALTH" >> $GITHUB_OUTPUT
          echo "📋 Configuration loaded: min_health_score=$MIN_HEALTH"

      - name: Run GDD validation
        id: validation
        run: |
          echo "🔍 Running GDD validation..."
          node scripts/validate-gdd-runtime.js --ci
          VALIDATION_STATUS=$?
          echo "status=$VALIDATION_STATUS" >> $GITHUB_OUTPUT

      - name: Run health scoring
        id: health
        run: |
          echo "📊 Running health scoring..."
          node scripts/score-gdd-health.js --ci
          HEALTH_SCORE=$(jq -r '.average_score' gdd-health.json)
          HEALTH_STATUS=$(jq -r '.status' gdd-health.json)
          echo "score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
          echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "Health Score: $HEALTH_SCORE/100 ($HEALTH_STATUS)"

      - name: Run drift prediction
        id: drift
        run: |
          echo "🔮 Running drift prediction..."
          node scripts/predict-gdd-drift.js --ci
          DRIFT_RISK=$(jq -r '.average_drift_risk' gdd-drift.json)
          HIGH_RISK=$(jq -r '.high_risk_count' gdd-drift.json)
          echo "drift_risk=$DRIFT_RISK" >> $GITHUB_OUTPUT
          echo "high_risk_count=$HIGH_RISK" >> $GITHUB_OUTPUT
          echo "Drift Risk: $DRIFT_RISK/100 (High-risk nodes: $HIGH_RISK)"

      - name: Check health threshold
        id: threshold
        run: |
          HEALTH_SCORE=${{ steps.health.outputs.score }}
          MIN_HEALTH=${{ steps.config.outputs.min_health }}

          echo "🎯 Checking health threshold..."
          echo "  Current: $HEALTH_SCORE"
          echo "  Required: $MIN_HEALTH"

          if (( $(echo "$HEALTH_SCORE < $MIN_HEALTH" | bc -l) )); then
            echo "result=fail" >> $GITHUB_OUTPUT
            echo "❌ Health score below threshold!"
            echo "⚠️ Job will fail after notifications are generated"
          else
            echo "result=pass" >> $GITHUB_OUTPUT
            echo "✅ Health score meets threshold"
          fi

      - name: Generate PR comment
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Load results
            const health = JSON.parse(fs.readFileSync('gdd-health.json', 'utf8'));
            const drift = JSON.parse(fs.readFileSync('gdd-drift.json', 'utf8'));
            const status = JSON.parse(fs.readFileSync('gdd-status.json', 'utf8'));

            // Determine status emoji
            const healthEmoji = health.average_score >= 95 ? '🟢' : health.average_score >= 80 ? '🟡' : '🔴';
            const driftEmoji = drift.average_drift_risk <= 30 ? '🟢' : drift.average_drift_risk <= 60 ? '🟡' : '🔴';

            // Generate comment
            const comment = `## 🧠 GDD Validation Summary

            ### Overall Status: ${health.status === 'healthy' ? '✅ HEALTHY' : health.status === 'warning' ? '⚠️ WARNING' : '🔴 CRITICAL'}

            | Metric | Value | Status |
            |--------|-------|--------|
            | **Health Score** | ${health.average_score.toFixed(1)}/100 | ${healthEmoji} |
            | **Drift Risk** | ${drift.average_drift_risk}/100 | ${driftEmoji} |
            | **Nodes Validated** | ${status.nodes_validated} | ✅ |
            | **Coverage** | ${health.coverage_count || 0}% | ${health.coverage_count >= 80 ? '🟢' : '🟡'} |

            ### Health Breakdown

            - 🟢 Healthy nodes: ${health.healthy_count}
            - 🟡 Degraded nodes: ${health.degraded_count}
            - 🔴 Critical nodes: ${health.critical_count}

            ### Drift Analysis

            - 🟢 Low risk: ${drift.healthy_count}
            - 🟡 At risk: ${drift.at_risk_count}
            - 🔴 High risk: ${drift.high_risk_count}

            ${health.average_score < ${{ steps.config.outputs.min_health }} ? '### ⚠️ Action Required\n\nHealth score is below the minimum threshold of ' + ${{ steps.config.outputs.min_health }} + '. Please review and fix the issues before merging.' : '### ✅ Safe to Merge\n\nAll GDD checks passed. Documentation is in sync with implementation.'}

            ---

            📊 **Detailed Reports:**
            - [System Validation](../blob/main/docs/system-validation.md)
            - [Health Report](../blob/main/docs/system-health.md)
            - [Drift Report](../blob/main/docs/drift-report.md)
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const existingComment = comments.find(c =>
              c.user.login === 'github-actions[bot]' &&
              c.body.includes('GDD Validation Summary')
            );

            // Create or update comment
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Upload GDD artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gdd-validation-results
          path: |
            gdd-health.json
            gdd-drift.json
            gdd-status.json
            docs/system-validation.md
            docs/system-health.md
            docs/drift-report.md
          retention-days: 30

      - name: Create issue on failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const health = JSON.parse(fs.readFileSync('gdd-health.json', 'utf8'));

            // Find critical nodes
            const criticalNodes = Object.entries(health.nodes || {})
              .filter(([_, node]) => node.score < 50)
              .map(([name, node]) => `- **${name}**: ${node.score}/100`);

            const issueBody = `## 🔴 GDD Validation Failed

            PR #${{ github.event.pull_request.number }} failed GDD validation.

            ### Metrics
            - Health Score: ${health.average_score}/100
            - Critical Nodes: ${health.critical_count}
            - Degraded Nodes: ${health.degraded_count}

            ### Critical Nodes
            ${criticalNodes.join('\n') || 'None'}

            ### Action Required
            1. Review the [validation report](../blob/${{ github.head_ref }}/docs/system-validation.md)
            2. Fix the issues listed above
            3. Re-run the validation

            ### Related PR
            - #${{ github.event.pull_request.number }}
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[GDD] Validation Failed - PR #' + context.issue.number,
              body: issueBody,
              labels: ['documentation', 'gdd', 'tech-debt', 'priority:P1']
            });

      - name: Fail if health below threshold
        if: steps.threshold.outputs.result == 'fail'
        run: |
          echo "❌ GDD validation failed: Health score below threshold"
          exit 1
