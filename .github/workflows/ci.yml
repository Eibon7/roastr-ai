name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/*, chore/* ]
  pull_request:
    branches: [ main ]

jobs:
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: |
          ./package-lock.json
          ./frontend/package-lock.json
    
    - name: Install backend dependencies
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Verify dependency installation
      run: |
        echo "Backend dependencies:"
        npm list --depth=0 || true
        echo "Frontend dependencies:"
        cd frontend && npm list --depth=0 || true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: build-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: |
          ./package-lock.json
          ./frontend/package-lock.json
    
    - name: Install backend dependencies
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run backend security audit
      run: npm audit --audit-level=high || true
    
    - name: Run frontend security audit
      working-directory: ./frontend
      run: npm audit --audit-level=high || true

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    needs: [build-check, security-audit]
    
    env:
      # Backend mock environment variables
      ENABLE_RQC: false
      NODE_ENV: test
      OPENAI_API_KEY: ""
      STRIPE_SECRET_KEY: ""
      SUPABASE_URL: "http://localhost/dummy"
      SUPABASE_SERVICE_KEY: "dummy"
      SUPABASE_ANON_KEY: "dummy"
      PERSPECTIVE_API_KEY: ""
      TWITTER_BEARER_TOKEN: ""
      TWITTER_APP_KEY: ""
      TWITTER_APP_SECRET: ""
      TWITTER_ACCESS_TOKEN: ""
      TWITTER_ACCESS_SECRET: ""
      YOUTUBE_API_KEY: ""
      # Frontend mock environment variables
      REACT_APP_ENABLE_MOCK_MODE: true
      REACT_APP_SUPABASE_URL: "http://localhost/dummy"
      REACT_APP_SUPABASE_ANON_KEY: "dummy"
      CI: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: |
          ./package-lock.json
          ./frontend/package-lock.json
    
    - name: Install backend dependencies
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Verify PostCSS config for frontend
      working-directory: ./frontend
      run: |
        if [ ! -f postcss.config.js ]; then
          echo "Creating PostCSS config for Tailwind v4..."
          cat > postcss.config.js << 'EOF'
        module.exports = {
          plugins: {
            '@tailwindcss/postcss': {},
            autoprefixer: {}
          }
        };
        EOF
        fi
        cat postcss.config.js
    
    - name: Run backend linting
      run: npm run lint
    
    - name: Run backend tests
      run: npm run test:ci
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run test:ci
    
    - name: Upload backend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: junit.xml
        retention-days: 30
    
    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: frontend/junit.xml
        retention-days: 30
    
    - name: Build frontend for production (optional)
      working-directory: ./frontend
      run: npm run build:ci
      continue-on-error: true
    
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: dashboard-preview
        path: frontend/build/
        retention-days: 7

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: false  # Skip for now as requested
    
    steps:
    - name: Skip smoke tests
      run: echo "Smoke tests are currently disabled"

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [lint-and-test, smoke-tests]
    if: false  # Skip for now as requested
    
    steps:
    - name: Skip Slack notification
      run: echo "Slack notifications are currently disabled"