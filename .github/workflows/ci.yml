name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/*, feat/*, chore/*, codex/* ]
  pull_request:
    branches: [ main ]

jobs:
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Setup Node.js 20
      uses: actions/setup-node@v6
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          frontend/node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-
          
    - name: Install frontend deps
      working-directory: ./frontend
      run: npm ci
      
    - name: Build frontend (mock env, no CI)
      working-directory: ./frontend
      run: npm run build:ci

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: build-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Setup Node.js 20
      uses: actions/setup-node@v6
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          ./package-lock.json
          ./frontend/package-lock.json
    
    - name: Install backend dependencies
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run backend security audit
      run: npm audit --audit-level=high || true
    
    - name: Run frontend security audit
      working-directory: ./frontend
      run: npm audit --audit-level=high || true

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    needs: [build-check, security-audit]
    
    env:
      # Global Mock Mode - Forces all services to use mock data
      ENABLE_MOCK_MODE: true
      NODE_ENV: test
      SKIP_E2E: true
      IS_TEST: '1'
      
      # Core System Flags
      ENABLE_RQC: false
      ENABLE_SHIELD: false
      ENABLE_DEBUG_LOGS: false
      VERBOSE_LOGS: false

      # Database (Mock)
      SUPABASE_URL: "http://localhost:54321/mock"
      SUPABASE_SERVICE_KEY: "mock-service-key-for-testing"
      SUPABASE_ANON_KEY: "mock-anon-key-for-testing"

      # AI Services (Mock)
      OPENAI_API_KEY: "mock-openai-key-sk-test123456789"
      PERSPECTIVE_API_KEY: "mock-perspective-key-AIzaSy123456789"

      # Billing (Mock)
      STRIPE_SECRET_KEY: "sk_test_mock123456789"
      STRIPE_WEBHOOK_SECRET: "whsec_mock123456789"

      # Social Media Integrations (Mock)
      TWITTER_BEARER_TOKEN: "mock-twitter-bearer-token"
      TWITTER_APP_KEY: "mock-twitter-app-key"
      TWITTER_APP_SECRET: "mock-twitter-app-secret"
      TWITTER_ACCESS_TOKEN: "mock-twitter-access-token"
      TWITTER_ACCESS_SECRET: "mock-twitter-access-secret"
      YOUTUBE_API_KEY: "AIzaSyMockYouTubeKey123456789"
      INSTAGRAM_ACCESS_TOKEN: "IGQVJYMockInstagramToken123456789"
      FACEBOOK_ACCESS_TOKEN: "EAAMockFacebookToken123456789"
      DISCORD_BOT_TOKEN: "MockDiscordBotToken.123456.789"
      TWITCH_CLIENT_ID: "mock_twitch_client_id"
      TWITCH_CLIENT_SECRET: "mock_twitch_client_secret"
      REDDIT_CLIENT_ID: "mock-reddit-client-id"
      REDDIT_CLIENT_SECRET: "mock-reddit-client-secret"
      TIKTOK_ACCESS_TOKEN: "mock-tiktok-access-token"
      BLUESKY_USERNAME: "mock@bluesky.social"
      BLUESKY_PASSWORD: "mock-bluesky-password"

      # Frontend Mock Variables
      REACT_APP_ENABLE_MOCK_MODE: true
      REACT_APP_SUPABASE_URL: "http://localhost:54321/mock"
      REACT_APP_SUPABASE_ANON_KEY: "mock-anon-key-for-testing"
      REACT_APP_API_URL: "http://localhost:3001"
      
      # Build Configuration
      CI: true
      GENERATE_SOURCEMAP: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Setup Node.js 20
      uses: actions/setup-node@v6
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          ./package-lock.json
          ./frontend/package-lock.json
    
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ./node_modules
          ./frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install backend dependencies
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run backend linting
      run: npm run lint
    
    - name: Run backend tests
      run: |
        echo "üß™ Running backend tests with environment:"
        echo "NODE_ENV: $NODE_ENV"
        echo "ENABLE_RQC: $ENABLE_RQC"
        echo "SKIP_E2E: $SKIP_E2E"
        npm run test:ci

    - name: Run Perspective-Shield integration test
      run: |
        echo "üõ°Ô∏è Running Perspective API ‚Üí Shield integration validation..."
        node scripts/test-perspective-shield-integration.js
        echo "‚úÖ Integration test completed"
    
    - name: Run frontend linting
      working-directory: ./frontend
      run: |
        echo "üîç Running frontend ESLint checks..."
        npx eslint src/ --ext .js,.jsx,.ts,.tsx --max-warnings 0 || echo "‚ö†Ô∏è ESLint warnings found but not blocking CI"
    
    - name: Run frontend tests (allow failures in Phase 1)
      working-directory: ./frontend
      run: |
        echo "üß™ Running frontend tests with complete mocking:"
        echo "REACT_APP_ENABLE_MOCK_MODE: $REACT_APP_ENABLE_MOCK_MODE"
        echo "CI: $CI"
        echo "SKIP_E2E: $SKIP_E2E"
        echo "‚ö†Ô∏è  Note: Frontend tests may fail - full fix scheduled for Phase 2"
        npm run test:ci || echo "Frontend tests failed as expected - continuing with build"
    
    - name: Upload backend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: junit.xml
        retention-days: 30
    
    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: frontend/junit.xml
        retention-days: 30
    
    - name: Build frontend production bundle
      working-directory: ./frontend
      run: |
        echo "üèóÔ∏è Building frontend production bundle with mocks..."
        echo "REACT_APP_ENABLE_MOCK_MODE: $REACT_APP_ENABLE_MOCK_MODE"
        echo "REACT_APP_SUPABASE_URL: $REACT_APP_SUPABASE_URL"
        npm run build:ci
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: frontend-build-artifacts
        path: frontend/build/
        retention-days: 7

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: ${{ false }}  # Skip for now as requested
    
    steps:
    - name: Skip smoke tests
      run: echo "Smoke tests are currently disabled"

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [lint-and-test, smoke-tests]
    if: ${{ false }}  # Skip for now as requested
    
    steps:
    - name: Skip Slack notification
      run: echo "Slack notifications are currently disabled"