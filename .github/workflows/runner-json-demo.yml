name: Runner JSON Demo

on:
  push:
    branches:
      - feat/issue-281-mocks-runner-docs

env:
  TEST_PLATFORM: "bluesky"  # Platform to validate exists in platforms.json

jobs:
  runner-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: List platforms (JSON)
        run: |
          node scripts/test/runner.js list-platforms --json | tee platforms.json
          echo '### Platforms (from runner --json)' >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat platforms.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          # Use jq in exit-on-false mode to test platform existence with proper error handling
          if ! jq -e --arg platform "$TEST_PLATFORM" '.platforms | contains([$platform])' platforms.json > /dev/null; then
            echo "Platform '$TEST_PLATFORM' not found in platforms.json"
            exit 1
          fi

      - name: Lint + Typecheck (JSON)
        run: |
          set -euo pipefail
          node scripts/test/runner.js check --json | tee check.json
          echo '### Check summary (from runner --json)' >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat check.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          # Parse exit code from our new check command format with numeric coercion
          if ! CHECK_EXIT=$(jq -r '(.exitCode // 0) | tonumber' check.json); then
            echo "Error: Failed to parse check.json for exit code"
            exit 1
          fi
          # Parse command that was run
          if ! CHECK_COMMAND=$(jq -r '.command // "unknown"' check.json); then
            echo "Error: Failed to parse check.json for command"
            exit 1
          fi
          echo "Check command: $CHECK_COMMAND"
          echo "Check exit code: $CHECK_EXIT"
          # Check if the command failed (ensure numeric comparison)
          # jq's tonumber already validated the numeric type above
          if [ "$CHECK_EXIT" -ne 0 ]; then
            echo "Runner check failed with exit code: $CHECK_EXIT"
            # Show stderr if available
            if STDERR_OUTPUT=$(jq -r '.stderr // ""' check.json 2>/dev/null) && [ -n "$STDERR_OUTPUT" ]; then
              echo "Error output:"
              echo "$STDERR_OUTPUT"
            fi
            exit 1
          fi
          echo "âœ… Check passed successfully"

