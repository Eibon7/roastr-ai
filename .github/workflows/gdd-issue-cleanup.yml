name: GDD Issue Cleanup

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: read        # For actions/checkout
      issues: write         # For closing issues
      pull-requests: read   # For checking PR status

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Close stale GDD issues
        uses: actions/github-script@v7
        with:
          script: |
            const STALE_DAYS = 30;
            const staleDate = new Date();
            staleDate.setDate(staleDate.getDate() - STALE_DAYS);

            console.log(`üîç Searching for GDD issues older than ${STALE_DAYS} days (before ${staleDate.toISOString()})`);

            // Get all open GDD issues (with pagination)
            const gddIssues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'gdd',
              per_page: 100
            });

            console.log(`Found ${gddIssues.length} open GDD issues`);

            let closedCount = 0;
            let keptCount = 0;

            for (const issue of gddIssues) {
              // Use updated_at for staleness (better indicator of recent activity)
              const issueDate = new Date(issue.updated_at);
              const ageInDays = Math.floor((Date.now() - issueDate) / (1000 * 60 * 60 * 24));

              // Check if issue is stale (no updates in STALE_DAYS)
              if (issueDate < staleDate) {
                // Extract PR number from title if exists
                const prMatch = issue.title.match(/PR #(\d+)/);
                const prNumber = prMatch ? prMatch[1] : null;

                // Check if related PR is still open
                let prOpen = false;
                if (prNumber) {
                  try {
                    const { data: pr } = await github.rest.pulls.get({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: parseInt(prNumber)
                    });
                    prOpen = pr.state === 'open';
                  } catch (error) {
                    // PR doesn't exist or can't be accessed
                    prOpen = false;
                  }
                }

                // Close issue if PR is merged/closed or doesn't exist
                if (!prOpen) {
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    state: 'closed'
                  });

                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: `üßπ **Auto-closed by GDD Issue Cleanup**\n\nReason: Issue is ${ageInDays} days old and related PR ${prNumber ? `#${prNumber}` : ''} is no longer open.\n\nIf this issue is still relevant, please reopen and update.`
                  });

                  closedCount++;
                  console.log(`‚úÖ Closed issue #${issue.number} (${ageInDays} days old, PR ${prNumber || 'N/A'})`);
                } else {
                  keptCount++;
                  console.log(`‚è≠Ô∏è Keeping issue #${issue.number} (PR #${prNumber} still open)`);
                }
              } else {
                keptCount++;
              }
            }

            console.log(`\nüìä Cleanup Summary:`);
            console.log(`   Total GDD issues: ${gddIssues.length}`);
            console.log(`   Closed: ${closedCount}`);
            console.log(`   Kept: ${keptCount}`);

            // Create summary
            await core.summary
              .addHeading('üßπ GDD Issue Cleanup')
              .addTable([
                [{data: 'Metric', header: true}, {data: 'Value', header: true}],
                ['Total GDD Issues', gddIssues.length.toString()],
                ['Issues Closed', closedCount.toString()],
                ['Issues Kept', keptCount.toString()],
                ['Threshold', `${STALE_DAYS} days`]
              ])
              .write();

      - name: Report cleanup results
        run: |
          echo "‚úÖ GDD issue cleanup completed"
          echo "See job summary for details"
