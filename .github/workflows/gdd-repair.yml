name: GDD Auto-Repair

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'docs/nodes/**'
      - 'system-map.yaml'
      - 'spec.md'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (show fixes without applying)'
        required: false
        default: 'false'
        type: boolean

jobs:
  auto-repair:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Load GDD configuration
        id: config
        run: |
          AUTO_FIX=$(jq -r '.auto_repair.enabled' .gddrc.json)
          COMMIT_FIXES=$(jq -r '.auto_repair.commit_fixes' .gddrc.json)
          echo "auto_fix=$AUTO_FIX" >> $GITHUB_OUTPUT
          echo "commit_fixes=$COMMIT_FIXES" >> $GITHUB_OUTPUT
          echo "📋 Configuration: auto_fix=$AUTO_FIX, commit_fixes=$COMMIT_FIXES"

      - name: Run auto-repair (dry-run)
        id: dry_run
        run: |
          echo "🔍 Running auto-repair in dry-run mode..."
          node scripts/auto-repair-gdd.js --dry-run

          # Count potential fixes
          FIXES=$(jq -r '.fixes_would_apply' gdd-repair.json)
          echo "fixes_count=$FIXES" >> $GITHUB_OUTPUT
          echo "Found $FIXES potential fixes"

      - name: Run auto-repair (apply fixes)
        id: repair
        if: steps.config.outputs.auto_fix == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          echo "🔧 Running auto-repair with fixes..."
          node scripts/auto-repair-gdd.js --auto-fix --ci

          # Count applied fixes
          FIXES=$(jq -r '.fixes_applied' gdd-repair.json)
          ERRORS=$(jq -r '.errors' gdd-repair.json)
          echo "fixes_applied=$FIXES" >> $GITHUB_OUTPUT
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "Applied $FIXES fixes, encountered $ERRORS errors"

      - name: Re-validate after repair
        id: revalidate
        if: steps.repair.outputs.fixes_applied > 0
        run: |
          echo "🔍 Re-validating after repair..."
          node scripts/validate-gdd-runtime.js --ci
          node scripts/score-gdd-health.js --ci

          NEW_HEALTH=$(jq -r '.average_score' gdd-health.json)
          echo "new_health=$NEW_HEALTH" >> $GITHUB_OUTPUT
          echo "New health score: $NEW_HEALTH"

      - name: Commit fixes
        id: commit
        if: steps.repair.outputs.fixes_applied > 0 && steps.config.outputs.commit_fixes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add .
          git commit -m "fix(docs): Auto-repair GDD documentation issues

          Applied ${{ steps.repair.outputs.fixes_applied }} automated fixes:
          - Missing agent sections
          - Broken bidirectional links
          - Outdated timestamps
          - Missing node references

          Health score: ${{ steps.revalidate.outputs.new_health }}/100

          🤖 Generated by GDD Auto-Repair" || echo "No changes to commit"

          TARGET_BRANCH="${{ github.head_ref || github.ref_name }}"
          if [ -z "$TARGET_BRANCH" ]; then
            echo "❌ Cannot determine target branch for push"
            exit 1
          fi
          git push origin HEAD:"$TARGET_BRANCH"
          echo "committed=true" >> $GITHUB_OUTPUT

      - name: Generate repair summary
        id: summary
        run: |
          cat > repair-summary.md << 'EOF'
          ## 🔧 GDD Auto-Repair Summary

          ### Fixes Applied
          - **Total fixes**: ${{ steps.repair.outputs.fixes_applied || steps.dry_run.outputs.fixes_count }}
          - **Errors**: ${{ steps.repair.outputs.errors || 0 }}
          - **Committed**: ${{ steps.commit.outputs.committed || 'false' }}

          ### Health Impact
          ${steps.revalidate.outputs.new_health && '- **New health score**: ' + steps.revalidate.outputs.new_health + '/100'}

          ### Actions Taken
          EOF

          # Add details from repair report
          jq -r '.details.fixes[] | "- \(.type): \(.node) - \(.action)"' gdd-repair.json >> repair-summary.md || true

          cat repair-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const repair = JSON.parse(fs.readFileSync('gdd-repair.json', 'utf8'));
            const summary = fs.readFileSync('repair-summary.md', 'utf8');

            const fixesApplied = repair.fixes_applied || 0;
            const fixesWouldApply = repair.fixes_would_apply || 0;
            const errors = repair.errors || 0;

            let comment = `## 🔧 GDD Auto-Repair Report

            `;

            if (fixesApplied > 0) {
              comment += `✅ **${fixesApplied} fixes applied automatically**

            `;
            } else if (fixesWouldApply > 0) {
              comment += `ℹ️ **${fixesWouldApply} fixes available** (dry-run mode)

            `;
            } else {
              comment += `✅ **No fixes needed**

            `;
            }

            if (errors > 0) {
              comment += `⚠️ **${errors} errors encountered** - manual review required

            `;
            }

            // Add fix details
            if (repair.details && repair.details.fixes) {
              comment += `### Fixes Applied\n\n`;
              repair.details.fixes.slice(0, 10).forEach(fix => {
                comment += `- **${fix.type}** (${fix.node}): ${fix.action}\n`;
              });

              if (repair.details.fixes.length > 10) {
                comment += `\n_... and ${repair.details.fixes.length - 10} more_\n`;
              }
            }

            comment += `\n---\n\n`;
            comment += `📊 View detailed report in workflow artifacts`;

            // Post comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Create issue for manual review
        if: failure() || steps.repair.outputs.errors > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const repair = JSON.parse(fs.readFileSync('gdd-repair.json', 'utf8'));

            const errors = repair.details?.errors || [];
            const errorList = errors.map(e => `- **${e.type}** (${e.node}): ${e.error}`).join('\n');

            const issueBody = `## 🔴 GDD Auto-Repair Failed

            Automated repair encountered errors that require manual intervention.

            ### Errors
            ${errorList || 'See workflow logs for details'}

            ### PR Context
            - PR: #${{ github.event.pull_request.number }}
            - Branch: ${{ github.head_ref }}

            ### Next Steps
            1. Review the errors above
            2. Apply manual fixes
            3. Re-run the validation workflow

            ### Related Links
            - [Workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [PR #${{ github.event.pull_request.number }}](../pull/${{ github.event.pull_request.number }})
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[GDD] Auto-Repair Failed - Manual Review Required',
              body: issueBody,
              labels: ['documentation', 'gdd', 'manual-review', 'priority:P2']
            });

      - name: Upload repair artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gdd-repair-results
          path: |
            gdd-repair.json
            repair-summary.md
            gdd-health.json
            gdd-status.json
          retention-days: 30

      - name: Fail if errors occurred
        if: steps.repair.outputs.errors > 0
        run: |
          echo "❌ Auto-repair completed with errors"
          exit 1
