/**
 * Unified Transparency Service (Issue #196)
 * 
 * This service handles mandatory transparency disclaimers for all AI-generated roasts.
 * All roasts now include disclaimers with 70% short signatures, 30% creative disclaimers.
 * Bio recommendation remains as optional user guidance.
 */

const { supabaseServiceClient } = require('../config/supabase');
const { logger } = require('../utils/logger');
const { flags } = require('../config/flags');

class TransparencyService {
  constructor() {
    // Bio recommendation text (for user guidance, not enforcement)
    this.bioRecommendationText = {
      es: 'Algunos mensajes de hate son respondidos autom√°ticamente por @Roastr',
      en: 'Some hate messages are automatically responded to by @Roastr'
    };
    
    // Short signatures pool (70% usage)
    this.shortSignatures = {
      es: [
        '‚Äî Roastr.AI',
        '(by Roastr.AI)',
        'Generado por Roastr.AI',
        'Comentario generado por Roastr.AI',
        'Responde Roastr.AI',
        'Powered by Roastr.AI',
        'Respuesta autom√°tica ‚Ä¢ Roastr.AI'
      ],
      en: [
        '‚Äî Roastr.AI',
        '(by Roastr.AI)',
        'Generated by Roastr.AI',
        'Comment generated by Roastr.AI',
        'Roastr.AI responds',
        'Powered by Roastr.AI',
        'Automatic response ‚Ä¢ Roastr.AI'
      ]
    };

    // Creative disclaimers pool (30% usage)
    this.creativeDisclaimers = {
      es: [
        'Ning√∫n humano perdi√≥ tiempo en ti',
        'Powered by Roastr‚Ñ¢ ‚Äî salvo contigo',
        '0% humano, 100% devastador',
        'Respuesta automatizada para comentarios autom√°ticos',
        'Un bot m√°s inteligente que tu comentario',
        'Generado por IA para ahorrar tiempo humano',
        'Roastr.AI: porque alguien tiene que hacerlo'
      ],
      en: [
        'No humans wasted time on you',
        'Powered by Roastr‚Ñ¢ ‚Äî except for you',
        '0% human, 100% devastating',
        'Automated response for automatic comments',
        'A bot smarter than your comment',
        'AI-generated to save human time',
        'Roastr.AI: because someone has to do it'
      ]
    };
  }

  /**
   * Select disclaimer based on rotation logic and character constraints
   * @param {string} language - Language code (es, en)
   * @param {number} roastLength - Current roast character count
   * @param {number} platformLimit - Platform character limit (e.g., 280 for Twitter)
   * @returns {Object} - { disclaimer, type }
   */
  selectDisclaimer(language = 'es', roastLength = 0, platformLimit = null) {
    const shortPool = this.shortSignatures[language] || this.shortSignatures.es;
    const creativePool = this.creativeDisclaimers[language] || this.creativeDisclaimers.es;
    
    // If approaching character limit, always use short signature
    if (platformLimit && roastLength > platformLimit * 0.85) {
      const disclaimer = shortPool[Math.floor(Math.random() * shortPool.length)];
      return { disclaimer, type: 'short' };
    }
    
    // Normal rotation: 70% short, 30% creative
    const useShort = Math.random() < 0.7;
    
    if (useShort) {
      const disclaimer = shortPool[Math.floor(Math.random() * shortPool.length)];
      return { disclaimer, type: 'short' };
    } else {
      const disclaimer = creativePool[Math.floor(Math.random() * creativePool.length)];
      return { disclaimer, type: 'creative' };
    }
  }

  /**
   * Apply mandatory transparency disclaimer to ALL roasts (Issue #196)
   * @param {string} roastText - Original roast text
   * @param {string} userId - User ID (kept for compatibility, not used for decision)
   * @param {string} language - Language code (es, en)
   * @param {number} platformLimit - Platform character limit (optional)
   * @returns {Promise<Object>} - { finalText, disclaimerType, disclaimer }
   */
  async applyTransparencyDisclaimer(roastText, userId, language = 'es', platformLimit = null) {
    try {
      // All roasts now get disclaimers - select based on rotation logic
      const { disclaimer, type } = this.selectDisclaimer(language, roastText.length, platformLimit);
      
      const finalText = roastText + '\n\n' + disclaimer;

      logger.info('üîç Unified transparency disclaimer applied', {
        userId: userId.substring(0, 8) + '...',
        disclaimerType: type,
        language,
        roastLength: roastText.length,
        finalLength: finalText.length,
        platformLimit
      });

      return {
        finalText,
        disclaimerType: type,
        disclaimer,
        // Legacy compatibility - all roasts now have disclaimers
        transparencyMode: 'unified',
        bioText: null
      };

    } catch (error) {
      logger.error('Error applying transparency disclaimer:', error);
      
      // Safe fallback - always return with short signature
      const shortPool = this.shortSignatures[language] || this.shortSignatures.es;
      const fallbackDisclaimer = shortPool[0]; // Use first short signature as fallback
      
      return {
        finalText: roastText + '\n\n' + fallbackDisclaimer,
        disclaimerType: 'short',
        disclaimer: fallbackDisclaimer,
        transparencyMode: 'unified',
        bioText: null
      };
    }
  }

  /**
   * Get bio recommendation text for a given language (Issue #196)
   * @param {string} language - Language code
   * @returns {string} - Bio recommendation text
   */
  getBioText(language = 'es') {
    return this.bioRecommendationText[language] || this.bioRecommendationText.es;
  }

  /**
   * Get transparency explanation for frontend (Issue #196)
   * @param {string} language - Language code
   * @returns {Object} - Unified transparency explanation
   */
  getTransparencyExplanation(language = 'es') {
    const explanations = {
      es: {
        title: 'Transparencia en las respuestas',
        description: 'Por pol√≠ticas de transparencia, todas las respuestas autom√°ticas incluyen un aviso de que son generadas por IA. Adem√°s, puedes a√±adir en tu bio el texto sugerido para dar mayor visibilidad y protecci√≥n.',
        bioRecommendation: this.getBioText(language),
        buttonText: 'Copiar texto para bio'
      },
      en: {
        title: 'Response transparency',
        description: 'Due to transparency policies, all automatic responses include a notice that they are AI-generated. Additionally, you can add the suggested text to your bio for greater visibility and protection.',
        bioRecommendation: this.getBioText(language),
        buttonText: 'Copy text for bio'
      }
    };

    return explanations[language] || explanations.es;
  }

  /**
   * DEPRECATED: Legacy method kept for backwards compatibility
   * @deprecated Use getTransparencyExplanation() instead
   */
  getTransparencyOptions(language = 'es') {
    // Return empty array since options are no longer selectable
    logger.warn('getTransparencyOptions() is deprecated - all roasts now include disclaimers');
    return [];
  }

  /**
   * Update disclaimer usage statistics (for analytics) - Issue #196
   * @param {string} disclaimerText - The disclaimer that was used
   * @param {string} disclaimerType - Type: 'short' or 'creative'
   * @param {string} language - Language code
   */
  async updateDisclaimerStats(disclaimerText, disclaimerType, language = 'es') {
    try {
      if (!flags.isEnabled('ENABLE_SUPABASE') || !disclaimerText) {
        return;
      }

      // Log disclaimer usage for analytics
      await supabaseServiceClient
        .from('transparency_disclaimer_usage')
        .insert([{
          disclaimer_text: disclaimerText,
          disclaimer_type: disclaimerType,
          language: language,
          used_at: new Date().toISOString()
        }]);

    } catch (error) {
      // Non-critical error, just log it
      logger.warn('Failed to update disclaimer stats:', error);
    }
  }

  /**
   * Get statistics about disclaimer usage rotation
   * @returns {Promise<Object>} - Usage statistics
   */
  async getUsageStats() {
    try {
      if (!flags.isEnabled('ENABLE_SUPABASE')) {
        return {
          shortSignatureUsage: 70,
          creativeDisclaimerUsage: 30,
          totalDisclaimers: 100
        };
      }

      const { data, error } = await supabaseServiceClient
        .from('transparency_disclaimer_usage')
        .select('disclaimer_type')
        .gte('used_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()); // Last 24h

      if (error) throw error;

      const total = data.length;
      const shortCount = data.filter(item => item.disclaimer_type === 'short').length;
      const creativeCount = data.filter(item => item.disclaimer_type === 'creative').length;

      return {
        shortSignatureUsage: total > 0 ? Math.round((shortCount / total) * 100) : 70,
        creativeDisclaimerUsage: total > 0 ? Math.round((creativeCount / total) * 100) : 30,
        totalDisclaimers: total
      };

    } catch (error) {
      logger.warn('Failed to get usage stats:', error);
      return {
        shortSignatureUsage: 70,
        creativeDisclaimerUsage: 30,
        totalDisclaimers: 0
      };
    }
  }
}

module.exports = new TransparencyService();