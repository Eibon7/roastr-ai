[
  {
    "file": "tests/smoke/api-health.test.js",
    "passed": false,
    "output": "FAIL node-tests tests/smoke/api-health.test.js\n  API Health Smoke Tests\n    Health Check Endpoints\n      ✓ GET /health should return 200 (12 ms)\n      ✓ GET /api/health should be accessible (4 ms)\n    Auth Endpoints Accessibility\n      ✓ POST /api/auth/register should be accessible (12 ms)\n      ✓ POST /api/auth/login should be accessible (2 ms)\n    Billing Endpoints Accessibility\n      ✓ GET /api/billing/plans should be accessible (2 ms)\n      ✓ POST /api/billing/create-checkout-session endpoint exists (1 ms)\n    Integration Endpoints Accessibility\n      ✓ GET /api/user/integrations endpoint exists (1 ms)\n      ✓ POST /api/user/integrations/connect endpoint exists (1 ms)\n    Error Handling\n      ✓ Non-existent endpoints should return proper error (2 ms)\n      ✕ Wrong HTTP method should return proper error (2 ms)\n    Security Headers\n      ✓ Should include security headers (1 ms)\n\n  ● API Health Smoke Tests › Error Handling › Wrong HTTP method should return proper error\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected value: 404\n    Received array: [405, 500]\n\n      111 |       \n      112 |       // Should be 405 (method not allowed) or 500, but endpoint should respond\n    > 113 |       expect([405, 500]).toContain(response.status);\n          |                          ^\n      114 |     });\n      115 |   });\n      116 |\n\n      at Object.toContain (tests/smoke/api-health.test.js:113:26)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 10 passed, 11 total\nSnapshots:   0 total\nTime:        0.49 s, estimated 1 s\nRan all test suites matching /tests\\/smoke\\/api-health.test.js/i.\nJest did not exit one second after the test run has completed.\n\n'This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n",
    "error": "Command failed: ENABLE_MOCK_MODE=true npx jest tests/smoke/api-health.test.js --verbose --no-coverage --passWithNoTests\nFAIL node-tests tests/smoke/api-health.test.js\n  API Health Smoke Tests\n    Health Check Endpoints\n      ✓ GET /health should return 200 (12 ms)\n      ✓ GET /api/health should be accessible (4 ms)\n    Auth Endpoints Accessibility\n      ✓ POST /api/auth/register should be accessible (12 ms)\n      ✓ POST /api/auth/login should be accessible (2 ms)\n    Billing Endpoints Accessibility\n      ✓ GET /api/billing/plans should be accessible (2 ms)\n      ✓ POST /api/billing/create-checkout-session endpoint exists (1 ms)\n    Integration Endpoints Accessibility\n      ✓ GET /api/user/integrations endpoint exists (1 ms)\n      ✓ POST /api/user/integrations/connect endpoint exists (1 ms)\n    Error Handling\n      ✓ Non-existent endpoints should return proper error (2 ms)\n      ✕ Wrong HTTP method should return proper error (2 ms)\n    Security Headers\n      ✓ Should include security headers (1 ms)\n\n  ● API Health Smoke Tests › Error Handling › Wrong HTTP method should return proper error\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected value: 404\n    Received array: [405, 500]\n\n      111 |       \n      112 |       // Should be 405 (method not allowed) or 500, but endpoint should respond\n    > 113 |       expect([405, 500]).toContain(response.status);\n          |                          ^\n      114 |     });\n      115 |   });\n      116 |\n\n      at Object.toContain (tests/smoke/api-health.test.js:113:26)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 10 passed, 11 total\nSnapshots:   0 total\nTime:        0.49 s, estimated 1 s\nRan all test suites matching /tests\\/smoke\\/api-health.test.js/i.\nJest did not exit one second after the test run has completed.\n\n'This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n"
  },
  {
    "file": "tests/unit/routes/user.test.js",
    "passed": false,
    "output": "FAIL node-tests tests/unit/routes/user.test.js\n  User Routes Tests\n    GET /api/user/integrations\n      ✕ should return user integrations successfully (20 ms)\n      ✕ should return error if user organization not found (2 ms)\n    POST /api/user/integrations/connect\n      ✕ should connect new platform successfully (6 ms)\n      ✕ should update existing platform successfully (2 ms)\n      ✕ should return error for invalid platform (2 ms)\n      ✓ should return error for missing platform (1 ms)\n    POST /api/user/integrations/disconnect\n      ✕ should disconnect platform successfully (1 ms)\n      ✕ should return error if integration not found (3 ms)\n      ✓ should return error for missing platform (3 ms)\n    POST /api/user/preferences\n      ✕ should save user preferences successfully (2 ms)\n      ✓ should return error for invalid humor tone (2 ms)\n      ✓ should return error for invalid humor style (1 ms)\n      ✓ should return error for invalid platforms (1 ms)\n      ✓ should handle empty preferences with defaults (2 ms)\n    GET /api/user/profile\n      ✓ should return user profile successfully (1 ms)\n      ✓ should return error if user not found (1 ms)\n    Authentication Middleware Integration\n      ✓ should require authentication for all user routes (2 ms)\n    Error Handling\n      ✕ should handle database errors gracefully (1 ms)\n      ✕ should handle unexpected errors in preferences endpoint (2 ms)\n\n  ● User Routes Tests › GET /api/user/integrations › should return user integrations successfully\n\n    expect(received).toMatchObject(expected)\n\n    - Expected  - 2\n    + Received  + 1\n\n      Object {\n    -   \"enabled\": true,\n        \"platform\": \"twitter\",\n    -   \"status\": \"connected\",\n    +   \"status\": \"disconnected\",\n      }\n\n      87 |             expect(response.body.success).toBe(true);\n      88 |             expect(response.body.data).toHaveLength(9); // All 9 platforms\n    > 89 |             expect(response.body.data.find(p => p.platform === 'twitter')).toMatchObject({\n         |                                                                            ^\n      90 |                 platform: 'twitter',\n      91 |                 status: 'connected',\n      92 |                 enabled: true\n\n      at Object.toMatchObject (tests/unit/routes/user.test.js:89:76)\n\n  ● User Routes Tests › GET /api/user/integrations › should return error if user organization not found\n\n    expected 404 \"Not Found\", got 200 \"OK\"\n\n      102 |             const response = await request(app)\n      103 |                 .get('/api/user/integrations')\n    > 104 |                 .expect(404);\n          |                  ^\n      105 |\n      106 |             expect(response.body.success).toBe(false);\n      107 |             expect(response.body.error).toBe('User organization not found');\n\n      at Object.expect (tests/unit/routes/user.test.js:104:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › POST /api/user/integrations/connect › should connect new platform successfully\n\n    expected 200 \"OK\", got 500 \"Internal Server Error\"\n\n      143 |                 .post('/api/user/integrations/connect')\n      144 |                 .send({ platform: 'twitter' })\n    > 145 |                 .expect(200);\n          |                  ^\n      146 |\n      147 |             expect(response.body.success).toBe(true);\n      148 |             expect(response.body.message).toBe('twitter connected successfully');\n\n      at Object.expect (tests/unit/routes/user.test.js:145:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › POST /api/user/integrations/connect › should update existing platform successfully\n\n    expected 200 \"OK\", got 500 \"Internal Server Error\"\n\n      176 |                 .post('/api/user/integrations/connect')\n      177 |                 .send({ platform: 'twitter' })\n    > 178 |                 .expect(200);\n          |                  ^\n      179 |\n      180 |             expect(response.body.success).toBe(true);\n      181 |             expect(response.body.data.status).toBe('connected');\n\n      at Object.expect (tests/unit/routes/user.test.js:178:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › POST /api/user/integrations/connect › should return error for invalid platform\n\n    expected 400 \"Bad Request\", got 500 \"Internal Server Error\"\n\n      187 |                 .post('/api/user/integrations/connect')\n      188 |                 .send({ platform: 'invalid-platform' })\n    > 189 |                 .expect(400);\n          |                  ^\n      190 |\n      191 |             expect(response.body.success).toBe(false);\n      192 |             expect(response.body.error).toBe('Invalid platform');\n\n      at Object.expect (tests/unit/routes/user.test.js:189:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › POST /api/user/integrations/disconnect › should disconnect platform successfully\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      246 |             expect(response.body.message).toBe('twitter disconnected successfully');\n      247 |             expect(response.body.data.status).toBe('disconnected');\n    > 248 |             expect(mockUserClient.update).toHaveBeenCalled();\n          |                                           ^\n      249 |         });\n      250 |\n      251 |         it('should return error if integration not found', async () => {\n\n      at Object.toHaveBeenCalled (tests/unit/routes/user.test.js:248:43)\n\n  ● User Routes Tests › POST /api/user/integrations/disconnect › should return error if integration not found\n\n    expected 404 \"Not Found\", got 200 \"OK\"\n\n      258 |                 .post('/api/user/integrations/disconnect')\n      259 |                 .send({ platform: 'twitter' })\n    > 260 |                 .expect(404);\n          |                  ^\n      261 |\n      262 |             expect(response.body.success).toBe(false);\n      263 |             expect(response.body.error).toBe('Integration not found');\n\n      at Object.expect (tests/unit/routes/user.test.js:260:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › POST /api/user/preferences › should save user preferences successfully\n\n    expected 200 \"OK\", got 500 \"Internal Server Error\"\n\n      311 |                 .post('/api/user/preferences')\n      312 |                 .send(preferences)\n    > 313 |                 .expect(200);\n          |                  ^\n      314 |\n      315 |             expect(response.body.success).toBe(true);\n      316 |             expect(response.body.message).toBe('Preferences saved successfully');\n\n      at Object.expect (tests/unit/routes/user.test.js:313:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › Error Handling › should handle database errors gracefully\n\n    expected 500 \"Internal Server Error\", got 200 \"OK\"\n\n      485 |             const response = await request(app)\n      486 |                 .get('/api/user/integrations')\n    > 487 |                 .expect(500);\n          |                  ^\n      488 |\n      489 |             expect(response.body.success).toBe(false);\n      490 |             expect(response.body.error).toBe('Failed to retrieve integrations');\n\n      at Object.expect (tests/unit/routes/user.test.js:487:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › Error Handling › should handle unexpected errors in preferences endpoint\n\n    Unexpected error\n\n      492 |\n      493 |         it('should handle unexpected errors in preferences endpoint', async () => {\n    > 494 |             mockUserClient.update.mockRejectedValueOnce(new Error('Unexpected error'));\n          |                                                         ^\n      495 |\n      496 |             const response = await request(app)\n      497 |                 .post('/api/user/preferences')\n\n      at Object.<anonymous> (tests/unit/routes/user.test.js:494:57)\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 9 passed, 19 total\nSnapshots:   0 total\nTime:        0.258 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/routes\\/user.test.js/i.\n",
    "error": "Command failed: ENABLE_MOCK_MODE=true npx jest tests/unit/routes/user.test.js --verbose --no-coverage --passWithNoTests\nFAIL node-tests tests/unit/routes/user.test.js\n  User Routes Tests\n    GET /api/user/integrations\n      ✕ should return user integrations successfully (20 ms)\n      ✕ should return error if user organization not found (2 ms)\n    POST /api/user/integrations/connect\n      ✕ should connect new platform successfully (6 ms)\n      ✕ should update existing platform successfully (2 ms)\n      ✕ should return error for invalid platform (2 ms)\n      ✓ should return error for missing platform (1 ms)\n    POST /api/user/integrations/disconnect\n      ✕ should disconnect platform successfully (1 ms)\n      ✕ should return error if integration not found (3 ms)\n      ✓ should return error for missing platform (3 ms)\n    POST /api/user/preferences\n      ✕ should save user preferences successfully (2 ms)\n      ✓ should return error for invalid humor tone (2 ms)\n      ✓ should return error for invalid humor style (1 ms)\n      ✓ should return error for invalid platforms (1 ms)\n      ✓ should handle empty preferences with defaults (2 ms)\n    GET /api/user/profile\n      ✓ should return user profile successfully (1 ms)\n      ✓ should return error if user not found (1 ms)\n    Authentication Middleware Integration\n      ✓ should require authentication for all user routes (2 ms)\n    Error Handling\n      ✕ should handle database errors gracefully (1 ms)\n      ✕ should handle unexpected errors in preferences endpoint (2 ms)\n\n  ● User Routes Tests › GET /api/user/integrations › should return user integrations successfully\n\n    expect(received).toMatchObject(expected)\n\n    - Expected  - 2\n    + Received  + 1\n\n      Object {\n    -   \"enabled\": true,\n        \"platform\": \"twitter\",\n    -   \"status\": \"connected\",\n    +   \"status\": \"disconnected\",\n      }\n\n      87 |             expect(response.body.success).toBe(true);\n      88 |             expect(response.body.data).toHaveLength(9); // All 9 platforms\n    > 89 |             expect(response.body.data.find(p => p.platform === 'twitter')).toMatchObject({\n         |                                                                            ^\n      90 |                 platform: 'twitter',\n      91 |                 status: 'connected',\n      92 |                 enabled: true\n\n      at Object.toMatchObject (tests/unit/routes/user.test.js:89:76)\n\n  ● User Routes Tests › GET /api/user/integrations › should return error if user organization not found\n\n    expected 404 \"Not Found\", got 200 \"OK\"\n\n      102 |             const response = await request(app)\n      103 |                 .get('/api/user/integrations')\n    > 104 |                 .expect(404);\n          |                  ^\n      105 |\n      106 |             expect(response.body.success).toBe(false);\n      107 |             expect(response.body.error).toBe('User organization not found');\n\n      at Object.expect (tests/unit/routes/user.test.js:104:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › POST /api/user/integrations/connect › should connect new platform successfully\n\n    expected 200 \"OK\", got 500 \"Internal Server Error\"\n\n      143 |                 .post('/api/user/integrations/connect')\n      144 |                 .send({ platform: 'twitter' })\n    > 145 |                 .expect(200);\n          |                  ^\n      146 |\n      147 |             expect(response.body.success).toBe(true);\n      148 |             expect(response.body.message).toBe('twitter connected successfully');\n\n      at Object.expect (tests/unit/routes/user.test.js:145:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › POST /api/user/integrations/connect › should update existing platform successfully\n\n    expected 200 \"OK\", got 500 \"Internal Server Error\"\n\n      176 |                 .post('/api/user/integrations/connect')\n      177 |                 .send({ platform: 'twitter' })\n    > 178 |                 .expect(200);\n          |                  ^\n      179 |\n      180 |             expect(response.body.success).toBe(true);\n      181 |             expect(response.body.data.status).toBe('connected');\n\n      at Object.expect (tests/unit/routes/user.test.js:178:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › POST /api/user/integrations/connect › should return error for invalid platform\n\n    expected 400 \"Bad Request\", got 500 \"Internal Server Error\"\n\n      187 |                 .post('/api/user/integrations/connect')\n      188 |                 .send({ platform: 'invalid-platform' })\n    > 189 |                 .expect(400);\n          |                  ^\n      190 |\n      191 |             expect(response.body.success).toBe(false);\n      192 |             expect(response.body.error).toBe('Invalid platform');\n\n      at Object.expect (tests/unit/routes/user.test.js:189:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › POST /api/user/integrations/disconnect › should disconnect platform successfully\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      246 |             expect(response.body.message).toBe('twitter disconnected successfully');\n      247 |             expect(response.body.data.status).toBe('disconnected');\n    > 248 |             expect(mockUserClient.update).toHaveBeenCalled();\n          |                                           ^\n      249 |         });\n      250 |\n      251 |         it('should return error if integration not found', async () => {\n\n      at Object.toHaveBeenCalled (tests/unit/routes/user.test.js:248:43)\n\n  ● User Routes Tests › POST /api/user/integrations/disconnect › should return error if integration not found\n\n    expected 404 \"Not Found\", got 200 \"OK\"\n\n      258 |                 .post('/api/user/integrations/disconnect')\n      259 |                 .send({ platform: 'twitter' })\n    > 260 |                 .expect(404);\n          |                  ^\n      261 |\n      262 |             expect(response.body.success).toBe(false);\n      263 |             expect(response.body.error).toBe('Integration not found');\n\n      at Object.expect (tests/unit/routes/user.test.js:260:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › POST /api/user/preferences › should save user preferences successfully\n\n    expected 200 \"OK\", got 500 \"Internal Server Error\"\n\n      311 |                 .post('/api/user/preferences')\n      312 |                 .send(preferences)\n    > 313 |                 .expect(200);\n          |                  ^\n      314 |\n      315 |             expect(response.body.success).toBe(true);\n      316 |             expect(response.body.message).toBe('Preferences saved successfully');\n\n      at Object.expect (tests/unit/routes/user.test.js:313:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › Error Handling › should handle database errors gracefully\n\n    expected 500 \"Internal Server Error\", got 200 \"OK\"\n\n      485 |             const response = await request(app)\n      486 |                 .get('/api/user/integrations')\n    > 487 |                 .expect(500);\n          |                  ^\n      488 |\n      489 |             expect(response.body.success).toBe(false);\n      490 |             expect(response.body.error).toBe('Failed to retrieve integrations');\n\n      at Object.expect (tests/unit/routes/user.test.js:487:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● User Routes Tests › Error Handling › should handle unexpected errors in preferences endpoint\n\n    Unexpected error\n\n      492 |\n      493 |         it('should handle unexpected errors in preferences endpoint', async () => {\n    > 494 |             mockUserClient.update.mockRejectedValueOnce(new Error('Unexpected error'));\n          |                                                         ^\n      495 |\n      496 |             const response = await request(app)\n      497 |                 .post('/api/user/preferences')\n\n      at Object.<anonymous> (tests/unit/routes/user.test.js:494:57)\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 9 passed, 19 total\nSnapshots:   0 total\nTime:        0.258 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/routes\\/user.test.js/i.\n"
  },
  {
    "file": "tests/unit/routes/billing.test.js",
    "passed": false,
    "output": "FAIL node-tests tests/unit/routes/billing.test.js\n  Billing Routes Tests\n    GET /api/billing/plans\n      ✓ should return available subscription plans (18 ms)\n    POST /api/billing/create-checkout-session\n      ✕ should create checkout session successfully for Pro plan (6 ms)\n      ✕ should return error for missing lookupKey (3 ms)\n      ✕ should return error for invalid lookupKey (1 ms)\n      ✕ should use existing customer if available (2 ms)\n    POST /api/billing/create-portal-session\n      ✕ should create portal session successfully (2 ms)\n      ✕ should return error when no subscription found (1 ms)\n    GET /api/billing/subscription\n      ✕ should return user subscription details (4 ms)\n      ✕ should return error when database fails (3 ms)\n    POST /webhooks/stripe\n      ✕ should handle checkout.session.completed event (2 ms)\n      ✕ should return error for invalid webhook signature (1 ms)\n      ✕ should handle unrecognized webhook events (1 ms)\n      ○ skipped should handle customer.subscription.updated event\n      ○ skipped should handle customer.subscription.deleted event\n    Error Handling\n      ✕ should handle Stripe API errors gracefully (1 ms)\n      ✕ should handle database errors (1 ms)\n    Authentication\n      ✓ should require authentication for protected routes (1 ms)\n\n  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should create checkout session successfully for Pro plan\n\n    expected 200 \"OK\", got 503 \"Service Unavailable\"\n\n      163 |                 .post('/api/billing/create-checkout-session')\n      164 |                 .send({ lookupKey: 'plan_pro' })\n    > 165 |                 .expect(200);\n          |                  ^\n      166 |\n      167 |             expect(response.body.success).toBe(true);\n      168 |             expect(response.body.data.url).toBe('https://checkout.stripe.com/pay/cs_test123');\n\n      at Object.expect (tests/unit/routes/billing.test.js:165:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should return error for missing lookupKey\n\n    expected 400 \"Bad Request\", got 503 \"Service Unavailable\"\n\n      180 |                 .post('/api/billing/create-checkout-session')\n      181 |                 .send({})\n    > 182 |                 .expect(400);\n          |                  ^\n      183 |\n      184 |             expect(response.body.success).toBe(false);\n      185 |             expect(response.body.error).toBe('lookupKey is required');\n\n      at Object.expect (tests/unit/routes/billing.test.js:182:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should return error for invalid lookupKey\n\n    expected 400 \"Bad Request\", got 503 \"Service Unavailable\"\n\n      190 |                 .post('/api/billing/create-checkout-session')\n      191 |                 .send({ lookupKey: 'invalid_key' })\n    > 192 |                 .expect(400);\n          |                  ^\n      193 |\n      194 |             expect(response.body.success).toBe(false);\n      195 |             expect(response.body.error).toBe('Invalid lookup key');\n\n      at Object.expect (tests/unit/routes/billing.test.js:192:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should use existing customer if available\n\n    expected 200 \"OK\", got 503 \"Service Unavailable\"\n\n      227 |                 .post('/api/billing/create-checkout-session')\n      228 |                 .send({ lookupKey: 'plan_pro' })\n    > 229 |                 .expect(200);\n          |                  ^\n      230 |\n      231 |             expect(response.body.success).toBe(true);\n      232 |             expect(mockStripe.customers.create).not.toHaveBeenCalled();\n\n      at Object.expect (tests/unit/routes/billing.test.js:229:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /api/billing/create-portal-session › should create portal session successfully\n\n    expected 200 \"OK\", got 503 \"Service Unavailable\"\n\n      251 |             const response = await request(app)\n      252 |                 .post('/api/billing/create-portal-session')\n    > 253 |                 .expect(200);\n          |                  ^\n      254 |\n      255 |             expect(response.body.success).toBe(true);\n      256 |             expect(response.body.data.url).toBe('https://billing.stripe.com/portal/bps_test123');\n\n      at Object.expect (tests/unit/routes/billing.test.js:253:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /api/billing/create-portal-session › should return error when no subscription found\n\n    expected 400 \"Bad Request\", got 503 \"Service Unavailable\"\n\n      269 |             const response = await request(app)\n      270 |                 .post('/api/billing/create-portal-session')\n    > 271 |                 .expect(400);\n          |                  ^\n      272 |\n      273 |             expect(response.body.success).toBe(false);\n      274 |             expect(response.body.error).toBe('No active subscription found');\n\n      at Object.expect (tests/unit/routes/billing.test.js:271:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › GET /api/billing/subscription › should return user subscription details\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 3\n\n      Object {\n    -   \"plan\": \"pro\",\n    +   \"plan\": \"free\",\n        \"status\": \"active\",\n    -   \"stripe_customer_id\": \"cus_test123\",\n    -   \"stripe_subscription_id\": \"sub_test123\",\n    +   \"stripe_customer_id\": null,\n    +   \"stripe_subscription_id\": null,\n        \"user_id\": \"test-user-id\",\n      }\n\n      296 |\n      297 |             expect(response.body.success).toBe(true);\n    > 298 |             expect(response.body.data.subscription).toEqual(mockSubscription);\n          |                                                     ^\n      299 |             expect(response.body.data.planConfig).toBeDefined();\n      300 |             expect(response.body.data.planConfig.name).toBe('Pro');\n      301 |         });\n\n      at Object.toEqual (tests/unit/routes/billing.test.js:298:53)\n\n  ● Billing Routes Tests › GET /api/billing/subscription › should return error when database fails\n\n    expected 500 \"Internal Server Error\", got 200 \"OK\"\n\n      309 |             const response = await request(app)\n      310 |                 .get('/api/billing/subscription')\n    > 311 |                 .expect(500);\n          |                  ^\n      312 |\n      313 |             expect(response.body.success).toBe(false);\n      314 |             expect(response.body.error).toBe('Failed to fetch subscription');\n\n      at Object.expect (tests/unit/routes/billing.test.js:311:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /webhooks/stripe › should handle checkout.session.completed event\n\n    expected 200 \"OK\", got 503 \"Service Unavailable\"\n\n      363 |                 .set('stripe-signature', mockSignature)\n      364 |                 .send(Buffer.from(JSON.stringify(mockEvent)))\n    > 365 |                 .expect(200);\n          |                  ^\n      366 |\n      367 |             expect(response.body.received).toBe(true);\n      368 |             expect(mockSupabaseServiceClient.upsert).toHaveBeenCalledWith({\n\n      at Object.expect (tests/unit/routes/billing.test.js:365:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /webhooks/stripe › should return error for invalid webhook signature\n\n    expected 400 \"Bad Request\", got 503 \"Service Unavailable\"\n\n      399 |                 .set('stripe-signature', 'invalid-signature')\n      400 |                 .send(Buffer.from('{}'))\n    > 401 |                 .expect(400);\n          |                  ^\n      402 |\n      403 |             expect(response.text).toContain('Webhook Error: Invalid signature');\n      404 |         });\n\n      at Object.expect (tests/unit/routes/billing.test.js:401:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /webhooks/stripe › should handle unrecognized webhook events\n\n    expected 200 \"OK\", got 503 \"Service Unavailable\"\n\n      418 |                 .set('stripe-signature', mockSignature)\n      419 |                 .send(Buffer.from(JSON.stringify(mockEvent)))\n    > 420 |                 .expect(200);\n          |                  ^\n      421 |\n      422 |             expect(response.body.received).toBe(true);\n      423 |         });\n\n      at Object.expect (tests/unit/routes/billing.test.js:420:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › Error Handling › should handle Stripe API errors gracefully\n\n    expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"\n\n      440 |                 .post('/api/billing/create-checkout-session')\n      441 |                 .send({ lookupKey: 'plan_pro' })\n    > 442 |                 .expect(500);\n          |                  ^\n      443 |\n      444 |             expect(response.body.success).toBe(false);\n      445 |             expect(response.body.error).toBe('Failed to create checkout session');\n\n      at Object.expect (tests/unit/routes/billing.test.js:442:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › Error Handling › should handle database errors\n\n    expected 500 \"Internal Server Error\", got 200 \"OK\"\n\n      454 |             const response = await request(app)\n      455 |                 .get('/api/billing/subscription')\n    > 456 |                 .expect(500);\n          |                  ^\n      457 |\n      458 |             expect(response.body.success).toBe(false);\n      459 |             expect(response.body.error).toBe('Failed to fetch subscription details');\n\n      at Object.expect (tests/unit/routes/billing.test.js:456:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\nTest Suites: 1 failed, 1 total\nTests:       13 failed, 2 skipped, 2 passed, 17 total\nSnapshots:   0 total\nTime:        0.214 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/routes\\/billing.test.js/i.\n",
    "error": "Command failed: ENABLE_MOCK_MODE=true npx jest tests/unit/routes/billing.test.js --verbose --no-coverage --passWithNoTests\nFAIL node-tests tests/unit/routes/billing.test.js\n  Billing Routes Tests\n    GET /api/billing/plans\n      ✓ should return available subscription plans (18 ms)\n    POST /api/billing/create-checkout-session\n      ✕ should create checkout session successfully for Pro plan (6 ms)\n      ✕ should return error for missing lookupKey (3 ms)\n      ✕ should return error for invalid lookupKey (1 ms)\n      ✕ should use existing customer if available (2 ms)\n    POST /api/billing/create-portal-session\n      ✕ should create portal session successfully (2 ms)\n      ✕ should return error when no subscription found (1 ms)\n    GET /api/billing/subscription\n      ✕ should return user subscription details (4 ms)\n      ✕ should return error when database fails (3 ms)\n    POST /webhooks/stripe\n      ✕ should handle checkout.session.completed event (2 ms)\n      ✕ should return error for invalid webhook signature (1 ms)\n      ✕ should handle unrecognized webhook events (1 ms)\n      ○ skipped should handle customer.subscription.updated event\n      ○ skipped should handle customer.subscription.deleted event\n    Error Handling\n      ✕ should handle Stripe API errors gracefully (1 ms)\n      ✕ should handle database errors (1 ms)\n    Authentication\n      ✓ should require authentication for protected routes (1 ms)\n\n  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should create checkout session successfully for Pro plan\n\n    expected 200 \"OK\", got 503 \"Service Unavailable\"\n\n      163 |                 .post('/api/billing/create-checkout-session')\n      164 |                 .send({ lookupKey: 'plan_pro' })\n    > 165 |                 .expect(200);\n          |                  ^\n      166 |\n      167 |             expect(response.body.success).toBe(true);\n      168 |             expect(response.body.data.url).toBe('https://checkout.stripe.com/pay/cs_test123');\n\n      at Object.expect (tests/unit/routes/billing.test.js:165:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should return error for missing lookupKey\n\n    expected 400 \"Bad Request\", got 503 \"Service Unavailable\"\n\n      180 |                 .post('/api/billing/create-checkout-session')\n      181 |                 .send({})\n    > 182 |                 .expect(400);\n          |                  ^\n      183 |\n      184 |             expect(response.body.success).toBe(false);\n      185 |             expect(response.body.error).toBe('lookupKey is required');\n\n      at Object.expect (tests/unit/routes/billing.test.js:182:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should return error for invalid lookupKey\n\n    expected 400 \"Bad Request\", got 503 \"Service Unavailable\"\n\n      190 |                 .post('/api/billing/create-checkout-session')\n      191 |                 .send({ lookupKey: 'invalid_key' })\n    > 192 |                 .expect(400);\n          |                  ^\n      193 |\n      194 |             expect(response.body.success).toBe(false);\n      195 |             expect(response.body.error).toBe('Invalid lookup key');\n\n      at Object.expect (tests/unit/routes/billing.test.js:192:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /api/billing/create-checkout-session › should use existing customer if available\n\n    expected 200 \"OK\", got 503 \"Service Unavailable\"\n\n      227 |                 .post('/api/billing/create-checkout-session')\n      228 |                 .send({ lookupKey: 'plan_pro' })\n    > 229 |                 .expect(200);\n          |                  ^\n      230 |\n      231 |             expect(response.body.success).toBe(true);\n      232 |             expect(mockStripe.customers.create).not.toHaveBeenCalled();\n\n      at Object.expect (tests/unit/routes/billing.test.js:229:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /api/billing/create-portal-session › should create portal session successfully\n\n    expected 200 \"OK\", got 503 \"Service Unavailable\"\n\n      251 |             const response = await request(app)\n      252 |                 .post('/api/billing/create-portal-session')\n    > 253 |                 .expect(200);\n          |                  ^\n      254 |\n      255 |             expect(response.body.success).toBe(true);\n      256 |             expect(response.body.data.url).toBe('https://billing.stripe.com/portal/bps_test123');\n\n      at Object.expect (tests/unit/routes/billing.test.js:253:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /api/billing/create-portal-session › should return error when no subscription found\n\n    expected 400 \"Bad Request\", got 503 \"Service Unavailable\"\n\n      269 |             const response = await request(app)\n      270 |                 .post('/api/billing/create-portal-session')\n    > 271 |                 .expect(400);\n          |                  ^\n      272 |\n      273 |             expect(response.body.success).toBe(false);\n      274 |             expect(response.body.error).toBe('No active subscription found');\n\n      at Object.expect (tests/unit/routes/billing.test.js:271:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › GET /api/billing/subscription › should return user subscription details\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 3\n    + Received  + 3\n\n      Object {\n    -   \"plan\": \"pro\",\n    +   \"plan\": \"free\",\n        \"status\": \"active\",\n    -   \"stripe_customer_id\": \"cus_test123\",\n    -   \"stripe_subscription_id\": \"sub_test123\",\n    +   \"stripe_customer_id\": null,\n    +   \"stripe_subscription_id\": null,\n        \"user_id\": \"test-user-id\",\n      }\n\n      296 |\n      297 |             expect(response.body.success).toBe(true);\n    > 298 |             expect(response.body.data.subscription).toEqual(mockSubscription);\n          |                                                     ^\n      299 |             expect(response.body.data.planConfig).toBeDefined();\n      300 |             expect(response.body.data.planConfig.name).toBe('Pro');\n      301 |         });\n\n      at Object.toEqual (tests/unit/routes/billing.test.js:298:53)\n\n  ● Billing Routes Tests › GET /api/billing/subscription › should return error when database fails\n\n    expected 500 \"Internal Server Error\", got 200 \"OK\"\n\n      309 |             const response = await request(app)\n      310 |                 .get('/api/billing/subscription')\n    > 311 |                 .expect(500);\n          |                  ^\n      312 |\n      313 |             expect(response.body.success).toBe(false);\n      314 |             expect(response.body.error).toBe('Failed to fetch subscription');\n\n      at Object.expect (tests/unit/routes/billing.test.js:311:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /webhooks/stripe › should handle checkout.session.completed event\n\n    expected 200 \"OK\", got 503 \"Service Unavailable\"\n\n      363 |                 .set('stripe-signature', mockSignature)\n      364 |                 .send(Buffer.from(JSON.stringify(mockEvent)))\n    > 365 |                 .expect(200);\n          |                  ^\n      366 |\n      367 |             expect(response.body.received).toBe(true);\n      368 |             expect(mockSupabaseServiceClient.upsert).toHaveBeenCalledWith({\n\n      at Object.expect (tests/unit/routes/billing.test.js:365:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /webhooks/stripe › should return error for invalid webhook signature\n\n    expected 400 \"Bad Request\", got 503 \"Service Unavailable\"\n\n      399 |                 .set('stripe-signature', 'invalid-signature')\n      400 |                 .send(Buffer.from('{}'))\n    > 401 |                 .expect(400);\n          |                  ^\n      402 |\n      403 |             expect(response.text).toContain('Webhook Error: Invalid signature');\n      404 |         });\n\n      at Object.expect (tests/unit/routes/billing.test.js:401:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › POST /webhooks/stripe › should handle unrecognized webhook events\n\n    expected 200 \"OK\", got 503 \"Service Unavailable\"\n\n      418 |                 .set('stripe-signature', mockSignature)\n      419 |                 .send(Buffer.from(JSON.stringify(mockEvent)))\n    > 420 |                 .expect(200);\n          |                  ^\n      421 |\n      422 |             expect(response.body.received).toBe(true);\n      423 |         });\n\n      at Object.expect (tests/unit/routes/billing.test.js:420:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › Error Handling › should handle Stripe API errors gracefully\n\n    expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"\n\n      440 |                 .post('/api/billing/create-checkout-session')\n      441 |                 .send({ lookupKey: 'plan_pro' })\n    > 442 |                 .expect(500);\n          |                  ^\n      443 |\n      444 |             expect(response.body.success).toBe(false);\n      445 |             expect(response.body.error).toBe('Failed to create checkout session');\n\n      at Object.expect (tests/unit/routes/billing.test.js:442:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\n  ● Billing Routes Tests › Error Handling › should handle database errors\n\n    expected 500 \"Internal Server Error\", got 200 \"OK\"\n\n      454 |             const response = await request(app)\n      455 |                 .get('/api/billing/subscription')\n    > 456 |                 .expect(500);\n          |                  ^\n      457 |\n      458 |             expect(response.body.success).toBe(false);\n      459 |             expect(response.body.error).toBe('Failed to fetch subscription details');\n\n      at Object.expect (tests/unit/routes/billing.test.js:456:18)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:309:14)\n      at node_modules/supertest/lib/test.js:365:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:342:13)\n      at Test.assert (node_modules/supertest/lib/test.js:195:23)\n      at localAssert (node_modules/supertest/lib/test.js:138:14)\n      at Server.<anonymous> (node_modules/supertest/lib/test.js:152:11)\n\nTest Suites: 1 failed, 1 total\nTests:       13 failed, 2 skipped, 2 passed, 17 total\nSnapshots:   0 total\nTime:        0.214 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/routes\\/billing.test.js/i.\n"
  },
  {
    "file": "tests/unit/config/__tests__/flags.test.js",
    "passed": false,
    "output": "FAIL node-tests tests/unit/config/__tests__/flags.test.js\n  Feature Flags Configuration\n    Flag loading from environment variables\n      ✕ loads ENABLE_RQC flag from environment (3 ms)\n      ✓ ENABLE_RQC defaults to false when not set (1 ms)\n      ✕ loads VERBOSE_LOGS flag from environment\n      ✓ VERBOSE_LOGS defaults to false when not set\n      ✕ loads MOCK_MODE flag from environment (1 ms)\n    mock mode detection\n      ✕ detects missing API keys for mock mode\n      ✓ uses real mode when all critical API keys are present\n      ✕ detects partial API keys and uses mock mode\n      ✕ respects explicit MOCK_MODE=true\n    API integrations detection\n      ✓ detects OpenAI availability (1 ms)\n      ✕ detects missing OpenAI key\n      ✕ detects Supabase availability\n      ✕ detects Twitter API keys\n    Boolean parsing and flag methods\n      ✕ parses \"true\" string as boolean true\n      ✓ treats non-true strings as false\n      ✓ treats undefined as false\n      ✓ getAllFlags returns all flag status (1 ms)\n    Flag object structure\n      ✕ exports flags instance with expected methods (1 ms)\n      ✓ isEnabled method works correctly\n      ✕ basic flag functionality works\n    Environment scenarios\n      ✕ development environment enables debug logs\n      ✓ production environment with minimal flags\n      ✓ test environment behavior\n\n  ● Feature Flags Configuration › Flag loading from environment variables › loads ENABLE_RQC flag from environment\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      21 |       const testFlags = new FeatureFlags();\n      22 |       \n    > 23 |       expect(testFlags.isEnabled('ENABLE_RQC')).toBe(true);\n         |                                                 ^\n      24 |       \n      25 |       // Restore\n      26 |       process.env = originalEnv;\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:23:49)\n\n  ● Feature Flags Configuration › Flag loading from environment variables › loads VERBOSE_LOGS flag from environment\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      51 |       const testFlags = new FeatureFlags();\n      52 |       \n    > 53 |       expect(testFlags.isEnabled('VERBOSE_LOGS')).toBe(true);\n         |                                                   ^\n      54 |       \n      55 |       process.env = originalEnv;\n      56 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:53:51)\n\n  ● Feature Flags Configuration › Flag loading from environment variables › loads MOCK_MODE flag from environment\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      80 |       const testFlags = new FeatureFlags();\n      81 |       \n    > 82 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);\n         |                                                ^\n      83 |       \n      84 |       process.env = originalEnv;\n      85 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:82:48)\n\n  ● Feature Flags Configuration › mock mode detection › detects missing API keys for mock mode\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n       99 |       const testFlags = new FeatureFlags();\n      100 |       \n    > 101 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);\n          |                                                ^\n      102 |       \n      103 |       process.env = originalEnv;\n      104 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:101:48)\n\n  ● Feature Flags Configuration › mock mode detection › detects partial API keys and uses mock mode\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      139 |       const testFlags = new FeatureFlags();\n      140 |       \n    > 141 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);\n          |                                                ^\n      142 |       \n      143 |       process.env = originalEnv;\n      144 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:141:48)\n\n  ● Feature Flags Configuration › mock mode detection › respects explicit MOCK_MODE=true\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      159 |       const testFlags = new FeatureFlags();\n      160 |       \n    > 161 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);\n          |                                                ^\n      162 |       \n      163 |       process.env = originalEnv;\n      164 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:161:48)\n\n  ● Feature Flags Configuration › API integrations detection › detects missing OpenAI key\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      190 |       const testFlags = new FeatureFlags();\n      191 |       \n    > 192 |       expect(testFlags.isEnabled('ENABLE_REAL_OPENAI')).toBe(false);\n          |                                                         ^\n      193 |       \n      194 |       process.env = originalEnv;\n      195 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:192:57)\n\n  ● Feature Flags Configuration › API integrations detection › detects Supabase availability\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      208 |       const testFlags = new FeatureFlags();\n      209 |       \n    > 210 |       expect(testFlags.isEnabled('ENABLE_SUPABASE')).toBe(true);\n          |                                                      ^\n      211 |       \n      212 |       process.env = originalEnv;\n      213 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:210:54)\n\n  ● Feature Flags Configuration › API integrations detection › detects Twitter API keys\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      227 |       const testFlags = new FeatureFlags();\n      228 |       \n    > 229 |       expect(testFlags.isEnabled('ENABLE_REAL_TWITTER')).toBe(true);\n          |                                                          ^\n      230 |       \n      231 |       process.env = originalEnv;\n      232 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:229:58)\n\n  ● Feature Flags Configuration › Boolean parsing and flag methods › parses \"true\" string as boolean true\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      243 |       const testFlags = new FeatureFlags();\n      244 |       \n    > 245 |       expect(testFlags.isEnabled('ENABLE_RQC')).toBe(true);\n          |                                                 ^\n      246 |       \n      247 |       process.env = originalEnv;\n      248 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:245:49)\n\n  ● Feature Flags Configuration › Flag object structure › exports flags instance with expected methods\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"function\"\n    Received: \"undefined\"\n\n      300 |       expect(typeof testInstance.isEnabled).toBe('function');\n      301 |       expect(typeof testInstance.getAllFlags).toBe('function');\n    > 302 |       expect(typeof testInstance.getServiceStatus).toBe('function');\n          |                                                    ^\n      303 |     });\n      304 |\n      305 |     test('isEnabled method works correctly', () => {\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:302:52)\n\n  ● Feature Flags Configuration › Flag object structure › basic flag functionality works\n\n    TypeError: testFlags.getServiceStatus is not a function\n\n      321 |       expect(typeof testFlags.isEnabled('ENABLE_RQC')).toBe('boolean');\n      322 |       expect(typeof testFlags.getAllFlags()).toBe('object');\n    > 323 |       expect(typeof testFlags.getServiceStatus()).toBe('object');\n          |                               ^\n      324 |     });\n      325 |   });\n      326 |\n\n      at Object.getServiceStatus (tests/unit/config/__tests__/flags.test.js:323:31)\n\n  ● Feature Flags Configuration › Environment scenarios › development environment enables debug logs\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      335 |       const testFlags = new FeatureFlags();\n      336 |       \n    > 337 |       expect(testFlags.isEnabled('ENABLE_DEBUG_LOGS')).toBe(true);\n          |                                                        ^\n      338 |       \n      339 |       process.env = originalEnv;\n      340 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:337:56)\n\nTest Suites: 1 failed, 1 total\nTests:       13 failed, 10 passed, 23 total\nSnapshots:   0 total\nTime:        0.117 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/config\\/__tests__\\/flags.test.js/i.\n",
    "error": "Command failed: ENABLE_MOCK_MODE=true npx jest tests/unit/config/__tests__/flags.test.js --verbose --no-coverage --passWithNoTests\nFAIL node-tests tests/unit/config/__tests__/flags.test.js\n  Feature Flags Configuration\n    Flag loading from environment variables\n      ✕ loads ENABLE_RQC flag from environment (3 ms)\n      ✓ ENABLE_RQC defaults to false when not set (1 ms)\n      ✕ loads VERBOSE_LOGS flag from environment\n      ✓ VERBOSE_LOGS defaults to false when not set\n      ✕ loads MOCK_MODE flag from environment (1 ms)\n    mock mode detection\n      ✕ detects missing API keys for mock mode\n      ✓ uses real mode when all critical API keys are present\n      ✕ detects partial API keys and uses mock mode\n      ✕ respects explicit MOCK_MODE=true\n    API integrations detection\n      ✓ detects OpenAI availability (1 ms)\n      ✕ detects missing OpenAI key\n      ✕ detects Supabase availability\n      ✕ detects Twitter API keys\n    Boolean parsing and flag methods\n      ✕ parses \"true\" string as boolean true\n      ✓ treats non-true strings as false\n      ✓ treats undefined as false\n      ✓ getAllFlags returns all flag status (1 ms)\n    Flag object structure\n      ✕ exports flags instance with expected methods (1 ms)\n      ✓ isEnabled method works correctly\n      ✕ basic flag functionality works\n    Environment scenarios\n      ✕ development environment enables debug logs\n      ✓ production environment with minimal flags\n      ✓ test environment behavior\n\n  ● Feature Flags Configuration › Flag loading from environment variables › loads ENABLE_RQC flag from environment\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      21 |       const testFlags = new FeatureFlags();\n      22 |       \n    > 23 |       expect(testFlags.isEnabled('ENABLE_RQC')).toBe(true);\n         |                                                 ^\n      24 |       \n      25 |       // Restore\n      26 |       process.env = originalEnv;\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:23:49)\n\n  ● Feature Flags Configuration › Flag loading from environment variables › loads VERBOSE_LOGS flag from environment\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      51 |       const testFlags = new FeatureFlags();\n      52 |       \n    > 53 |       expect(testFlags.isEnabled('VERBOSE_LOGS')).toBe(true);\n         |                                                   ^\n      54 |       \n      55 |       process.env = originalEnv;\n      56 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:53:51)\n\n  ● Feature Flags Configuration › Flag loading from environment variables › loads MOCK_MODE flag from environment\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      80 |       const testFlags = new FeatureFlags();\n      81 |       \n    > 82 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);\n         |                                                ^\n      83 |       \n      84 |       process.env = originalEnv;\n      85 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:82:48)\n\n  ● Feature Flags Configuration › mock mode detection › detects missing API keys for mock mode\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n       99 |       const testFlags = new FeatureFlags();\n      100 |       \n    > 101 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);\n          |                                                ^\n      102 |       \n      103 |       process.env = originalEnv;\n      104 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:101:48)\n\n  ● Feature Flags Configuration › mock mode detection › detects partial API keys and uses mock mode\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      139 |       const testFlags = new FeatureFlags();\n      140 |       \n    > 141 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);\n          |                                                ^\n      142 |       \n      143 |       process.env = originalEnv;\n      144 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:141:48)\n\n  ● Feature Flags Configuration › mock mode detection › respects explicit MOCK_MODE=true\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      159 |       const testFlags = new FeatureFlags();\n      160 |       \n    > 161 |       expect(testFlags.isEnabled('MOCK_MODE')).toBe(true);\n          |                                                ^\n      162 |       \n      163 |       process.env = originalEnv;\n      164 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:161:48)\n\n  ● Feature Flags Configuration › API integrations detection › detects missing OpenAI key\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      190 |       const testFlags = new FeatureFlags();\n      191 |       \n    > 192 |       expect(testFlags.isEnabled('ENABLE_REAL_OPENAI')).toBe(false);\n          |                                                         ^\n      193 |       \n      194 |       process.env = originalEnv;\n      195 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:192:57)\n\n  ● Feature Flags Configuration › API integrations detection › detects Supabase availability\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      208 |       const testFlags = new FeatureFlags();\n      209 |       \n    > 210 |       expect(testFlags.isEnabled('ENABLE_SUPABASE')).toBe(true);\n          |                                                      ^\n      211 |       \n      212 |       process.env = originalEnv;\n      213 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:210:54)\n\n  ● Feature Flags Configuration › API integrations detection › detects Twitter API keys\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      227 |       const testFlags = new FeatureFlags();\n      228 |       \n    > 229 |       expect(testFlags.isEnabled('ENABLE_REAL_TWITTER')).toBe(true);\n          |                                                          ^\n      230 |       \n      231 |       process.env = originalEnv;\n      232 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:229:58)\n\n  ● Feature Flags Configuration › Boolean parsing and flag methods › parses \"true\" string as boolean true\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      243 |       const testFlags = new FeatureFlags();\n      244 |       \n    > 245 |       expect(testFlags.isEnabled('ENABLE_RQC')).toBe(true);\n          |                                                 ^\n      246 |       \n      247 |       process.env = originalEnv;\n      248 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:245:49)\n\n  ● Feature Flags Configuration › Flag object structure › exports flags instance with expected methods\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"function\"\n    Received: \"undefined\"\n\n      300 |       expect(typeof testInstance.isEnabled).toBe('function');\n      301 |       expect(typeof testInstance.getAllFlags).toBe('function');\n    > 302 |       expect(typeof testInstance.getServiceStatus).toBe('function');\n          |                                                    ^\n      303 |     });\n      304 |\n      305 |     test('isEnabled method works correctly', () => {\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:302:52)\n\n  ● Feature Flags Configuration › Flag object structure › basic flag functionality works\n\n    TypeError: testFlags.getServiceStatus is not a function\n\n      321 |       expect(typeof testFlags.isEnabled('ENABLE_RQC')).toBe('boolean');\n      322 |       expect(typeof testFlags.getAllFlags()).toBe('object');\n    > 323 |       expect(typeof testFlags.getServiceStatus()).toBe('object');\n          |                               ^\n      324 |     });\n      325 |   });\n      326 |\n\n      at Object.getServiceStatus (tests/unit/config/__tests__/flags.test.js:323:31)\n\n  ● Feature Flags Configuration › Environment scenarios › development environment enables debug logs\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      335 |       const testFlags = new FeatureFlags();\n      336 |       \n    > 337 |       expect(testFlags.isEnabled('ENABLE_DEBUG_LOGS')).toBe(true);\n          |                                                        ^\n      338 |       \n      339 |       process.env = originalEnv;\n      340 |     });\n\n      at Object.toBe (tests/unit/config/__tests__/flags.test.js:337:56)\n\nTest Suites: 1 failed, 1 total\nTests:       13 failed, 10 passed, 23 total\nSnapshots:   0 total\nTime:        0.117 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/config\\/__tests__\\/flags.test.js/i.\n"
  },
  {
    "file": "tests/unit/routes/plan.test.js",
    "passed": false,
    "output": "FAIL node-tests tests/unit/routes/plan.test.js\n  Plan Routes\n    GET /api/plan/available\n      ✓ should return all available plans (17 ms)\n    GET /api/plan/current\n      ✓ should require authentication (5 ms)\n      ✕ should return free plan for new user (2 ms)\n    POST /api/plan/select\n      ✓ should require authentication (5 ms)\n      ✕ should require valid plan (2 ms)\n      ✕ should successfully select Creator+ plan (1 ms)\n      ✕ should successfully select Pro plan (1 ms)\n    GET /api/plan/features\n      ✕ should return feature comparison (1 ms)\n\n  ● Plan Routes › GET /api/plan/current › should return free plan for new user\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 401\n\n      49 |         .set('Authorization', `Bearer ${authToken}`);\n      50 |\n    > 51 |       expect(response.status).toBe(200);\n         |                               ^\n      52 |       expect(response.body.success).toBe(true);\n      53 |       expect(response.body.data.plan).toBe('free');\n      54 |       expect(response.body.data.canAccessStyleProfile).toBe(false);\n\n      at Object.toBe (tests/unit/routes/plan.test.js:51:31)\n\n  ● Plan Routes › POST /api/plan/select › should require valid plan\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 400\n    Received: 401\n\n      71 |         .send({ plan: 'invalid_plan' });\n      72 |\n    > 73 |       expect(response.status).toBe(400);\n         |                               ^\n      74 |       expect(response.body.error).toContain('Invalid plan selected');\n      75 |     });\n      76 |\n\n      at Object.toBe (tests/unit/routes/plan.test.js:73:31)\n\n  ● Plan Routes › POST /api/plan/select › should successfully select Creator+ plan\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 401\n\n      81 |         .send({ plan: 'creator_plus' });\n      82 |\n    > 83 |       expect(response.status).toBe(200);\n         |                               ^\n      84 |       expect(response.body.success).toBe(true);\n      85 |       expect(response.body.data.plan).toBe('creator_plus');\n      86 |       expect(response.body.data.details.features.styleProfile).toBe(true);\n\n      at Object.toBe (tests/unit/routes/plan.test.js:83:31)\n\n  ● Plan Routes › POST /api/plan/select › should successfully select Pro plan\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 401\n\n      93 |         .send({ plan: 'pro' });\n      94 |\n    > 95 |       expect(response.status).toBe(200);\n         |                               ^\n      96 |       expect(response.body.success).toBe(true);\n      97 |       expect(response.body.data.plan).toBe('pro');\n      98 |       expect(response.body.data.details.features.styleProfile).toBe(false);\n\n      at Object.toBe (tests/unit/routes/plan.test.js:95:31)\n\n  ● Plan Routes › GET /api/plan/features › should return feature comparison\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      109 |       expect(response.body.data.comparison).toBeInstanceOf(Array);\n      110 |       expect(response.body.data.comparison.length).toBe(3);\n    > 111 |       expect(response.body.data.styleProfileAvailable).toBe(true);\n          |                                                        ^\n      112 |\n      113 |       // Verify feature comparison structure\n      114 |       const features = response.body.data.comparison;\n\n      at Object.toBe (tests/unit/routes/plan.test.js:111:56)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 3 passed, 8 total\nSnapshots:   0 total\nTime:        0.339 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/routes\\/plan.test.js/i.\nJest did not exit one second after the test run has completed.\n\n'This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n",
    "error": "Command failed: ENABLE_MOCK_MODE=true npx jest tests/unit/routes/plan.test.js --verbose --no-coverage --passWithNoTests\nFAIL node-tests tests/unit/routes/plan.test.js\n  Plan Routes\n    GET /api/plan/available\n      ✓ should return all available plans (17 ms)\n    GET /api/plan/current\n      ✓ should require authentication (5 ms)\n      ✕ should return free plan for new user (2 ms)\n    POST /api/plan/select\n      ✓ should require authentication (5 ms)\n      ✕ should require valid plan (2 ms)\n      ✕ should successfully select Creator+ plan (1 ms)\n      ✕ should successfully select Pro plan (1 ms)\n    GET /api/plan/features\n      ✕ should return feature comparison (1 ms)\n\n  ● Plan Routes › GET /api/plan/current › should return free plan for new user\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 401\n\n      49 |         .set('Authorization', `Bearer ${authToken}`);\n      50 |\n    > 51 |       expect(response.status).toBe(200);\n         |                               ^\n      52 |       expect(response.body.success).toBe(true);\n      53 |       expect(response.body.data.plan).toBe('free');\n      54 |       expect(response.body.data.canAccessStyleProfile).toBe(false);\n\n      at Object.toBe (tests/unit/routes/plan.test.js:51:31)\n\n  ● Plan Routes › POST /api/plan/select › should require valid plan\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 400\n    Received: 401\n\n      71 |         .send({ plan: 'invalid_plan' });\n      72 |\n    > 73 |       expect(response.status).toBe(400);\n         |                               ^\n      74 |       expect(response.body.error).toContain('Invalid plan selected');\n      75 |     });\n      76 |\n\n      at Object.toBe (tests/unit/routes/plan.test.js:73:31)\n\n  ● Plan Routes › POST /api/plan/select › should successfully select Creator+ plan\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 401\n\n      81 |         .send({ plan: 'creator_plus' });\n      82 |\n    > 83 |       expect(response.status).toBe(200);\n         |                               ^\n      84 |       expect(response.body.success).toBe(true);\n      85 |       expect(response.body.data.plan).toBe('creator_plus');\n      86 |       expect(response.body.data.details.features.styleProfile).toBe(true);\n\n      at Object.toBe (tests/unit/routes/plan.test.js:83:31)\n\n  ● Plan Routes › POST /api/plan/select › should successfully select Pro plan\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 401\n\n      93 |         .send({ plan: 'pro' });\n      94 |\n    > 95 |       expect(response.status).toBe(200);\n         |                               ^\n      96 |       expect(response.body.success).toBe(true);\n      97 |       expect(response.body.data.plan).toBe('pro');\n      98 |       expect(response.body.data.details.features.styleProfile).toBe(false);\n\n      at Object.toBe (tests/unit/routes/plan.test.js:95:31)\n\n  ● Plan Routes › GET /api/plan/features › should return feature comparison\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: true\n    Received: false\n\n      109 |       expect(response.body.data.comparison).toBeInstanceOf(Array);\n      110 |       expect(response.body.data.comparison.length).toBe(3);\n    > 111 |       expect(response.body.data.styleProfileAvailable).toBe(true);\n          |                                                        ^\n      112 |\n      113 |       // Verify feature comparison structure\n      114 |       const features = response.body.data.comparison;\n\n      at Object.toBe (tests/unit/routes/plan.test.js:111:56)\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 3 passed, 8 total\nSnapshots:   0 total\nTime:        0.339 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/routes\\/plan.test.js/i.\nJest did not exit one second after the test run has completed.\n\n'This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n"
  },
  {
    "file": "tests/unit/frontend/billing.test.js",
    "passed": true,
    "output": "PASS node-tests tests/unit/frontend/billing.test.js\n  Billing Frontend Tests\n    Plans Data Loading\n      ✓ should load subscription data successfully (45 ms)\n      ✓ should load plans data successfully (6 ms)\n      ✓ should handle API errors gracefully (5 ms)\n    UI Manipulation\n      ✓ should show current plan badge for non-free plans (4 ms)\n      ✓ should show portal button for subscribed users (6 ms)\n      ✓ should render plans grid correctly (7 ms)\n    Checkout Session Creation\n      ✓ should handle checkout creation errors (4 ms)\n      ○ skipped should create checkout session successfully (JSDOM location redirect limitation)\n    Customer Portal\n      ○ skipped should open customer portal successfully (JSDOM location redirect limitation)\n    Message Display\n      ✓ should show error messages (7 ms)\n      ✓ should show success messages (8 ms)\n    Loading States\n      ✓ should show and hide loading overlay (4 ms)\n  Billing Success Page Tests\n    ✓ should extract session ID from URL (3 ms)\n    ✓ should update subscription display after webhook processing (3 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       2 skipped, 12 passed, 14 total\nSnapshots:   0 total\nTime:        0.552 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/frontend\\/billing.test.js/i.\n",
    "error": null
  },
  {
    "file": "tests/unit/middleware/requirePlan.test.js",
    "passed": true,
    "output": "PASS node-tests tests/unit/middleware/requirePlan.test.js\n  requirePlan Middleware Tests\n    Basic Plan Validation\n      ✓ should allow access for users with sufficient plan level (1 ms)\n      ✓ should deny access for users with insufficient plan level (1 ms)\n      ✓ should allow access for higher tier plans\n    Array Plan Validation\n      ✓ should allow access for exact plan matches\n      ✓ should deny access for non-matching plans (1 ms)\n    Subscription Status Validation\n      ✓ should allow access for active subscriptions\n      ✓ should deny access for inactive subscriptions\n      ✓ should allow access during trial period (1 ms)\n      ✓ should allow access for past_due subscriptions within grace period (1 ms)\n    Feature-based Access Control\n      ✓ should allow access to available features\n      ✓ should deny access to unavailable features\n    Authentication Validation\n      ✓ should require authentication (1 ms)\n    Database Error Handling\n      ✓ should handle database errors gracefully\n      ✓ should handle missing subscription data\n  requirePlatformLimit Middleware Tests\n    ✓ should allow within platform limits\n    ✓ should deny when exceeding platform limits (1 ms)\n    ✓ should allow unlimited platforms for creator_plus\n    ✓ should require subscription middleware to run first\n  checkRoastLimit Function Tests\n    ✓ should allow roasts within limits for free plan (2 ms)\n    ✓ should deny roasts when exceeding limits\n    ✓ should allow unlimited roasts for creator_plus plan\n    ✓ should handle database errors (9 ms)\n  Plan Configuration Tests\n    ✓ should have correct plan hierarchy\n    ✓ should have correct plan limits\n    ✓ should have correct feature access (1 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       25 passed, 25 total\nSnapshots:   0 total\nTime:        0.154 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/middleware\\/requirePlan.test.js/i.\n",
    "error": null
  },
  {
    "file": "tests/unit/middleware/isAdmin.test.js",
    "passed": true,
    "output": "PASS node-tests tests/unit/middleware/isAdmin.test.js\n  isAdmin Middleware\n    isAdminMiddleware\n      ✓ should reject request without Authorization header (1 ms)\n      ✓ should reject request with invalid token format\n      ✓ should reject request with invalid/expired token\n      ✓ should reject request when user profile fetch fails (1 ms)\n      ✓ should reject non-admin user\n      ✓ should reject inactive admin user\n      ✓ should allow active admin user (1 ms)\n      ✓ should handle unexpected errors gracefully\n    optionalAdminMiddleware\n      ✓ should continue without authentication when no token provided (1 ms)\n      ✓ should set user info when valid token provided\n      ✓ should continue gracefully when authentication fails\n\nTest Suites: 1 passed, 1 total\nTests:       11 passed, 11 total\nSnapshots:   0 total\nTime:        0.098 s, estimated 1 s\nRan all test suites matching /tests\\/unit\\/middleware\\/isAdmin.test.js/i.\n",
    "error": null
  },
  {
    "file": "tests/smoke/feature-flags.test.js",
    "passed": true,
    "output": "PASS node-tests tests/smoke/feature-flags.test.js\n  Feature Flags Smoke Tests\n    ✓ Feature flags should initialize without errors (1 ms)\n    ✓ Should be able to check flag status (1 ms)\n    ✓ Should return service status (1 ms)\n    ✓ Should return all flags\n    ✓ Should handle unknown flags gracefully\n    ✓ Feature flags should be consistent\n\nTest Suites: 1 passed, 1 total\nTests:       6 passed, 6 total\nSnapshots:   0 total\nTime:        0.091 s, estimated 1 s\nRan all test suites matching /tests\\/smoke\\/feature-flags.test.js/i.\n",
    "error": null
  }
]